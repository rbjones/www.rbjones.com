<?xml version="1.0"?>
<!DOCTYPE ProofPower SYSTEM "pp-symbol.ent">
<xldoc xmlns="http://www.x-logic.org/xmlns/draft/xld"
       xmlns:xhtml="http://www.w3.org/TR/xhtml1/strict"
       id="$Id: dichotomies.xml,v 1.1.1.1 2006-04-19 20:44:52 rbj01 Exp $"
       name="dichotomies"
       title="Formal Models of Fundamental Dichotomies"
       description="Some very simple models relating to the analytic/synthetic necessary/contingent dichotomies."
       keywords="x-logic xml logic proofpower gst hol set theory philosophy knowledge analytic formal"
       class="con"
       root="../../../"
       path="pp/gst/tok/"
       up="index.html"
       rbjhome="http://www.rbjones.com/rbjpub/rbj.htm"
       maintitle="mnt">
<ft lang="xl-ign" rest="">
set_flag("pp_show_HOL_types", true);
set_flag("pp_show_HOL_types", false);
</ft>

<section title="Overview">
<abstract>
A simple formal model is used to explore the minimal conditions necessary for the analytic/synthetic necessary/contingent dichotomies to make sense.
</abstract>
<secbody>
<sbcol>
<secref title="Introduction" />
</sbcol>
<sbcol>
<secref title="What is a Language?" />
<subsec title="Listing of Theory dichot" href="dichot.html"/>
</sbcol>
</secbody>
</section>

<section title="Introduction">
<abstract>
This is a formalistion in Galactic set theory of a mathematical model similar to that previously presented in Factasia at 
</abstract>
<secbody>
<sbcol>
<subsec title="Purposes">
The main purpose of this very trivial bit of modelling is to give the simplest possible example of a formal model applied to analytic philosophy.
However, it could not do that unless there were some more specific philosophical purpose to this particular example.
There are several small purposes which I believe it contributes to.
</subsec>
<subsec title="Tenability of Dichotomies">
The model helps to make some small observations about the when a dichotomy is "tenable", and in particular to suggest for the particular dichotomies which is concerns that they are both tenable and fundamental.
</subsec>
</sbcol>
<sbcol>
<subsec title="The Theory dichot">
We here introduce the new theory in the context of galactic set theory (though it could have been done in less exotic environs).
<ft lang="xl-sml" rest="">
open_theory "gst";
set_pc "gst";
force_new_theory "dichot";
force_new_pc "dichot";
merge_pcs ["xl_cs_&exist;_conv"] "dichot";
set_merge_pcs ["gst", "dichot"];
</ft>
</subsec>
</sbcol>
</secbody>
</section>

<section title="What is a Language?" tag="WhatLan">
<abstract>
A model for descriptive languages.
</abstract>
<secbody>
<sbcol>
<subsec title="Language Games and Description">
As Wittgenstein has made notorious, there are many games we can play with language.
One is of very special importance, to make objective statements about our world, and it is this game which exclusively concerns me here.
When Wittgenstein wrote his tractatus he too was particularly (if not exclusively) interested in this game, and his perception of how much else there is may have contributed to his later repudiation of the Tractatus.
We are here concerned with purely descriptive languages, or the purely descriptive part of other languages (though the models do allow room for other kinds of sentence, they contribute nothing to our understanding of them).
</subsec>
<subsec title="Truth">
What we take to be characteristic of descriptive language is that it is used to make assertions which tell us something about the world we live in because they rule out certain possible states of affairs.
The way this works is that, with a perfect understanding of the language, we can take a sentence together with certain information about the context in which it is asserted, and some information about the world, and arrive at a truth value.
It is characteristic of descriptive language that important elements of its semantics can be expressed as truth valuations.
To understand an assertion is to understand under what conditions it is true.
This information we will refer to as the literal content of an assertion.
</subsec>
</sbcol>
<sbcol>
<subsec title="Connotation">
A wide variety of different kinds information may be conveyed by an assertion, or by the way the assertion is accomplished, other than its literal content.
Connotation is a word for just one kind of non-literal content.
Though some of these have a strong claim to be considered part of the meaning of an assertion, they are not our present concern.
When we speak here of the meaning of a sentence, before or after its assertion, we are speaking only of its literal content, and we do not intend to suggest that our models are perfect or complete.
</subsec>
<subsec title="Three Mappings">
The key elements of a language in the model we propose here are three mappings which together provide the semantics of the language.
These mappings I will call "content", "meaning" and "truth".
</subsec>
</sbcol>
</secbody>

<secbody>
<sbcol>
<subsec title="Content">
The first mapping is present in recognition that we may be said to understand a sentence even if it has not been asserted and we have not in mind any particular context for its assertion.
It allows us to talk about very strong identities of content (synonymy, Quine might call it) which are independent of context, and a notion of analyticity appropriate to sentences. 
</subsec>
</sbcol>
<sbcol>
<subsec title="Meaning">
The second mapping gives us that more complete account of the meaning of an assertion which incorporates the elements of context which may be necessary to disambiguate it.
I am allowing here (but not insisting) that there be a "meaning" of this sort which has greater content than an assignment of truth values for the assertion to every possible world in which it has a truth value, and we call these "propositions", without intending by that term any more than is explicit in our model.
Iexpect to show that dabbling with propositions in this way is safe and without loss of generality, notwithstanding any doubts which may be raised about whether the notion of proposition is meaningful (or "tenable").
</subsec>
</sbcol>
<sbcol>
<subsec title="Truth">
The third mapping tells us how to interpret a proposition, and is a partial assigment of truth values to possible worlds for each proposition.
The existence of such a mapping characterises the kind of language I am modelling (I am tempted to call this descriptive language, but the connotations of this term are a little to strong and might, for example, exclude statements about morality).
</subsec>
</sbcol>
</secbody>

<secbody title="Informal Description">
<sbcol>
<subsec>
<p>
In the following the notation used is similar to that in <slink>Modelling the Triple-Dichotomy</slink>, but has been adjusted by factorising the semantic mapping, so that it first yeilds a context independent "content" for each sentence in the language, and then, once necessary context is supplied, a "proposition".
</p>
</subsec>
</sbcol>
<sbcol>
<subsec>
<p>
A language and its semantics is modelled using certain sets, some distinguished members of the sets and various functions defined over these sets.
In terms of these features of the language we define certain terms of philosophical interest, which are of interest to me because of the role of these concepts in articulating an architecture for software which reasons about knowledge.
</p>
</subsec>
</sbcol>
</secbody>

<secbody>
<sbcol>
<subsec title="Sets or Types">
<p>
Though I am working in higher order set theory, and all the collections used in the model are sets, it is in some ways natural to think of these as types.
This draws out the distinction between these sets which we think of as collections and the functions which follow, which also happen to be sets but are not thought of as collections.
</p><p>
The "types" use in the model are as follows:
</p>
<dl>
<dt>TruthValue</dt>
<dd>The set of truth values which an asserted sentence of language "l" may take.
The possibility that a sentence asserted in some context has no meaning may be modelled here by the use of truth values other than "true" and "false".
The number of truth values and their significance is language specific, and is left loose in this specification, except that there must be at least two distinct truth values, which are named "true" and "false".
Since the semantic mappings are specified as total functions, if there are any sentences, sentences in context, or propositions which are not meaningful, extra values in the codomains of the relevant semantic mapping or valuation function may be used with effects logically similar to the use of partial functions.
</dd>
<dt>Sentence</dt>
<dd>A non-empty set which contains all the sentences in the language.</dd>
</dl>
</subsec>
</sbcol>
<sbcol>
<subsec>
<dl>
<dt>Content</dt>
<dd>The set of possible "contents" of a sentence in the language.</dd>
<dt>Context</dt>
<dd>The set of possible contexts relevant to the meaning of an asserted sentence in the language.</dd>
<dt>Proposition</dt>
<dd>The set of propositions in the language.
What a proposition is, so far as this model is concerned, is something which is determined by the definition of the language, and need not be the same in all languages.</dd>
<dt>World</dt>
<dd>The set of "possible worlds" which constitute the subject matter of the language.</dd>
</dl>
</subsec>
<subsec title="Mappings">
The following mappings determine the semantics of the language.
<dl>
<dt>content</dt>
<dd>is a function which maps sentences of the language to their "Content".</dd>
<dt>meaning</dt>
<dd>is a (curried) function which maps the content of a sentence in the language in some context to the "proposition" expressed by the sentence in that context.</dd>
<dt>value</dt>
<dd>is a (curried) function which maps a proposition in some situation (interpretation, or possible world) to its truth value (a TruthValue) in that world.</dd>
</dl>
</subsec>
</sbcol>
</secbody>

<secbody title="Formalisation">
<sbcol>
<subsec>
The above informal notes on our domain of discourse are formalised below.
The model is simple, and at first glance might be thought logically uncontroversial.
Undertaking the formalisation makes clear that even in so simple a model as this, there are pitfalls, which if glossed over (which the use of a proof tool prevents) might lead to unsound reasoning.
In general the method is specification by loose but conservative extension.
This amounts to the introduction of new names together with a property which partly determines what these names denote.
</subsec>
</sbcol>
<sbcol>
<subsec>
That the extension is conservative is established by proof that there do already exist, in our set theoretic ontology, values which have the desired properties.
The proof, regrettably, is not always accomplished automatically, but it is always checked automatically, and the details of the proof script are usually sufficiently obscure to be unintellible to most of my intended readers.
The proof scripts themselves are not displayed in this document, though they are in the source for this document, which is available for download.
</subsec>
</sbcol>
</secbody>

<secbody>
<sbcol>
<subsec title="Truth Values">
<hide>
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&exist; TruthValue true false&bull;
true &isin; TruthValue
&and; false &isin; TruthValue
&and; &not; true = false&qqter;);
a (&exist;_tac &qqtel;(Pair &empty; (Unit &empty;))&qqter;);
a (&exist;_tac &qqtel;Unit &empty;&qqter;);
a (&exist;_tac &qqtel;&empty;&qqter;);
a (once_rewrite_tac[gst_relext_clauses]);
a (rewrite_tac[]);
a strip_tac;
a (&exist;_tac &qqtel;&empty;&qqter;);
a (rewrite_tac[]);
xl_set_cs_&exist;_thm(pop_thm());
</ft>
</hide>
<holconst><holsig>
TruthValue true false: 'a GS
</holsig>
<holpred>
true &isin; TruthValue
&and; false &isin; TruthValue
&and; &not; true = false
</holpred>
</holconst>
</subsec>
<subsec title="Domains">
We now introduce a number of collections which provide domains and codomains for the various mappings involved in the semantics.
For the required semantic mappings to exist these domains must be non-empty.
<hide>
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&exist;Sentence Content Context
Proposition World:'a GS&bull;
&not;(Sentence = &empty;
&or; Content = &empty;
&or; Context = &empty;
&or; Proposition = &empty;
&or; World = &empty;)
&qqter;);
a (REPEAT_N 5 (&exist;_tac &qqtel;Unit &empty;&qqter;));
a (lemma_tac &qqtel;&not;Unit &empty; = &empty;&qqter;);
a (once_rewrite_tac[gst_relext_clauses]);
a strip_tac;
a (&exist;_tac &qqtel;&empty;&qqter; THEN rewrite_tac[]);
a (asm_rewrite_tac[]);
xl_set_cs_&exist;_thm(pop_thm());
</ft>
</hide>
<holconst><holsig>
Sentence Content Context
Proposition World: 'a GS
</holsig>
<holpred>
&not;(Sentence = &empty;
&or; Content = &empty;
&or; Context = &empty;
&or; Proposition = &empty;
&or; World = &empty;)
</holpred>
</holconst>
</subsec>
</sbcol>
<sbcol>
<subsec title="Mappings">
We now introduce the semantic and valuation mappings.
The following conjecture expresses the existence of mappings with the desired properties:
<hide>
<ft lang="xl-sml" rest="">
set_goal ([],
</ft>
</hide>
<ft lang="xl-sml" rest="">
&qqtel;&exist;content meaning value:'a GS&bull;
content &isin; Sentence &rarr; Content
&and; meaning &isin; Content &rarr; (Context &rarr; Proposition)
&and; value &isin; Proposition &rarr; (World &rarr; TruthValue)&qqter;
</ft>
And its proof (details omitted) justifies the following conservative extension:
<hide>
<ft lang="xl-sml" rest="">
);
a (strip_asm_tac (
	rewrite_rule [gst_relext_clauses]
	(get_spec &qqtel;Sentence&qqter;)));
a (prove_&exist;_tac THEN strip_tac);
(* *** Goal "1" *** *)
a (bc_thm_tac &exist;&rarr;_thm);
a (bc_thm_tac &exist;&rarr;_thm);
a (&exist;_tac &qqtel;true&qqter;
	THEN rewrite_tac [get_spec &qqtel;true&qqter;]);
(* *** Goal "2" *** *)
a (strip_tac);
(* *** Goal "2.1" *** *)
a (bc_thm_tac &exist;&rarr;_thm);
a (bc_thm_tac &exist;&rarr;_thm);
a (&exist;_tac &qqtel;e'''&qqter;
 THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a (bc_thm_tac &exist;&rarr;_thm);
a (&exist;_tac &qqtel;e'&qqter;
 THEN asm_rewrite_tac[]);
xl_set_cs_&exist;_thm(pop_thm());
</ft>
</hide>
<holconst><holsig>
content meaning value: 'a GS
</holsig>
<holpred>
content &isin; Sentence &rarr; Content
&and; meaning &isin; Content &rarr; (Context &rarr; Proposition)
&and; value &isin; Proposition &rarr; (World &rarr; TruthValue)
</holpred>
</holconst>
The properties asserted are simply that the mappings are functions whose domains and codomains are as specified.
Innocuous thought these properties are, they would be unsatisfiable if we had not previously specified that these domains were to be non-empty (though in the case of the meaning and value maps the non-emptyness of the codomain must be proven in the course of proving the consistency claim shown above).
</subsec>
</sbcol>
</secbody>
</section>

<section title="The Analytic/Synthetic Dichotomy">
<abstract>
The terms analytic and synthetic are defined, of sentences, sentences in context, and propositions.
</abstract>
<secbody>
<sbcol>
<subsec title="What Kind of Thing may be Analytic?">
Rather than deciding what kinds of entity are properly to be considered analytic or synthetic, I will define the concepts for all the contenders available in this model, though I have myself reservations about the appropriateness of the term when applied to propositions.
Since we have no "overloading" available in our formal notation, this is accomplished by appending a suffix to the name indicating the kind of entity to which the particular variant of the concept is applicable.
</subsec>
</sbcol>
<sbcol>
<subsec title="Analytic Truths?, or what?">
More often than not, when we speak of something as being analytic, we are claiming it is <i>true</i> in some special way.
I'm not going to formalise this, but I will do a token formalisation of "analytic_truth".
It seems to me more useful to talk of sentences in general rather than just those which are true, and to define analytic and synthetic as giving a dichotomy over this domain.
So in the following "analytic" DOES NOT MEAN "analytic truth".
</subsec>
</sbcol>
</secbody>

<secbody>
<sbcol>
<subsec title="Necessary Propositions" tag="NecProp">
The "value" mapping assigns to each proposition a valuation function, which tells us the truth value of that proposition in each possible world.
Some of those valuation functions allways give the same truth value, i.e. they are constant valued functions.
In combinatory logic there is a special combinator "K" which when applied to a value v returns a constant v valued function.
We define an analogous constructor as a function in HOL.
This needs two arguments because of the special limitations on functions in set theory, the first is the domain of the required constant function, the second is the value which is must return.

<hide>
That the extension is conservative is established by proof that there do already exist, in our set theoretic ontology, values which have the desired properties.
The proof, regrettably, is not always accomplished automatically, but it is always checked automatically, and the details of the proof script are usually sufficiently obscure to be unintellible to most of my intended readers.
The proof scripts themselves are not displayed in this document, though they are in the source for this document, which is available for download.
</hide>

<holconst><holsig>
K<sub>g</sub>: 'a GS &rarr; 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;d v&bull; K<sub>g</sub> d v = (&lambda;<sub>g</sub> x&bull; v) d
</holpred>
</holconst>
A proposition is necessary if its valuation function is constant.

<holconst><holsig>
necessary<sub>p</sub>: 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;p&bull; necessary<sub>p</sub> p &equiv;
	p &isin; Proposition &and;
	&exist;t&bull; t &isin; TruthValue &and;
	value <sub>g</sub> p = K<sub>g</sub> World t
</holpred>
</holconst>

</subsec>
<subsec title="Necessarily True Propositions">

A proposition is necessarily true if its valuation function is the constant "true" valued function.
This definition is illustrative of a genus which specialise the various concepts defined below to particular truth values.
I don't propose to provide any others from this genus. 

<holconst><holsig>
necessarily_true<sub>p</sub>: 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;p&bull; necessarily_true<sub>p</sub> p &equiv;
	p &isin; Proposition &and;
	value <sub>g</sub> p = K<sub>g</sub> World true
</holpred>
</holconst>

</subsec>
<subsec title="Necessary Statements">
A statement (in this context, a sentence in context) is necessary if its meaning is a necessary proposition.

<holconst><holsig>
necessary<sub>s</sub><sub>c</sub>: ('a GS &cross; 'a GS) &rarr; BOOL
</holsig>
<holpred>
&forall;s c&bull; necessary<sub>s</sub><sub>c</sub> (s, c) &equiv;
	s &isin; Sentence &and;
	c &isin; Context &and;
	 necessary<sub>p</sub> (meaning <sub>g</sub> (content <sub>g</sub> s) <sub>g</sub> c)
</holpred>
</holconst>
</subsec>
</sbcol>
</secbody>
</section>


</xldoc>
