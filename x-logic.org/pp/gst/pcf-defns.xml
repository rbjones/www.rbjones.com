<?xml version="1.0"?>
<!DOCTYPE ProofPower SYSTEM "pp-symbol.ent">
<xldoc xmlns="http://www.x-logic.org/xmlns/draft/xld"
       xmlns:xhtml="http://www.w3.org/TR/xhtml1/strict"
       id="$Id: pcf-defns.xml,v 1.1.1.1 2006-04-19 20:44:52 rbj01 Exp $"
       name="pcf-defns"
       title="Definitions of pure categories and functors."
       description="The definition of pure functors and categories in Galactic set theory and of various operations over them."
       keywords="x-logic xml logic proofpower gst hol set theory functor category pure"
       class="con"
       root="../../"
       path="pp/gst/"
       up="../index.html"
       rbjhome="http://www.rbjones.com/rbjpub/rbj.htm"
       maintitle="mnt">

<section title="Overview">
<abstract>
This document defines the concepts "pure category" and "pure functor" as a preliminary to developing a foundation system whose domains of discourse are the pure categories and functors.
</abstract>
<secbody>
<sbcol>
<secref title="Introduction"/>
<secref title="Functor Functions"/>
<secref title="Application and Composition"/>
<secref title="Concrete Categories"/>
<secref title="Concrete Functors"/>
</sbcol>
<sbcol>
<secref title="Category-Functors and Functor-Categories"/>
<secref title="Hereditary Properties"/>
<secref title="Pure Functors"/>
<secref title="Pure Categories"/>
<subsec title="Listing of Theory pcf-defs" href="pcf-defs.html" />
</sbcol>
</secbody>
</section>

<section title="Introduction">
<abstract>
Pure functors and categories are the concrete functors and categories which can be constructed by an iterative process starting from the empty category.
</abstract>
<secbody title="Goals">
<sbcol>
<subsec title="1. Goals">
I regard this work as frivolous.
It is motivated more by curiosity than by any expectation of applicability.
Nevertheless, there are some fairly definite objectives in mind.
</subsec>
<subsec title="2. Categorical Foundations">
<p>
There is a long running extant debate between certain category theorists and others about whether category theory can offer better foundations for mathematics than set theory.
To some extent this debate is fuelled by ambiguity about what a foundation is, and it may be that what some of these category theorists are thinking of is not the kind of thing which I call a "logical foundation for mathematics".
In this sense, a logical foundation is simply any logical system within which the main body of mathematics can be developed <i>by conservative extension</i>, i.e. following Frege's formula:
</p>
<p>Mathematics = Logic + Definitions</p>
<p>
With a liberal interpretation of what can be used as a logic (you need something with a decently high "proof theoretic strength", i.e. something like set theory, if you want to provide a foundation for classical mathematics).
</p>
<p>
This material explores one way of providing a "logical foundation" for mathematics based on category theory.
</p>
</subsec>
</sbcol>
<sbcol>
<subsec title="3. Existing Approaches">
<p>
The kinds of foundational story provided by category theorists seem to me largely irrelevant to the problems which they identify with set theoretic foundations.
So far as I understand them there are two kinds of problem.
The first kind is explained in the introduction to Sauders Mac Lane's "Categories for the Working Mathematician", in which observes that many of the things which one would like to be categories aren't.
It should be fairly obvious here that the complaint arises from the well-foundedness of classical set theory, and is essentially <i>ontological</i>.
The only answer to this kind of problem is a "non-well-founded" foundation system (set-theoretic or otherwise), and I have not come across any category theorists arguing for this kind of system.
</p>
<p>
The other kind of problem is linguistic.
Category theory is often thought of as a better way of talking, and in this respect is somewhat coy.
Not only does category theory provide a new way of talking, it regards the previous idioms as disreputable, and therefore a category theorist might seek a foundation system which has the same domain of discourse but a new vocabulary.
Perhaps the most common approach to categorical foundations follows this line, usually through topos theory.
The idea is not that sets are the wrong thing to have in your universe, but that we should talk about them in a more abstract way.
</p>
<p>
The other kind of foundational innovation which has been advocated by category theorists (notably Mac Lane) is the use of weak set theories.
This apparently on the grounds that the strength of existing theories is not necessary.
I am completely unaware of any category theoretic rationale for this kind of innovation, which is in any case, not very innovative, and does not offer to fix either of the kinds of problem which I identified above (and I don't know of any kind of problem at all that it fixes, except perhaps ontological vertigo).
</p>
</subsec>
</sbcol>
</secbody>
<secbody>
<sbcol>
<subsec title="4. Problems with Alternatives">
<p>
There are two kinds of problems which can be raised with these alternatives.
</p>
<p>
Firstly that the proposed systems are in pragmatic ways, less good than classical foundations.
</p>
<p>
Secondly that the proposed approaches are fundamentally incapable of providing adequate foundations for classical mathematics.
</p>
<p>
The proposals here are an answer to the second kind of objection.
</p>
<p>
The "can't be done" objection can be made to hold water where a weak foundation system is proposed as adequate for the whole of classical mathematics, and support for this answer can probably be found in "reverse mathematics" (if one needs to look that far).
However, where weakness is not a definitive part of the proposed alternative (as it is in Mac Lane's set theories), the "can't be done" objection is on weak grounds.
Once you have a weak foundation system it can be made technically adequate by nasty by effective (in principle) ways of importing proof theoretic strength, such as adding an axiom asserting the consistency of ZFC.
Though this approach would probably not yield a practically useful foundation, it would yield a technically sufficient one (i.e. the results derivable would encompass those derivable in ZFC).
</p>
</subsec>
</sbcol>
<sbcol>
<subsec title="5. Another Kind of Alternative">
<p>
Don't just chose a different language, chose a different ontology.
</p>
<p>
If you chose a non-well-founded ontology you can solve some of the problems of categories that don't exist in classical set theory (e.g. the category of categories), but you tend to find that other things happen which you might not like (e.g. the category of categories might not be cartesian closed).
You are also likely to find it difficult to get strength in a nice usable way, and you may find that people complain about the lack of intuition about your ontology.
</p>
<p>
You can have a completely category theoretic ontology which is ontologically as rich and intuitively as comprehensible as classical set theory, and on that base contruct a foundational system which is category theoretic and strong.
Not sure how "pragmatic" it would be.
This is what we are exporing.
</p>
</subsec>
<subsec title="6. Another Kind of Negative Claim">
<p>
Though a part of this enterprise is just to show that a negative result about category theoretic foundations is hard to establish, I might say that my main gripe about such a claim is that it is just too vague to be capable of establishment.
How do we know which foundation systems are "categorical".
</p>
<p>
It seems to me quite obvious that one can have technically adequate foundation systems which are categorical, either in the linguistic sense, by adding consistency of ZFC into topos theory, or in the ontological sense, by the means explored here.
However, adding consistency of ZFC into topos theory might only be possible by the use of language which category theorists abjure (and the ontological approach adopted here is likely to be linguistically distasteful to category theorists).
Its just possible (though I still think unlikely) that if one could clarify the linguistic proscriptions which category theorists advocate you would end up with a fundamentally limited language.
</p>
</subsec>
</sbcol>
</secbody>

<secbody>
<sbcol>
<subsec title="The Theory pcf">
<ft lang="xl-ign" rest="">
set_flag("pp_show_HOL_types", true);
set_flag("pp_show_HOL_types", false);
</ft>
First we introduce for these definitions the new theory "pcf-defs", a child of gst.
<ft lang="xl-sml" rest="">
open_theory "gst";
force_new_theory "pcf-defs";
force_new_pc "pcf-defs";
set_merge_pcs ["gst","pcf-defs"];
</ft>
</subsec>
</sbcol>
</secbody>
</section>

<section title="Functor Functions" tag="FuncFunc">
<abstract>
A functor function is a graph together with its domain and codomain.
</abstract>
<secbody>
<sbcol>
<subsec title="Functor Functions">
A functor is a function which may have a codomain which is larger than its range, and which cannot therefore be represented just by its graph.
We therefore define first a special kind of function, which we call a "func" (think of the "c" as hinting the connection with categories), and which consists of an graph together with its domain and codomain.
<holconst><holsig>
func : 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;s&bull; func s &equiv; &exist;d c g&bull;
	s = (d&mapsto;c)&mapsto;g
	&and; fun g
	&and; dom g = d
	&and; ran g &sube; c
</holpred>
</holconst>
Of course, the "d" component here is redundant since it can be recovered from the graph, so maybe it should omitted.
I'm going to wait and see whether it gets in the way in the proofs.
</subsec>
<subsec title="Constructor">
A constructor function is defined as follows:
<holconst><holsig>
mk_func : 'a GS &rarr; 'a GS &rarr; 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;l g r&bull; mk_func l g r = (l &mapsto; r) &mapsto; g
</holpred>
</holconst>
</subsec>
</sbcol>
<sbcol>
<subsec title="Projections">
The projection functions are defined as follows:
<holconst><holsig>
lefts rights graph : 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;f&bull; lefts f = fst (fst f)
	&and; rights f = snd (fst f)
	&and; graph f = snd f
</holpred>
</holconst>
The final "s" should warn you that the result is a set.
Next we define analogues which return functor (still as sets however).
</subsec>
<subsec title="Identity Functor Functions">
First we define a function which converts an arbitrary set into an identity functor function over that set.
<holconst><holsig>
idff : 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;f&bull; idff f = mk_func f (id f) f
</holpred>
</holconst>
Then we use it to define the left and right identity functors.
<holconst><holsig>
idleft idright : 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;f&bull; idleft f = idff (lefts f)
	&and; idright f = idff (rights f)
</holpred>
</holconst>
Later <i>left</i> and <i>right</i> will be defined as functions over a new type "PFc" of pure functors.
</subsec>
<subsec title="Field">
Its handy to have this definition of the union of the domain and codomain:
<holconst><holsig>
fields : 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;f&bull; fields f = lefts f &cup; rights f
</holpred>
</holconst>
</subsec>
</sbcol>
</secbody>
</section>

<section title="Application and Composition" tag="AppComp">
<abstract>
Application and composition of functor functions is very similar to ordinary function application and composition.
</abstract>
<secbody>
<sbcol>
<subsec title="Application of Functors">
Application of a functors is application of its graph.
<holconst><holsig>
appg : 'a GS &rarr; 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;f g&bull; appg f g =
	(graph f) <sub>g</sub> g
</holpred>
</holconst>
We introduce here the use of suffix f for something which operates on functors or the sets which represent them.
In the latter case a "g" is appended to the name to distinguish it from the corresponding operation which will later be defined over the type of functors.
Composition of functors is associative, and in our concrete categories composition is always this operation.
</subsec>
</sbcol>
<sbcol>
<subsec title="Composition of Functors">
Composition of functors is essentially composition of their graphs.
<ft lang="xl-sml" rest="">
declare_infix(240,"og<sub>f</sub>");
</ft>
<holconst><holsig>
$og<sub>f</sub> : 'a GS &rarr; 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;f g&bull; f og<sub>f</sub> g =
	mk_func
	(lefts f)
	((graph f) o (graph g))
	(rights g)
</holpred>
</holconst>
We introduce here the use of suffix f for something which operates on functors or the sets which represent them.
In the latter case a "g" is appended to the name to distinguish it from the corresponding operation which will later be defined over the type of functors.
Composition of functors is associative, and in our concrete categories composition is always this operation.
</subsec>
</sbcol>
</secbody>
</section>

<section title="Concrete Categories" tag="CC">
<abstract>
A concrete category is (in our special world) just a set of functor functions which is closed under composition and has left and right identities.
</abstract>
<secbody>
<sbcol>
<subsec title="Categories">
A category is a collection of "func"s which is closed under composition and has left and right identities.
<holconst><holsig>
ccat : 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;s&bull; ccat s &equiv;
	&forall;t&bull; t &isin; s &rArr; func t
	&and; idleft t &isin; s
	&and; idright t &isin; s
	&and; &forall;u&bull; u &isin; s
		&and; rights t = lefts u
		&rArr; (t og<sub>f</sub> u) &isin; s
</holpred>
</holconst>
</subsec>
</sbcol>
<sbcol>
<subsec title="Category Constituents">
Categories are built out of categories.
In order to express the purity requirement which is characteristic of the categories in our chosen domain of discourse ("pure" as in "pure set", suitably modified for categories), we need to be able to talk about the categories which are immediate constituents of some category (analogously to the members of a set).
<holconst><holsig>
ccat_const : 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;c&bull; ccat_const c = &lcup; (Image lefts c)
</holpred>
</holconst>
This is the union of the set which is the image of the category under left projection, i.e. the union of the domains of all the functors in the category.
</subsec>
</sbcol>
</secbody>
</section>

<section title="Concrete Functors" tag="CF">
<abstract>
A concrete functor is a functor function whose domain and codomains are sets of functor functions and which respects composition.
</abstract>
<secbody>
<sbcol>
<subsec title="Definition">
A concrete functor is a func which respects composition.
<holconst><holsig>
cfunc : 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;f&bull; cfunc f &equiv; func f
	&and; (&forall;g&bull; g &isin; fields f &rArr; func g)
	&and; &forall;g h&bull; g &isin; (lefts f)
		&and; h &isin; (lefts f)
		&and; rights g = lefts h
		&rArr; appg f (g og<sub>f</sub> h)
		= (appg f g) og<sub>f</sub> (appg f h)
</holpred>
</holconst>
</subsec>
</sbcol>
<sbcol>
<subsec title="Functor Constituents">
Functors are built out of functors.
In order to express the purity requirement which is characteristic of the functors in our chosen domain of discourse ("pure" as in "pure set", suitably modified for functors), we need to be able to talk about the functors which are immediate constituents of some functor (analogously to the members of a set).
<holconst><holsig>
cfunc_const : 'a GS &rarr; 'a GS
</holsig>
<holpred>
&forall;f&bull; cfunc_const f = (lefts f) &cup; (rights f)
</holpred>
</holconst>
</subsec>
</sbcol>
</secbody>
</section>


<section title="Category-Functors and Functor-Categories" tag="CFFC">
<abstract>
A category-functor (ccat_cfunc) is a concrete functor whose domain and codomain are concrete categories (not just sets) while a functor-category (cfunc_ccat) is a concrete category whose elements are concrete functors (not just functor functions). 
</abstract>
<secbody>
<sbcol>
<subsec title="Category-Functors">
<holconst><holsig>
ccat_cfunc : 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;f&bull; ccat_cfunc f &equiv; cfunc f
	&and; &forall;c&bull; c &isin; (fields f)
		&rArr; ccat c
</holpred>
</holconst>
</subsec>
</sbcol>
<sbcol>
<subsec title="Functor-Categories">
<holconst><holsig>
cfunc_ccat : 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;c&bull; cfunc_ccat c &equiv; ccat c
	&and; &forall;f&bull; f &isin; c
		&rArr; cfunc f
</holpred>
</holconst>
</subsec>
</sbcol>
</secbody>
</section>


<section title="Hereditary Properties" tag="HP">
<abstract>
Hereditary properties are those which are inherited as new (concrete) functors and categories are constructed from old.
</abstract>

<secbody>
<sbcol>
<subsec>
<p>
Ideally, so far as clarity is concerned, we would here define two mutually recursive properties of properties, one for functors and the other for categories.
However, in practice there would be difficulties in demonstrating the consistency of such a definition which would make necessary one of two other approaches to establishing the existence of the desired properties.
</p>
</subsec>
</sbcol>
<sbcol>
<subsec>
<p>
One approach would be to take one of the properties as primary, define it first and then define the other in terms of it.
</p>
<p>
Its not immediately obvious which one to start with.
So I've done them both.
Naturally, having defined each independently I don't need to define either in terms of the other.
However, the theorems which show how they interlink may prove useful, we probably want to end up as if we had defined them mutually.
</p>
</subsec>
</sbcol>
</secbody>

<secbody>
<sbcol>
<subsec title="functor hereditary properties">
A property of an ordered pair of sets is "pf_hered" if a functor inherits this property from its constituent functors.
i.e. if all functors whose constituents are pf_hered functors are themselves pf_hered.

<holconst><holsig>
pf_hered : ('a GS &rarr; BOOL) &rarr; BOOL
</holsig>
<holpred>
&forall;p&bull; pf_hered p &equiv; &forall;f&bull;
	ccat_cfunc f
	&and; (&forall;g&bull; g &isin; cfunc_const f &rArr; p g)
	&rArr; p f
</holpred>
</holconst>
</subsec>
</sbcol>

<sbcol>
<subsec title="category hereditary properties">
(probably to be scrapped)
A property of a category is "pc_hered" if a category inherits this property from its constituent categories.
i.e. if all categories whose constituents are pc_hered categories are themselves pc_hered.
<holconst><holsig>
pc_hered : ('a GS &rarr; BOOL) &rarr; BOOL
</holsig>
<holpred>
&forall;p&bull; pc_hered p &equiv; &forall;c&bull;
	cfunc_ccat c
	&and; (&forall;d&bull; d &isin; ccat_const c &rArr; p d)
	&rArr; p c
</holpred>
</holconst>
</subsec>
</sbcol>
</secbody>
</section>

<section title="Pure Functors" tag="PF">
<abstract>
Pure functors are the concrete functors which can be built starting from the empty category using a sequence of alternating constructions of categories and functors from functors and categories (resp.) already constructed.
</abstract>
<secbody>
<sbcol>
<subsec title="Pure Functors">
A pure functor is a functor which has all the pcf_hereditary properties.
This is an oblique way of saying that the functor can be constructed from the trivial endo-functor over the empty category by a process which involves only the formation of functors from functors already constructed.

<holconst><holsig>
pure_functor : 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;s&bull; pure_functor s &equiv;
	&forall;p&bull; pf_hered p &rArr; p s
</holpred>
</holconst>
</subsec>
</sbcol>
</secbody>
</section>

<section title="Pure Categories" tag="PC">
<abstract>
Pure categories are the concrete categories which can be built starting from the empty category using a sequence of alternating constructions of categories and functors from functors and categories (resp.) already constructed.
</abstract>
<secbody>
<sbcol>
<subsec title="Pure Categories">
A pure category is a category all of whose members (the arrows) are pure functors.

<holconst><holsig>
pure_category : 'a GS &rarr; BOOL
</holsig>
<holpred>
&forall;c&bull; pure_category c &equiv; &forall;p&bull; pc_hered p &rArr; p c
</holpred>
</holconst>
</subsec>
<subsec title="consistency proof">
We now prove that there exists a pure function.
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&exist;x&bull; pure_functor x&qqter;);
</ft>
</subsec>
</sbcol>
</secbody>
</section>
</xldoc>
