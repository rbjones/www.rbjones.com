<HTML>
<HEAD><TITLE>Definitions and locutions</TITLE>
</HEAD>
<BODY BGCOLOR="C0E0E0" LINK="#404080" VLINK="000000">
<A HREF="jrh0111.htm#end"><IMG SRC="../../rbjgifs/left.gif" ALT=left BORDER=0 ALIGN=LEFT></A>
<A HREF="jrh0100.htm"><IMG SRC="../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A NAME="start"></A>
<CENTER><H2>Definitions and locutions</H2></CENTER>
<P>
 <P>
<A NAME="par127"></A>
In practice, even in quite rich foundational systems, let alone in pure set
theory, representations of mathematical objects become unwieldy. For example,
<A HREF="jrh01b.htm#bourbaki-sets"><EM>[bourbaki-sets]</EM></A> estimates<A HREF="jrh01f.htm#37"><SUP>37</SUP></A> that even the number 1 if fully expanded would occupy
thousands of symbols in his system. So some kind of definitional mechanism is
needed, at least for human consumption, and possibly to stop overflow even for
a machine! The fundamental property of definitions is that it should be
possible in principle to do without them, though we need to say precisely what
this means.
<P>
<A NAME="par128"></A>
The simplest kinds of definitions are just shorthands for more complicated
expressions, for example 2 rather than {0,1}, (x,y) rather
than {x,{x,y}} and <IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>!x<FONT SIZE=5>.</FONT> P[x] rather than <IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>x<FONT SIZE=5>.</FONT> P[x] <IMG SRC="../../rbjgifs/and.gif" ALT=and>
<IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>y<FONT SIZE=5>.</FONT> P[y] <IMG SRC="../../rbjgifs/implies.gif" ALT=implies BORDER=0> y = x. We can understand such definitions in two ways,
either as metalogical abbreviations used to make formal texts more palatable to
the reader, or as a method of sanctioning the addition (in the object logic) of
new equational axioms. Generally, the latter is more efficient, since it keeps
the underlying terms small, but the former is more flexible: the defined notion
need not correspond to any kind of logical object, nor respect any underlying
type system. In fact the Nuprl system allows boths kinds of definition.
<P>
<A NAME="par129"></A>
Assuming that the object language has facilities for variable abstraction
(something like lambda-calculus), then any definitional constructs of this kind
can be reduced to new abbreviations or axioms of the form c = t where c
is a new constant name any t any closed term. For example, instead of writing
f(x) = E[x], we use f = <IMG SRC="../../rbjgifs/lambda.gif" ALT=lambda BORDER=0>x<FONT SIZE=5>.</FONT> E[x]. In any reasonable logical system the
addition of such axioms makes no difference: in principle we could do without
them (replace c by its expansion everywhere), and we do not derive any new
facts not mentioning c. They thus fulfil all the criteria we could demand of
definitions.
<P>
<A NAME="par130"></A>
There is a more general means of extending the logic with new constant symbols:
using names for things which have been proved to exist. If we can prove <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0>
<IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>x<FONT SIZE=5>.</FONT> P[x], then adding a new constant c and an axiom <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0> P[c] is a
conservative extension of most logical systems, in the sense that anything not
involving c could equally well be deduced without using c or its axiom.
(Simply because something like the natural deduction <IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>-elim rule is
usually valid.) It's not quite conservative in the sense that it can be written
away from formulas, though any formula Q[c] can be read as (<IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>x<FONT SIZE=5>.</FONT> P[x])
<IMG SRC="../../rbjgifs/and.gif" ALT=and> <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x<FONT SIZE=5>.</FONT> P[x] <IMG SRC="../../rbjgifs/implies.gif" ALT=implies BORDER=0> Q[x], for example. Given a theorem <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0> <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x<FONT SIZE=5>.</FONT>
<IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>!y<FONT SIZE=5>.</FONT> P[x,y], it is usually conservative to add a new function symbol f
and an axiom <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0> <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x<FONT SIZE=5>.</FONT> P[x,f(x)]. However if unique existence is
weakened to existence, this can smuggle in the Axiom of Choice. The situation
for constructive logics is even more delicate.
<P>
<A NAME="par131"></A>
A useful feature in a practical logic is a <EM> descriptor</EM>. For example, we
may allow a new term constructor <IMG SRC="../../rbjgifs/iota.gif" ALT=iota BORDER=0>x<FONT SIZE=5>.</FONT> P[x] ('the (unique) x such that
P[x]'), together with an axiom <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0> (<IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>!x<FONT SIZE=5>.</FONT> P[x]) <IMG SRC="../../rbjgifs/implies.gif" ALT=implies BORDER=0> P[<IMG SRC="../../rbjgifs/iota.gif" ALT=iota BORDER=0>x<FONT SIZE=5>.</FONT>
P[x]], or <IMG SRC="../../rbjgifs/epsilon.gif" ALT=epsilon BORDER=0>x<FONT SIZE=5>.</FONT> P[x] ('some x such that P[x]'), together with an
axiom <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0> (<IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>x<FONT SIZE=5>.</FONT> P[x]) <IMG SRC="../../rbjgifs/implies.gif" ALT=implies BORDER=0> P[<IMG SRC="../../rbjgifs/epsilon.gif" ALT=epsilon BORDER=0>x<FONT SIZE=5>.</FONT> P[x]]. These are called definite
and indefinite descriptors, respectively. Note that the latter is something
like the Axiom of Global Choice if we allow P[x] to contain other free
variables, and even the former is weakly nonconstructive because it effectively
allows us to introduce a total function even though <IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>x<FONT SIZE=5>.</FONT> P[x] may be
conditional on some other property. For this reason descriptors in formal
presentations of constructive logic <A HREF="jrh01b.htm#troelstra-con1"><EM>[troelstra-con1]</EM></A> are usually partial
operators --- this topic is discussed below.
<P>
<A NAME="par132"></A>
A descriptor is very useful for rendering informal notions of 'the x such
that ...' (it's much used by Bourbaki), and can even be used to implement
lambda-binding, set abstraction and so on, e.g. define <IMG SRC="../../rbjgifs/lambda.gif" ALT=lambda BORDER=0>x<FONT SIZE=5>.</FONT> E[x] to be
<IMG SRC="../../rbjgifs/epsilon.gif" ALT=epsilon BORDER=0>f<FONT SIZE=5>.</FONT> <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x<FONT SIZE=5>.</FONT> f(x) = E[x]. If we have <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0> <IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>x<FONT SIZE=5>.</FONT> P[x] and we have
an indefinite descriptor, then defining c = <IMG SRC="../../rbjgifs/epsilon.gif" ALT=epsilon BORDER=0>x<FONT SIZE=5>.</FONT> P[x] gives us <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0>
P[c]. Conversely, for any term t we have <IMG SRC="../../rbjgifs/turnstil.gif" ALT="|-" BORDER=0> <IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>x<FONT SIZE=5>.</FONT> x = t, so the
existential kind of definition always sanctions the equational kind. There is
thus a close relationship between the two kinds of definition, given a
descriptor.
<P>
<A NAME="par133"></A>
There are more complex definitional mechanisms which cannot be expanded away in
such a simple-minded manner, but can nevertheless be understood as inessential
abbreviations that could in principle be done without. These are usually
referred to as <EM> contextual definitions</EM>. A good example is the use of ZF
proper classes, where set-like statements about classes are really encoded
using logical predicates. Another example: cardinal numbers can in principle be
done without for most purposes, since all statements about arithmetic and
equality of cardinals may be regarded as statements about equinumerosity etc.
of sets. For example instead of |X| = |Y|<SUP>2</SUP> |Z| we can write 'there is a
bijection between X and (Y <IMG SRC="../../rbjgifs/cross.gif" ALT="cross"> Y) <IMG SRC="../../rbjgifs/cross.gif" ALT="cross"> Z'. The most sophisticated
example of all is using category-theoretic language like 'the category of all
sets' purely as a syntactic sugar on top of quite different statements. One of
the interesting questions in formalized mathematics is the extent to which this
is possible.
<P>
<A NAME="par134"></A>
In any case, we shouldn't lay too much stress on the theoretical
eliminability of definitions. It's mainly a way of assuring ourselves
that we aren't 'really' extending the logic. Life without definitions would be
unbearably complicated, and anyway the whole significance of a theorem may
subsist in the definitions it depends on.
<P>
<A NAME="par135"></A>
There are other forms of definition, for example definition by recursion and
definition of inductive sets or relations. However given a mathematical theorem
justifying the existence of such a function, it can then be defined using one
of the mechanisms given above. In programmable systems, the tedious matter of
deriving the required case of this theorem can be automated completely.
<P>
<A NAME="par136"></A>
<A NAME="end"></A>
<HR>
<CENTER>
<A HREF="jrh0111.htm#end"><IMG SRC="../../rbjgifs/left.gif" ALT=left BORDER=0 ALIGN=LEFT></A>
<A HREF="jrh0113.htm#start"><IMG SRC="../../rbjgifs/right.gif" ALT=right BORDER=0 ALIGN=RIGHT></A>
<A HREF="jrh0100.htm"><IMG SRC="../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT=home BORDER=0></A>
 <A HREF="http://www.abo.fi/~jharriso/">John Harrison</A>
 96/8/13; HTML by <A HREF="http://www.rbjones.com/rbjpub/rbj.htm"><IMG SRC=../../rbjgifs/rbjin1.gif BORDER=0 ALIGN=TOP></A> 96/8/16
</CENTER>
</BODY></HTML>
