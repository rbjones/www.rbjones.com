<HTML>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../prof/p1sty.txt" TITLE="Content">
<HEAD><TITLE>MainFrame: HOST - Higher Order Set Theory</TITLE>
<META name="description" contents="A description of a formalisation of set theory in Higher Order Logic, (polymorphic variety based on Church's Simple Theory of Types).">
<META name="keywords" contents="RbJ FormaL MethoD SeT TheorY HOL HOST HigheR OrdeR LogiC PolymorphisM">
</HEAD>
<BODY CLASS=con>
<CENTER>
<FONT COLOR=maroon><H1>HOST - Higher Order Set Theory</H1></FONT>
</CENTER>

<A NAME="over"></A>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>Overview:</H1></TD>
<TD>
<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
Single powerful classical logical foundation system provides a touchstone for analytic truth.
</B></FONT></TD><TR></TABLE>
</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="15%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<A HREF="#feat"><B>Features</B></A><BR>
Classical set theory formalised in a polymorphic higher order logic based on the typed lambda calculus.
</TD></TR>
</TABLE>

</TD><TD>

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<A HREF="#rat"><B>Rationale</B></A><BR>
Set theory gives clean semantics with logical strength, polymorphic higher order logic enables all operators to be in the domain of discourse, building on the lambda calculus gives open-ended uniform support for variable binding constructs.
</TD></TR></TABLE>

</TD><TD>

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<A HREF="#ped"><B>Pedigree</B></A><BR>
Cantor, Zermelo and Fraenkel were the main sources of the set theory, Frege, Russell and Church contributed the predicate calculus, the type theory, and its realisation throught the lambda calculus.
Robin Milner contributed the polymorphism, Mike Gordon first applied it to Church's logic.
</TD></TR>
</TABLE>

</TD><TD WIDTH="20%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR><TD><A HREF="#imp"><B>Implementation</B></A><BR>
to adopt the LCF paradigm, with some further innovations, the most radical being the incorporation of a programming language in the logical kernel.</TD></TR>
</TABLE>


</TR></TABLE>

<P>
<A NAME="feat"></A>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1><A HREF="log011.htm" TARGET="_top">Features</A>:</H1>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
<UL>
<LI>Polymorphic Higher Order Logic
<LI>Classical Well-Founded Set Theory
</UL>
</B></FONT>
</TD></TR></TABLE>

</TD></TR></TABLE>

<P>
<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="50%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>FIRST HOL:</B>
<UL>
<LI>take the essence of functional abstraction, the pure lambda-calculus
<LI>add the simplest of type systems, with a sprinkling of variables
<LI>add logical constants, axioms and rules as required
</UL>
Now you have the <B>polymorphic variant of Alonzo Church's Simple Theory of Types</B>

</TD></TR>
</TABLE>

</TD><TD WIDTH="50%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>THEN ZF:</B>
<UL>
<LI>define a new type SET, polymorphic in its urelements
<LI>axiomatise so that it is a well-founded collection of sets at least as large as the universe of Zermelo-Fraenkel
</UL>
<P>
Giving a strong <B>polymorphic higher order set theory</B>.
If the type of urelements is instantiated to a single point type the set theory is a pure set  theory.
</TD></TR></TABLE>

</TD></TR></TABLE>

<P>
<A NAME="rat"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1><A HREF="log012.htm" TARGET="_top">Rationale</A>:</H1>
</TD>
<TD>
<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
<UL>
<LI>HOL for the pragmatic value of its polymorphic, higher-order, type system
<LI>ZF for power, flexibility, and fit with modern mathematics
</UL>
</B></FONT></TD><TR>
</TABLE>
</TD></TR></TABLE>
<P>
<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="50%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>WHY HOL:</B>
<UL>
<LI>uniform system of variables, binding, substitution
<LI>no need for schemas
<LI>diagnostic value of polymorphic types
</UL>
</TD></TR>
</TABLE>

</TD><TD WIDTH="50%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>WHY ZF:</B>
<UL>
<LI>ability to implement all modern mathematics <I>as is</I>, without change
<LI>flexibility to provide semantics for embedding any other language
<LI>high proof theoretic strength, easily further strengthened
<LI>intuitive semantics
</UL>
</TD></TR></TABLE>

</TD></TR></TABLE>
<P>

<A NAME="ped"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1><A HREF="log013.htm" TARGET="_top">Pedigree</A>:</H1>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5>
<TR><TD><FONT SIZE=4><B>
confluence of:
<UL>
<LI>classical type and set theory
<LI>pragmatic features from computer science
</UL>
</B></FONT></TD><TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP></TD><TD WIDTH="40%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>type theory:</B>
the logic derives from Frege's Begriffschrift and Peano's logical notations.
Russell introduced his Theory of Types to ensure consistency by eliminating vicious circles, but the same effects are achieved with much greater economy in Church's Simple Theory of Types, later improved pragmatically by Milner's polymorphism.
</TD></TR>
</TABLE>

<TD WIDTH="40%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>set theory:</B>
Cantor's creation, complete with Russell's paradox.
Zermelo provides the simplest fix as an axiomatic set theory in which set abstraction is constrained to "separation".
Fraenkel gives an extra ontological boost to give the power for modern mathematics through the replacement axiom, and we also adopt a variant on Grothendiek Universes.
</TD></TR>
</TABLE>

</TD><TD WIDTH="20%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>cs pragmatics:</B>
mainly from the LCF tradition, particularly polymorphism, modularity, and techniques for defining and implementing the foundation system
</TD></TR>
</TABLE>

</TD></TR></TABLE>



<P>
</CENTER>
<A NAME="imp"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1><A HREF="log031.htm" TARGET="_top">Implementation</A>:</H1></TD>
<TD>
<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
<UL>
<LI>evolution of LCF paradigm
<LI>notational genericism
<LI>power-kernel
</UL>
</B></FONT></TD><TR>
</TABLE>
</TD></TR></TABLE>
<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="30%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B><A HREF="../cs/cslog001.htm" TARGET="_top">LCF style</A></B>
proof by safe computation of theorems, evolved to emphasise <I>proof by evaluation</I> (as an alternative to tactical proof), context sensitive extendable proof automation, and a reflection principle.
</TD></TR>
</TABLE>
</TD><TD WIDTH="35%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>notational genericism:</B>
flexible graphical mix-fix notations definable for each new operator introduced.
Special support for semantic embedding of arbitrary formal notations, including language support for defining functions over abstract syntax datatypes and multilingual quotation conventions.
</TD></TR>
</TABLE>

</TD><TD WIDTH="35%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>power-kernel</B>
incorporates an effective functional programming language embedded into the HOST logic with evaluation of compiled object language function definitions invoked by the kernel during rewriting.
This includes arbitrary sized natural numbers and exact real arithmetic.
</TD></TR>
</TABLE>
</TD></TR></TABLE>

<P>

<CENTER>
<HR WIDTH=70%>
&copy;
<A HREF="../rbj.htm" TARGET="_top"><IMG SRC="../../rbjgifs/rbjin1.gif" ALT=RBJ ALIGN=ABSMIDDLE BORDER=0></A>
created 1998/01/02 modified 1999/7/19
</CENTER></BODY></HTML>