<HTML>
<HEAD><TITLE>Formalization</TITLE>
</HEAD>
<BODY BGCOLOR="C0E0E0" LINK="#404080" VLINK="000000">
<A HREF="jrh0108.htm#end"><IMG SRC="../../rbjgifs/left.gif" ALT=left BORDER=0 ALIGN=LEFT></A>
<A HREF="jrh0100.htm"><IMG SRC="../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A NAME="start"></A>
<CENTER><H2>Formalization</H2></CENTER>
<P>
 <P>
<A NAME="par91"></A>
There is no reason to be dogmatic about what is the 'natural' formalization of
informal (or preformal) notions. We do not claim that reductionism always
reflects the most interesting aspects of mathematics --- in fact as Mac Lane
has remarked, it can give a rather one-sided view of mathematical activity ---
but this is no more a problem than the fact that formal grammar rules do not
contribute to poetry. And we should certainly avoid regarding the
implementability of mathematical concepts as sets, say, as constituting some
kind of ontological discovery --- this view is rightly parodied by
<A HREF="jrh01b.htm#benacerraf"><EM>[benacerraf]</EM></A>. Rather, it's an interesting and surprising <EM> practical</EM>
discovery about the flexibility of set theory, to be compared with Gentzen's
discoveries about the flexibility of a simple inferential apparatus. (At the
same time the reduction is not without philosophical significance: in
particular the consistency of practically all of mathematics can be reduced to
the problem of whether ZF set theory is consistent, so our foundational
concerns tend to come home to roost in set theory.)
<P>
<A NAME="par92"></A>
With these disclaimers in mind, let's look now at a few examples of how the
basic concepts of formal systems can be used to define other notions. We'll
arrange these in order of the amount of light they throw on the informal
concept (in our opinion).
<P>
<A NAME="par93"></A>
<OL>
<P>
<A NAME="par94"></A>
<LI> Kuratowski showed that ordered pairs could be defined by (x,y) =
{x,{x,y}} (a more complicated alternative was earlier proposed by
<A HREF="jrh01b.htm#wiener-pair"><EM>[wiener-pair]</EM></A>). However it seems that this tells us nothing new about
ordered pairs, except for pathological theorems which we don't want anyway.
Indeed in stratified set theories like Quine's NFU <A HREF="jrh01b.htm#holmes-naive"><EM>[holmes-naive]</EM></A> and work
in coinductive definitions <A HREF="jrh01b.htm#paulson-coalgebra"><EM>[paulson-coalgebra]</EM></A>, another definition is
normally used.
<P>
<A NAME="par95"></A>
<LI> von Neumann's definition of the ordinals is often used to identify the
natural numbers with the set \omega of finite ordinals. This means that 0 =
<IMG SRC="../../rbjgifs/emptyset.gif" ALT=emptyset BORDER=0>, 1 = {0}, 2 = {0, 1} etc. Although this is also quite arcane
and ad hoc (do we really want 0 <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> 1?) it does have the benefit of
streamlining and simplifying a lot of theorems about natural numbers and
integrating them with their counterparts for ordinals and cardinals. Indeed
<A HREF="jrh01b.htm#halmos-ba"><EM>[halmos-ba]</EM></A> finds the use of 2 as a canonical 2-element set
sufficiently convenient to remark on it.
<P>
<A NAME="par96"></A>
<LI> We identify sequences indexed by the natural numbers, as used for example
in real analysis, with functions out of <B>N</B>. It's quite conceivable that one
could work with sequences without making explicitly the realization that the
two concepts are identical. However it seems there are no reasons for forcing a
distinction, so here the formalization is a unifying and simplifying force. In
fact, this observation seems first to have appeared with Peano's '<EM>
Formulaire</EM>', so it provides a concrete example of a mathematical development
being stimulated by a programme of formalization.
<P>
<A NAME="par97"></A>
<LI> Variable binding constructs (extensional ones anyway), such as summation,
integration and differentiation, can all be regarded as a higher order operator
applied to a lambda-term. That is, <IMG SRC="../../rbjgifs/csigma.gif" ALT=csigma><SUB>i=1</SUB><SUP>10</SUP> i is 'really'
SUM(1,10,<IMG SRC="../../rbjgifs/lambda.gif" ALT=lambda BORDER=0>i<FONT SIZE=5>.</FONT> i) while the derivative notation d/(dx) x<SUP>2</SUP> is
really DIFF(x,<IMG SRC="../../rbjgifs/lambda.gif" ALT=lambda BORDER=0>x<FONT SIZE=5>.</FONT> x<SUP>2</SUP>). This really can be valuable, confronting us with
awkward constructs where the everyday notation confuses free and bound
variables or a function with its value. For example, in the example above of
Leibniz notation for differentiation, x has both free and bound occurrences.
(It's precisely analogous to <IMG SRC="../../rbjgifs/integral.gif" ALT=integral BORDER=0><SUB>0</SUB><SUP>x</SUP> 2 x   dx, except that here the
standard notation separates the two instances.) The breakdown to a lambda-term
has helped to make this explicit. Though the Leibniz notation is familiar, it
can be awkward and is often abandoned in advanced or multivariate work. Other
notations like f'(x) seem better, but can still lead to confusion; the author
has witnessed a heated debate on <B> sci.math</B> among good mathematicians over
whether f'(g(x)) denotes the derivative of f evaluated at g(x) (this view
seems most popular) or the derivative of f o g evaluated at x ('the
prime notation (f') is a shorthand notation for [the] derivative of a
univariate function with respect to the free variable.')
<P>
<A NAME="par98"></A>
</OL>
<P>
<A NAME="par99"></A>
<A NAME="end"></A>
<HR>
<CENTER>
<A HREF="jrh0108.htm#end"><IMG SRC="../../rbjgifs/left.gif" ALT=left BORDER=0 ALIGN=LEFT></A>
<A HREF="jrh0110.htm#start"><IMG SRC="../../rbjgifs/right.gif" ALT=right BORDER=0 ALIGN=RIGHT></A>
<A HREF="jrh0100.htm"><IMG SRC="../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT=home BORDER=0></A>
 <A HREF="http://www.abo.fi/~jharriso/">John Harrison</A>
 96/8/13; HTML by <A HREF="http://www.rbjones.com/rbjpub/rbj.htm"><IMG SRC=../../rbjgifs/rbjin1.gif BORDER=0 ALIGN=TOP></A> 96/8/16
</CENTER>
</BODY></HTML>
