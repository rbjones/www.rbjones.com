<HTML>
<HEAD><TITLE>Partial functions and undefined terms</TITLE>
</HEAD>
<BODY BGCOLOR="C0E0E0" LINK="#404080" VLINK="000000">
<A HREF="jrh0112.htm#end"><IMG SRC="../../rbjgifs/left.gif" ALT=left BORDER=0 ALIGN=LEFT></A>
<A HREF="jrh0100.htm"><IMG SRC="../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A NAME="start"></A>
<CENTER><H2>Partial functions and undefined terms</H2></CENTER>
<P>
 <P>
<A NAME="par137"></A>
In informal mathematics, our minds filter out (subconsciously?) troublesome
degenerate cases. However in a formal treatment we must address these matters.
One of the most interesting questions is: what does it mean to apply a function
f to a value x outside its domain? For example, what is 0<SUP>-1</SUP> in the
reals?
<P>
<A NAME="par138"></A>
There are numerous different approaches. The simplest is to regard f(x) for
x <IMG SRC="../../rbjgifs/notmemof.gif" ALT=notmemof> dom(f) as something arbitrary; in effect we are expanding the
domain of f but saying nothing about the values it takes there.
Alternatively, we can specify an explicit value for arguments outside the
domain; this approach can be exploited by choosing a particularly convenient
one. For example, if we decide 0<SUP>-1</SUP> = 0, we have lots of nice unconditional
theorems, like <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> <B>R</B><FONT SIZE=5>.</FONT> (x<SUP>-1</SUP>)<SUP>-1</SUP> = x, <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> <B>R</B><FONT SIZE=5>.</FONT>
-x<SUP>-1</SUP> = (-x)<SUP>-1</SUP>, <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x, y <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> <B>R</B><FONT SIZE=5>.</FONT> (x y)<SUP>-1</SUP> = x<SUP>-1</SUP> y<SUP>-1</SUP> and
<IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> <B>R</B><FONT SIZE=5>.</FONT> x<SUP>-1</SUP> <IMG SRC="../../rbjgifs/ge.gif" ALT=ge> 0 <IMG SRC="../../rbjgifs/equiv.gif" ALT=iff BORDER=0> x <IMG SRC="../../rbjgifs/ge.gif" ALT=ge> 0. However some may regard these
theorems as pathological, obscene or simply untrue. Actually even if an
arbitrary value is chosen, these freak theorems show up occasionally. If we
define, as one normally would, x / y = x y<SUP>-1</SUP>, then 0 / 0 = 0, because
whatever 0<SUP>-1</SUP> might be, it's some real number, and multiplying it by zero
gives zero! In an untyped system this problem happens less (in the example
given we wouldn't even know that 0<SUP>-1</SUP> <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> <B>R</B>), but does not disappear
completely.
<P>
<A NAME="par139"></A>
There is a more serious disadvantage of this scheme. (In constructive systems
there is yet another: membership of the domain may be undecidable, so the above
solution simply isn't available.) In some mathematical contexts, writing down
f(x) = y is taken to include an implicit assertion that x <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> dom(f). For
example, when we write:
<P>
<A NAME="par140"></A>
 <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x<FONT SIZE=5>.</FONT> d/(dx) sin(x) = cos(x) 
<P>
<A NAME="par141"></A>
 we take this to include an assertion that sin is in fact
differentiable everywhere. But if the differentiation operator is total, it
will yield a value, regardless of whether the function is actually
differentiable at the relevant point. It might accidentally happen that the
above equation were true even if the function weren't differentiable! Hence an
equation like the above contains less information than one would intuitively
expect. This situation becomes even more serious when such constructs are
nested, e.g. in differential equations. They need to be accompanied by a long
string of differentiability assumptions, which in informal usage are understood
implicitly. Again, this is less of a problem in set theory; one might for
example adopt the convention of extending partial functions X <IMG SRC="../../rbjgifs/func1.gif" ALT=fun BORDER=0> Y to total
functions X <IMG SRC="../../rbjgifs/func1.gif" ALT=fun BORDER=0> Y <IMG SRC="../../rbjgifs/scup.gif" ALT=scup BORDER=0> Y, using the value Y to denote undefinedness.
<P>
<A NAME="par142"></A>
What are the alternatives? If we have a typed logic, then we can simply make
f(x) a typing error when x <IMG SRC="../../rbjgifs/notmemof.gif" ALT=notmemof> dom(f); that is, the term is not
syntactically well formed. This avoids the problems above, but it might mean
that in certain situations in analysis, the types become complicated, since
they need to excise all the singularities. It also makes it difficult to use
constructs which are permissive of point singularities (for example, it often
makes sense to integrate such functions). Moreover, the truth of certain
theorems such as <IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> <B>R</B><FONT SIZE=5>.</FONT> tan(x) = 0 <IMG SRC="../../rbjgifs/implies.gif" ALT=implies BORDER=0> <IMG SRC="../../rbjgifs/exists.gif" ALT=exists BORDER=0>n <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> <B>Z</B><FONT SIZE=5>.</FONT> x = n <IMG SRC="../../rbjgifs/pi.gif" ALT=pi>
depend on quite small details of how the typechecking and basic logic interact.
<P>
<A NAME="par143"></A>
The most sophisticated alternative of all is to have a special logic which
allows certain terms to be undefined, as in the IMPS system <A HREF="jrh01b.htm#farmer-imps"><EM>[farmer-imps]</EM></A>.
This is more or less the same (there are some differences in detail) as taking
an extra 'undefined' element on top of a conventional logic, so the result of a
function application may be this special element.<A HREF="jrh01f.htm#38"><SUP>38</SUP></A> The undefined value
propagates up through terms, so a term with an undefined subterm is itself
undefined. In IMPS, predicates involving an undefined argument become <EM>
false</EM>. For example, a = b means 'a and b are both defined and are
equal'. One might question these choices, but since a definedness operator is
provided, one can invent one's own bespoke notion of equality. In particular,
IMPS supports 'quasi-equality', where a = b means 'either a and b are
both undefined, or are both defined and equal'. In some parts of mathematics,
this is probably the usual convention, but it has some surprising consequences,
e.g. the logical equivalence s = t <IMG SRC="../../rbjgifs/equiv.gif" ALT=iff BORDER=0> s - t = 0 is false for quasi-equality
for certain terms s and t. One could even imagine circumstances in which
<IMG SRC="../../rbjgifs/forall.gif" ALT=forall BORDER=0>x <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> <B>R</B><FONT SIZE=5>.</FONT> (x<SUP>2</SUP> - 1) / (x - 1) = x + 1 was desired behaviour (wherever
the two sides are both defined, they are equal). Actually,
<A HREF="jrh01b.htm#freyd-allegories"><EM>[freyd-allegories]</EM></A> use a special asymmetric 'Venturi tube' equality
meaning 'if the left is defined then so is the right and they are equal'.
<P>
<A NAME="par144"></A>
We spoke above of the informal convention in mathematics. It seems that many
authors are actually doing something like defining the equality predicate
contextually. This seems surprising when equality is considered such a basic
thing, but the conclusion is hard to avoid when one sees phrases like 'if y
is the unique value with (x,y) <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> f, we write f(x) = y'. This isn't
specific to a foundational discussion of function application; many analysis
texts do similar things for the limiting operation, for example. In fact it's
rather common to see mathematics books make 'conditional' definitions --- 'if
x is ..., then we define f(x) = E[x]' rather than just 'we define f(x)
= E[x]' --- again, there is probably a wish to have certain contextual
information carried around with the definition. Set theory texts are
occasionally more precise, e.g. they may say 'f(x) is the (unique) y such
that (x,y) <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> f'. One formalization of this, made explicit by
<A HREF="jrh01b.htm#rosser-ml"><EM>[rosser-ml]</EM></A>, is as a descriptor term <IMG SRC="../../rbjgifs/iota.gif" ALT=iota BORDER=0>y<FONT SIZE=5>.</FONT> (x,y) <IMG SRC="../../rbjgifs/memberof.gif" ALT=memberof BORDER=0> f, but,
depending on the precise semantics of the descriptor and the logic, this can
mean different things.
<P>
<A NAME="par145"></A>
It is important not only that a convention for handling partial functions
should have attractive mathematical features, but also that it should remain
intuitive. Users must be aware, for example, that 0/0 = 0, or that s = t
may hold even if both s and t are undefined. If there are arcane features
hidden inside the logic, these can be damaging to the fancied clarity of formal
mathematics. As <A HREF="jrh01b.htm#arthan-undefinedness"><EM>[arthan-undefinedness]</EM></A> remarks 'all but the most expert
readers will be ill-served by formal expositions which make use of devious
tricks'. For this reason, we do not find very elaborate schemes for dealing
with partial functions, such as the use of a 3-valued logic, so attractive.
Arthan goes further, claiming that that 'in an ideal world, the subtleties of
different treatments of undefinedness should not be a central concern for
people writing specifications. In our experience, most real-life specifications
that do make essential use of undefined terms are just wrong --- they do not
say what their author intended.' Though this is based on experience of computer
system specification rather than pure mathematics, it may still hold true
there.
<P>
<A NAME="par146"></A>
<A NAME="end"></A>
<HR>
<CENTER>
<A HREF="jrh0112.htm#end"><IMG SRC="../../rbjgifs/left.gif" ALT=left BORDER=0 ALIGN=LEFT></A>
<A HREF="jrh0114.htm#start"><IMG SRC="../../rbjgifs/right.gif" ALT=right BORDER=0 ALIGN=RIGHT></A>
<A HREF="jrh0100.htm"><IMG SRC="../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT=home BORDER=0></A>
 <A HREF="http://www.abo.fi/~jharriso/">John Harrison</A>
 1996/8/13; HTML by <A HREF="http://www.rbjones.com/rbjpub/rbj.htm"><IMG SRC=../../rbjgifs/rbjin1.gif BORDER=0 ALIGN=TOP></A> 1996/8/16
</CENTER>
</BODY></HTML>
