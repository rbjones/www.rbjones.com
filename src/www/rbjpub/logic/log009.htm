<HTML>
<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../prof/p1sty.txt" TITLE="Resource">
<TITLE>Proof and Computation</TITLE>
<META name="description" content="A number of connections between logical proof and computation.">
<META name="keywords" content="RbJ LogiC ProoF ComputeR">
</HEAD>
<BODY CLASS=con>
<A HREF="index.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0 ALIGN=LEFT></A>
<CENTER><H1>Proof and Computation</H1>
<P>
<TABLE CELLPADDING=3 BORDER CLASS=con>
<TR VALIGN=TOP>
<TD WIDTH=50%>
<CENTER><B>Solving Problems is Hard</B></CENTER>
<FONT SIZE=2>.. so we may need to use algorithms which are powerful, even if not wholly reliable.
Perhaps even neural nets or other AI techniques.
This is OK if ..
</FONT>
<CENTER><B>Checking Solutions is Easy</B></CENTER>
<FONT SIZE=2>.. if reliable algorithms suffice to check a solution, so that any mistakes can be weeded out.
This gives us a route to combining..
</FONT>
<CENTER><B>Power and Assurance</B></CENTER>
<FONT SIZE=2>.. wherever we have an <A HREF="../philos/glossary/e.htm#Effective">effective</A> decision procedure for the adequacy of solutions.<BR>
Formal logical systems provide a framework within which powerful techniques can reliably be applied.
They permit advanced and possibly unreliable problem solving techniques to be safely applied.
</FONT>
<HR>
<CENTER><B>Logic for Problem Solving</B></CENTER>
<FONT SIZE=2>
When problems are formally described in first order logic, powerful general proof techniques such as <I>resolution</I> may be used to obtain solutions.
An attempt to prove the existence of a solution proceeds by attempting to derive a contradiction from the denial that a solution exists.
If successful a solution to the problem can be extracted from the proof.
<P>
Though such general proof techniques are limited in their value and must in practice be supplemented by a range of more specific techniques, the integration of problem solving with proof methods can still be sustained.
</FONT>
</TD>
<TD>
<CENTER><B><A HREF="../cs/cslog001.htm">The LCF Paradigm</A></B></CENTER>
<FONT SIZE=2>
Where machines are involved in proof the LCF paradigm is valuable.
This provides a method for implementing proof checking which supports flexible proof search programming<P>
In the LCF paradigm proofs are not textual structures terminating in the proven theorem, they are computations which yield the theorem.
The course of the computation is constrained in ways which closely relate to admissible inferences in the logic so that any computation will yield only theorems however exotic the algorithms employed.
</FONT>
<HR>
<CENTER><B>Programs from Proofs</B></CENTER>
<FONT SIZE=2>
Constructive logical systems, which are particularly aligned to computation, provide a framework in which proof of the consistency of a specification yields a program meeting the specification.
</FONT>
<HR>
<CENTER><B>Logic Programming</B></CENTER><BR>
<FONT SIZE=2>
Though general proof search methods can be used for problem solving they prove to be too inefficient for most problems.
By restricting the problem statement to first order <I>horn clauses</I> it is possible to control the search path of the theorem prover and improve efficiency.
By developing languages in a rather pragmatic way from this starting point, logic programming languages were devised which permitted a more or less logical description of a problem to guide the search for solutions.
</FONT>
</TD>
</TR>
</TABLE>
<P>
<P><P>
<HR WIDTH=70%>
<CENTER>
<A HREF="index.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT="HOME" BORDER=0></A>
&copy; <A HREF="../rbj.htm"><IMG SRC="../../rbjgifs/rbjin1.gif" ALT="RBJ" ALIGN=absmiddle BORDER=0></A>
created 1996/8/22 modified 1996/12/23
</CENTER>
</BODY>
</HTML>





