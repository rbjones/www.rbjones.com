<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../prof/p1sty.txt" TITLE="Factasia">
<TITLE>The Type-Free Lambda Calculus</TITLE>
</HEAD>
<BODY CLASS=con>
<A TARGET="_top" HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT=UP ALIGN=LEFT BORDER=0></A>
<A TARGET="_top" HREF="cl001.htm"><IMG SRC="../../../rbjgifs/lskicube.gif" ALT="Lambda-SKI cube" BORDER=0 ALIGN=RIGHT></A>
<CENTER>
<H1>Type-Free Lambda Calculi (<IMG SRC="../../../rbjgifs/lambdal.gif" ALT=Lambda ALIGN=BOTTOM=0>c)</H1>

<H2>The Type-Free Lambda Calculus</H2>
</CENTER>
The type-free lambda calculus is a calculus employing a notation with just two primitive constructions, function application and
functional abstraction.
The semantics of the notation are determined by the process of substitution whereby the value of an
argument to a function is substituted for occurrences of a place holder (known as a bound variable) in
the body of the defining expression for the function, yielding an expression denoting the value of the 
function at the point denoted by the argument.
<P>
In this notation function application is written as juxtaposition, with the function on the left and the value to which it is applied on the right.
No brackets are necessary unless the argument is an expression.
<P>
Functional abstraction is written using the special character 
"<IMG SRC="../../../rbjgifs/lambda.gif" ALT="lambda">" as follows.
<P>
The function whose value at <EM>x</EM> can be obtained by evaluating the expression <EM>E x</EM>
 (in which occurrences of <EM>x</EM> are to be understood as placeholders for the value of the argument
at which the value of the function is being determined) is written:
<P><CENTER><IMG SRC="../../../rbjgifs/lambda.gif" ALT="lambda">x.Ex</CENTER>
<P>
The character <IMG SRC="../../../rbjgifs/lambda.gif" ALT="lambda"> serves to introduce the abstraction, and the following
variable is then a binding occurrence of that variable.
Occurrences of that variable within the body of the abstraction are then bound to the binding occurrence
(unless they fall inside the scope of another abstraction contained in the body of the first).
<P>
The pure lambda calculus was introduced by Church to study the solvability of problems in number theory.
The widely accepted thesis that effective procedures over the natural numbers are just those which can be
described in the pure lamdba calculus is known as "Church's Thesis".
<P>
The pure Lambda Calculus may be though of as an elaboration of <A HREF="cl006.htm">Pure Combinatory Logic</A>.
It may be further modified either by introducing a simple type system, yielding a <A HREF="cl011.htm">Pure Typed Lambda Calculus</A>, or by
introducing logical constants such as quantification, giving <A HREF="cl009.htm">untyped</A> or <A HREF="cl013.htm">typed lambda logics</A>.
<HR>
<CENTER>
<A TARGET="_top" HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A TARGET="_top" HREF="../../index.htm"><IMG SRC="../../../rbjgifs/home.gif" ALT=home BORDER=0></A>
&copy; <A TARGET="_top" HREF="../../rbj.htm">
<IMG SRC="../../../rbjgifs/rbjin1.gif" ALT=RBJ ALIGN=absmiddle BORDER=0></A>
created 1995/12/9 modified 1999/6/1
</CENTER>
</BODY>





