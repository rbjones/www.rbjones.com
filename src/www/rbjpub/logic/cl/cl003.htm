<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../prof/p1sty.txt" TITLE="Factasia">
<TITLE>The Axes of the Lambda-SKI Cube</TITLE></HEAD>
<BODY CLASS=con>
<A TARGET="_top" HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT=UP ALIGN=LEFT BORDER=0></A>
<CENTER>
<H1>The <A TARGET="_top" HREF="cl001.htm"><IMG SRC="../../../rbjgifs/lskicube.gif" ALT="Lambda-SKI" BORDER=0 ALIGN=MIDDLE></A> Axes</H1>

<TABLE BORDER CELLPADDING=10 CLASS=co2>
<TR>
<TH>&nbsp;</TH>
<TH><FONT SIZE=3>Face Without</FONT></TH>
<TH><FONT SIZE=4>Axis</FONT></TH>
<TH><FONT SIZE=3>Face With</FONT></TH>
<TH>&nbsp;</TH>
</TR>
<TR>
<TH>&nbsp;</TH>
<TH>SKI</TH>
<TH><FONT SIZE=5><A HREF="#vb">Variable Binding</A></FONT></TH>
<TH>Lambda</TH>
<TH><IMG SRC="../../../rbjgifs/lambdab.gif" ALT=lambda BORDER=0></TH>
</TR>
<TR>
<TH>&nbsp;</TH>
<TH>Un-Typed</TH>
<TH><FONT SIZE=5><A HREF="#types">Types</A></FONT></TH>
<TH>Typed</TH>
<TH>T</TH>
</TR>
<TR>
<TH>c</TH>
<TH>Calculi</TH>
<TH><FONT SIZE=5><A HREF="#quant">Quantification</A></FONT></TH>
<TH>Logics</TH>
<TH>L</TH>
</TR>
</TABLE>
</CENTER>
<P>
Three three axes of the Lambda-SKI cube correspond to three independent ways in which pure combinatory logic can be extended.
Names associated with these axes provide a systematic naming convention for the eight types of logical system which are obtained by the various combinations of these extensions.
<P>
<A NAME="vb"></A>
<H3>Variable Binding</H3>
Possibly the least significant extension from a theoretical standpoint is the addition of lambda abstraction, though this is very important for pragmatic reasons.
This extension permits a function to be defined using an expression for the value of the function in which occurrences of a chosen variable are used to mark places in the expression which are to be replaced when the function is evaluation by the value of the argument to the function.
An abstraction of this kind is written down using a lambda sign followed by the name of the variable which will be used for the argument, a full stop and then the expression for the function value.
<P>
e.g., the square function might be written as the lambda abstraction:
<BR>
<CENTER><IMG SRC="../../../rbjgifs/lambda.gif" ALT=lambda BORDER=0>x. x*x</CENTER>
<P>
<A NAME="types"></A>
<H3>Types</H3>
A very signficant kind of extension is the addition of a type system.
A type system has advantages both for making the lambda calculus into a practical programming language and also for making it into a consistent logical system, though it is not essential for either of these purposes.
There are very many different types systems which may be used, of which the simplest is probably the one used by Church in his <A HREF="cl013.htm">Simple Theory of Types</A> <EM><A TARGET="_top" HREF="../../philos/bibliog/c.htm#Church40">[Church40]</A></EM>.

<P>
<A NAME="quant"></A>
<H3>Quantification</H3>
Pure combinatory logic is at bottom just an extremely simple programming language.
Adding lambda abstraction makes it no more expressive, adding a simple type system actually reduces what you can do with it!
If you want to use this as the basis for a logic, or for the foundations of mathematics, you need quantification (or something else which would permit quantifiers to be defined, e.g. equality).
The final axis of extension is the addition of some such constant, the effect of which is to transform a <I>calculus</I> (programming language) into a <I>logic</I>.
This must be done with some care, since the semantics of such extensions is tricky, and if you pick some logical rules without getting the semantics right you are likely to end up with an inconsistent logic, which is not a lot of use (though they do occasionally have some applications).

The simplest way to do this safely is again, <A HREF="cl013.htm">Church's STT</A>.
Church did the type system for the lambda calculus and added equality as a new primitive, obtaining an elegant higher order logic which is in widespread use to this day.
You don't need to have lambda abstraction to make a logic from combinatory logic using an equality primitive, but its easier that way, and you don't even need a type system, but that's even harder.



<HR>
<CENTER>
<A TARGET="_top" HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A TARGET="_top" HREF="../../index.htm"><IMG SRC="../../../rbjgifs/home.gif" ALT=home BORDER=0></A>
&copy; <A TARGET="_top" HREF="../../rbj.htm">
<IMG SRC="../../../rbjgifs/rbjin1.gif" ALT=RBJ ALIGN=absmiddle BORDER=0></A>
created 1995/11/27 modified 1999/9/19
</CENTER>
</BODY>


