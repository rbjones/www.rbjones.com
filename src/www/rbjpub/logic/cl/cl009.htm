<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../prof/p1sty.txt" TITLE="Factasia">
<TITLE>Type-free lambda logics (lL)</TITLE>
</HEAD>
<BODY CLASS=con>
<A TARGET="_top" HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT=UP ALIGN=LEFT BORDER=0></A>
<A TARGET="_top" HREF="cl001.htm"><IMG SRC="../../../rbjgifs/lskicube.gif" ALT="Lambda-SKI cube" BORDER=0 ALIGN=RIGHT></A>
<CENTER>
<H1>Type-free lambda logics (<IMG SRC="../../../rbjgifs/lambdal.gif" ALT=Lambda ALIGN=BOTTOM=0>L)</H1>

<H2>Type-free lambda logics (<IMG SRC="../../../rbjgifs/lambdal.gif" ALT=Lambda ALIGN=BOTTOM=0>L)</H2>
</CENTER>

I don't know that these have ever been studied.
I think its just a historical accident that the people who were interested in type-free systems worked with combinators
rather than lambda abstraction.
<P>
However, if you want one of these then you could get one by adding lambda abstraction to one of the 
<A HREF="cl008.htm">type free combinatory logics</A>.
Some care would be needed to ensure that this is just a mere notational extension or inconsistency might result. 
<P>
An alternative that I have given some attention to is a classical type free theory of functions including lambda abstraction which is
modelled on the kinds of function which appear in first order set theory.
In such a system the constraint on abstraction in set theory which is reflected in the principle of separation would impose a constraint on the domains
over which the function could be defined.
<HR>
<CENTER>
<A TARGET="_top" HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A TARGET="_top" HREF="../../index.htm"><IMG SRC="../../../rbjgifs/home.gif" ALT=home BORDER=0></A>
&copy; <A TARGET="_top" HREF="../../rbj.htm">
<IMG SRC="../../../rbjgifs/rbjin1.gif" ALT=RBJ ALIGN=absmiddle BORDER=0></A>
created 1995/12/10 modified 1995/12/10
</CENTER>
</BODY>


