<HTML>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../prof/p1sty.txt" TITLE="Factasia">
<HEAD><TITLE>MainFrame: Pure Functions</TITLE>
<META name="description" contents="An account of the theory of Pure Functions.">
<META name="keywords" contents="RbJ FactasiA PurE FunctioN SeT TheorY">
</HEAD>
<BODY CLASS=con>
<CENTER><H1>Pure Functions</H1></CENTER>

<A NAME="overview"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H2>Overview:</H2>
</TD>
<TD>
<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
The theory of Pure Functions is an alternative to the theory of sets as a logical foundation for mathematics in which the elements of the universe of mathematics are <EM>functions</EM> rather than <EM>sets</EM>.
</B></FONT></TD></TR>
</TABLE>
</TD></TR></TABLE>
<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="50%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><A HREF="#introduction"><B>introduction</B></A></CENTER>
<FONT SIZE=2>
Ontological experiments in Higher Order Set theory.
</FONT>
</TD></TR>
<TR VALIGN=TOP><TD>
<CENTER><A HREF="#objectives"><B>objectives</B></A></CENTER>
<FONT SIZE=2>
To make a theory of functions which is a close as possible in spirit to Zermelo Fraenkel set theory.
</FONT>
</TD></TR>
</TABLE>

</TD><TD WIDTH="50%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><A HREF="#methods"><B>methods</B></A></CENTER>
<FONT SIZE=2>
Define the universe of pure functions as a new defined type in higher order set theory.
The theorems proven about the primitive and defined constants associated with the type correspond to axioms suitable for a first order axiomatisation.
</FONT>
</TD></TR>
<TR VALIGN=TOP><TD>
<CENTER><A HREF="#"><B></B></A></CENTER>
<FONT SIZE=2>
</FONT>
</TD></TR>
</TABLE>

</TD></TR></TABLE>


<P>
<A NAME="introduction"></A>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H2>introduction:</H2>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
Ontological experiments in Higher Order Set theory.
</B></FONT>
</TD></TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B>Ontological Relativity</B></CENTER>
<FONT SIZE=2>
The first purpose of this discussion of pure functions is simply to illustrate the arbitrary nature of ontology.
It is to show how mathematics might just as well be based on a theory of functions as upon a theory of sets.
</FONT>
</TD></TR>
<TR VALIGN=TOP><TD>
<CENTER><B>congenial HOST</B></CENTER>
<FONT SIZE=2>
Another purpose is to illustrate that for this kind of foundational discussion, Higher Order Set Theory is a congenial environment, and to illustrate one way of proceeding about such an exercise.
</FONT>
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B>Larger Goals</B></CENTER>
<FONT SIZE=2>
The motivation for my first attempt at the theory of pure functions (way back in 1988) concerned the semantics of specification languages.
The aim was to come up with semantic domains for well-founded strong languages which included local polymorphic function definitions and elementary modularity.
I was looking for a simple foundation system which could be used to define the semantics and derive the proof rules for specification languages such as VDM-SL and Z, and I had a prejudice in favour of high proof theoretic strength.
Pure functions were the first step in a three stage construction which I then envisaged but did not complete.
</FONT>
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B>What are Pure Functions?</B></CENTER>
<FONT SIZE=2>
The usual set theories (such as <A TARGET="_top" HREF="../philos/glossary/z.htm#ZFC">ZFC</A>) are <I>pure</I> in the sense that the domain of discourse contains nothing but sets.
An elaborate hierarchy of sets is built out of the empty set and nothing else.
Pure sets are sets which, at bottom, contain nothing (possibly lots of times).
Pure functions are analogous.
The empty function is the only function whose domain and range are the empty set, and in set theory is identical with the empty set.
If instead of starting with the empty set and making all the sets we possibly can, we start in the same place, but make only functions, then we get the pure (well-founded) functions.
</FONT>
</TD></TR>
</TABLE>

</TD></TR></TABLE>


<P>
<A NAME="objectives"></A>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H2>objectives:</H2>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
To make a theory of functions which is a close as possible in spirit to Zermelo Fraenkel set theory.
</B></FONT>
</TD></TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B>Proof Theoretic Strength</B></CENTER>
<FONT SIZE=2>
I'm looking for a theory of functions which has the same proof theoretic strength as ZFC.
<P>
Since we start by constructing a model rather than a logic it may not be immediately obvious what this means.
What it means is that the model should be sufficiently rich to establish the consistency of an axiomatisation of the theory which has high proof theoretic strength.
<P>
The way this is achieved is to ensure that there are enough pure functions that the universe of pure functions contains a straightforward model for ZFC.
</FONT>
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B>Uniformity of Ontology</B></CENTER>
<FONT SIZE=2>
This isn't targeted as a first order theory, though a first order presentation should be straightforward.
Just as in set theory, there should be no type system, and only one kind of object in the universe.
In this case they are functions.
</FONT>
</TD></TR>
<TR VALIGN=TOP><TD>
<CENTER><B>Extensional</B></CENTER>
<FONT SIZE=2>
I was looking for a completely unqualified extensionality to make it look very close to set theory.
So two functions must be equal <B>iff</B> they yield the same value absolutely everywhere.
</FONT>
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B>Well Founded</B></CENTER>
<FONT SIZE=2>
Just like classical set theory, I was looking for a well-founded set theory.
This means that no function could be in its own domain or range.
</FONT>
</TD></TR>
<TR VALIGN=TOP><TD>
<CENTER><B>Limited Abstraction</B></CENTER>
<FONT SIZE=2>
Well-foundedness is closely related to limitations on functional abstraction which are analogous to the use of separation instead of unrestricted comprehension in ZFC.
This is done in a very similar way to set theory.
In a functional abstraction the domain of the required function must be specified (as the range of some already available function).
</FONT>
</TD></TR>
</TABLE>

</TD></TR></TABLE>

<P>
<A NAME="methods"></A>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H2>methods:</H2>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
Define the universe of pure functions as a new defined type in higher order set theory.
The theorems proven about the primitive and defined constants associated with the type correspond to axioms suitable for a first order axiomatisation.
</B></FONT>
</TD></TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="50%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B>1. Environment</B></CENTER><FONT SIZE=2>
I addressed this problem using a formal and machine supported logical system strong enough to allow the definition of semantic domains similar to the universe of ZFC and of appropriate operations and relations over these domains.
The logic and tool of choice originally was HOL, Higher Order Logic and the LCF style proof system for that logic developed at the Computer Labs of the University of Cambridge.
Before starting on the theory of pure functions some extensions were made to this to give a system which I then called HOL-ZFC.
</FONT>
</TD></TR>
<TR VALIGN=TOP><TD>
<CENTER><B>3. Type Definition</B></CENTER>
<FONT SIZE=2>
The next step is to define the type of pure functions.
This can now be done by strictly conservative methods using the type definition facilities in HOL.
These facilities permit the introduction of a new type which is isomorphic (equipollent, of the same size) as a subset (not necessarily proper) of some already available type.
For the pure functions this is a proper subset of the type SET.
</FONT>
</TD></TR>
</TABLE>

</TD><TD WIDTH="50%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B>2. Extensions</B></CENTER>
<FONT SIZE=2>
For cosmetic reasons I first wrapped pre and post processors round the proof tool to allow me to use an extended character set including the usual logical and set theoretic symbols.
Then I introduced by non-conservative axiomatic extension a new type SET which was similar to the universe of ZFC.
This gives a logical system which is strictly stronger than ZFC (since it could be used to prove the consistency of ZFC).
With this extension in place it is possible to work with models of strong logical systems without further non-conservative extensions.
The axiomatisation was quite straightforward so I won't show it here (though I may get round to it eventually).
</FONT>
</TD></TR>
</TABLE>

</TD></TR></TABLE>

<P>
<A NAME=""></A>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H2>:</H2>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
</B></FONT>
</TD></TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B></B></CENTER>
<FONT SIZE=2>
</FONT>
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B></B></CENTER>
<FONT SIZE=2>
</FONT>
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<CENTER><B></B></CENTER>
<FONT SIZE=2>
</FONT>
</TD></TR>
</TABLE>

</TD></TR></TABLE>


<H1>Pure Functions</H1>
 <P>

<P>
The theory is to be substantially in the spirit of classical set theory.
Apart from the change from sets to functions, and those things which naturally flow from that change, the important features of set theory are to be preserved.
<P>
Among the features of ZFC considered important in this context are:
<UL>
<LI><EM>Proof Theoretic Strength</EM><BR>
Since we are constructing a model rather than a logic it may not be immediately obvious what this means.
What it means is that the model should be sufficiently rich to establish the consistency of an axiomatisation of the theory which has high proof theoretic strength.
Specifically, an axiomatisation which has the same proof theoretic strength as ZFC, and which could therefore not be proven consistent in ZFC.
<LI><EM>Uniformity of Ontology</EM><BR>
 No type system. only one kind of object
<LI><EM>The principle of extensionality</EM><BR>
No very strong reason for requiring this.
It is suggested by the analogy with ZFC, but in practice the principle works out less smoothly with functions than it does with sets.
</UL>
<P>
The theory of pure functions is constructed by filtering out from the universe of ZFC those sets which represent functions.
Sufficient proof theoretic strength is provided for by observing that the set of functions selected, though a strict subset of the sets of ZFC, contain functions which can be used to represent every set in ZFC.
This makes possible the reconstruction of ZFC within the theory of pure functions, which guarantees that the theory can be given the same proof theoretic strength as ZFC
One way of doing this is to use the pure identity functions as representatives of the sets over which they are defined, these being defined in terms of pure functions in a manner analogous to the definition of the pure functions in terms of sets.
(This gives us two one-one surjections from some sets to all pure functions, and from some pure functions to all sets.) 
<P>
Uniformity of the domain is ensured by the use of a single appropriate selection criteria which characterises the sets which will represent the pure functions.
<P>
Since the intended theory is <EM>type free</EM> the principle of extensionality will be formulated by quantification over all elements of the universe.
The limitation of size principle which limits the functions representable as graphs in ZFC, will limit the functions available in this theory of pure functions.
Consequently, the proper domains of these functions will be sets in ZFC, and some arbitrary choice will have to be made in any model of the theory about the values obtained when a function is applied outside its domain.
<P>
In my original approach to this theory the choice of the value obtained by application of a function outside its domain was difficult, and resulted in complications to the definition of pure function and in the resulting theory.
This was because I only considered choice of a particular value for this purpose, and whatever value is chosen cannot then be in the range of any pure function without causing a problem with the principle of extensionality.
<P>
When a came back to give an account of the theory a better alternative immediately occurred to me, which is to return a value which cannot possibly be in the graph of the function, e.g. the function itself.
Though this means that this "undefined" value varies from function to function, but does not interfere with the principle of extensionality, and never appears in the range of a function.
The theory developed in this way promises to be significantly simpler than the original, so its easier (and certainly more interesting) to develop and present the new version than give an account of the old.
Note that the detail of what the undefined value is will not appear in the theory.
<P>
This is a sketch, I hope to do at least the formal definitions, and maybe prove the required results with either ProofPower or Isabelle.
Lets suppose we have a formalisation of set theory in higher order logic, which we call HOL-ZFC.
Now we define a new type in HOL-ZFC.
<P>
The first-thought defining property for the type is that it is isomorphic to the set of many one relations in the type SET of ZFC in HOL.
This doesn't yield a <EM>pure</EM> theory of functions, because these functions are defined over and yield values which need not themselves be functions.
<P>
The collections of <EM>pure</EM> functions must be defined inductively.
We define a property of properties of sets called <EM>pf hereditary</EM>.
<P>
A property is <EM>pf hereditary</EM> if:
<OL>
<LI>It is true of the empty set.
<LI>Whenever it is true of all the elements in the field of a function it is true of that function.
</OL>
A pure function in ZFC is any set which possesses all pf hereditary properties.
<P>
This definition is analogous to defining the natural numbers as the smallest set containing zero and closed under the successor function.
The pure functions are the smallest collection which contains the empty set and is closed under the operation of forming new functions whose domain and range contain only values already known to be pure functions.
<P>
Having defined this set of SETs in ZFC in HOL we next define a number of operators over this collection which will server similar roles in our theory to the operators available in SET.
<P>
The following operators, definable as functions in HOL, are introduced:
<UL>
<LI>Equality :SET -> SET -> SET
<LI>Application :SET -> SET -> SET
<LI>The Domain Relation :SET -> SET -> BOOL
<LI>The Empty Pure Function :SET
<LI>Functional Abstraction : SET -> (SET -> SET) -> SET
<LI>The Maplet constructor : SET -> SET -> SET
<LI>Functional Override : SET -> SET -> SET
<LI>Dependent function space constructor : SET -> SET
</UL>

The details of these operators are described below.

<H3>Equality</H3>

This is the primitive HOL polymorphic equality function specialised to type SET.
The definition chosen will suffice to establish the required extensionality result for this equality relation.

<H3>Application</H3>

Application is defined in the usual way for a function and an argument in the domain of the function.
For an argument outside the domain we can <I>think</I> of application as returning the function.
Since the function could not possibly be in its own range (all these pure functions are well-founded), this ensures that the law of extensionality is true even when quantifying over the entire universe rather than just the domain of the function.
However, its best not to use this coding trick in the theory, so to find out whether something is in the domain we have the <I>Domain</I> relation, and function application is defined loosely, so you don't actually know what the result of applying a function outside its domain is.

<H3>The Empty Pure Function</H3>
This is the same as the empty SET in ZFC in HOL, thought of as a the pure function whose domain is the empty set.

<H3>Functional Abstraction</H3>

This function takes a function in HOL defined over type SET together with a SET which determines the domain of the required function and returns the SET which is the graph of the restriction of the HOL function to the designated domain.
The restriction is required by the classical principle of "limitation of size".
In the absence of this principle the function spaces cannot be the full classical function space.
<P>
The SET used to designate the domain is cannot be the set of elements in the domain of the required function, since this will not be a pure function.
Any pure function whose domain is the required set will server to determine the domain.

<H3>The Maplet Constructor</H3>

This gives the unit set of an ordered pair.
Given two pure functions this will yield a pure function with a singleton domain.

<H3>Functional Override</H3>
This is the functional override operator defined over functions represented as graphs in SET.
This operator is closed over pure functions.

<H3>Dependent Function Space Constructor</H3>

This operator and its associated axiom serves the roles performed in SET by the power set operator and the axiom of replacement.
<P>
The operator takes a pure function which is regarded as defining an indexed collection of sets.
The sets are the domains of the pure functions in the range of the function.
<P>
The result of the operator is the set of dependent functions having the same domain as the operand function, and mapping each point in that domain onto a value in the set determined by the value of the operand function at that same point.


<P>
<CENTER>
<HR WIDTH=70%>
<A TARGET="_top" HREF="index.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A TARGET="_top" HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT="HOME" BORDER=0></A>
&copy;
<A HREF="../rbj.htm" TARGET="_top"><IMG SRC="../../rbjgifs/rbjin1.gif" ALT=RBJ ALIGN=ABSMIDDLE BORDER=0></A>
last modified 1998/12/12
</CENTER></BODY></HTML>