<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../prof/p1sty.txt" TITLE="Content">
<TITLE>Formal Specification Languages</TITLE>
</HEAD>
<BODY BGCOLOR="#ddeeee" CLASS=co2>
<META name="description" content="A brief overview of the various kinds of formal specification language.">
<META name="keywords" content="RbJ">
<A HREF="csfm01.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<p align=right><a href="http://webhostingrating.com/libs/specification-languages-ua">Belorussian translation</a></p>
<CENTER>
<H1>Formal Specification Languages</H1>
</CENTER>

<P>

<CENTER><TABLE CELLPADDING=5><TR><TD>
<H4><A HREF="#MO">Model Oriented</A></H4></TD><TD>
<H4><A HREF="#A">Algebraic</A></H4></TD><TD>
<H4><A HREF="#PM">Process Model</A></H4></TD><TD>
<H4><A HREF="#L">Logical</A></H4></TD><TD>
<H4><A HREF="#C">Constructive</A></H4></TD><TD>
<H4><A HREF="#BS">Broad Spectrum</A></H4></TD></TR></TABLE>
</CENTER>

<A NAME="MO">
<CENTER><H3>Model Oriented</H3></CENTER></A>
<P>
"model oriented" specification languages are so called because they are support the specification of systems by construction of a mathematical model of the system.
In a sense <EM>any</EM> formal specification can be thought of as providing a mathematical model of a system so it may be helpful to expand on this.
<P>
It is characteristic of <EM>model oriented</EM> languages that the model of the system is given by describing the <I>state</I> of the system, together with a number of operations over that state.
An operation is a function which maps a value of the state together with values of parameters to the operation onto a new state value.
<P>
A model oriented language is typically used by describing in detail specific mathematical objects (e.g. data structures or functions) which are structurally similar to the required computer software.
It is then permitted to transform these mathematical objects, during the design and implementation of the system, in ways which preserve the essential features of the requirements as initially specified.
<P>
Probably the most widely known model oriented specification languages are <A HREF="http://en.wikipedia.org/wiki/Vienna_Development_Method">VDM-SL</A>, the specification language associated with VDM, the Vienna Development Method, and <A HREF="csfm03.htm">the Z specification language</A>.
<P>
<A NAME="A">
<CENTER><H4>Algebraic</H4></CENTER></A>
<P>
Algebraic specification languages are used to specify information systems using methods derived from abstract algebra or category theory.
<P>
Abstract algebra is the mathematical study of certain kinds or aspects of structure abstracted away from other features of the objects under study.
Algebraic methods are beneficial in permitting key features of information systems to be described without prejudicing questions which are intended to be settled later in the development process (implementation detail).
<P>
The best known algebraic specification language is probably <A HREF="http://en.wikipedia.org/wiki/OBJ_%28programming_language%29">OBJ</A>, which is related to <EM>clear</EM>.
<EM>Clear</EM> is itself a system for specification "in the large" by combining together specifications in ways which are independent of the "institution" in which the specifications are expressed.
i.e., clear is an abstract system for <EM>modular</EM> specification generic over a wide range of specification notations.
<P>
<A NAME="PM">
<CENTER><H4>Process Model</H4></CENTER></A>
<P>
Specification languages for describing concurrent systems are sometimes implicitly based on a specific (though perhaps implicit) model for concurrency.
In these languages expressions denote processes, and are built up from elementary expressions which describe particularly simple processes by operations which combine processes to yield new potentially more complex processes.
<P>
Possibly the best know process modelling languages are <A HREF="http://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP</A> and <A HREF="http://en.wikipedia.org/wiki/Calculus_of_communicating_systems">CCS</A>.
<P>
<A NAME="L">
<CENTER><H4>Logical</H4></CENTER></A>
<P>
This class of specification languages consists of those languages which are closest to (or identical with) logical languages not originally intended for specifying informations systems.
The use of these languages reflects the belief sometimes held that formal specification is special only in its use of <EM>formal</EM> notations, not in the kinds of logic or mathematics which it employs.
<P>
A distinction may be drawn between two traditions within this group.
In some cases it is advocated that a formal logic be used for specification in a fairly unrestrained axiomatic manner.
In other cases it is advocated that specifications be undertaken using only <EM>conservative</EM> extensions over some sufficiently rich formal mathematical baseline.
In the second tradition the kind of logical system adopted as baseline will need to amount to a logical <A HREF="../logic/log005.htm"><EM>foundation for mathematics</EM></A>, in the former case the weaker constraints on the means of specification means that a logical system which falls short of providing a foundation for mathematics may be acceptable.
<P>
Of the former kind, first order logic is the classic example.
Of the latter, first order set theory has sometimes been adopted, but more frequently some kind of logical type theory (e.g. <A HREF="http://www.comlab.ox.ac.uk/archive/formal-methods/hol.html">HOL</A>) or typed set theory.
Many different type theories have been used (see <A HREF="../logic/cl/tlc004.htm">PTS</A> for a systematic account of many logical type theories), often <A HREF="#C"><I>constructive</I></A> (e.g. <A HREF="http://www.cs.cornell.edu/Info/Projects/NuPrl/nuprl.html">NUPRL</A>) rather than classical.
<P>
The <A HREF="csfm03.htm">the Z specification language</A> is at bottom a typed set theory which could therefore have been positioned as a foundational specification language were it not that its use has predominantly been advocated in a free-wheeling axiomatic manner and no rules are enunciated to permit specification by conservative extension.
The support for Z provided by the <A HREF="http://www.lemma-one.com/">Lemma 1</A> proof tool <A HREF="http://www.lemma-one.com/ProofPower/index/index.html">ProofPower</A> includes the necessary features to support its use for specification and proof using only conservative extension.
A seemingly free-wheeling axiomatic style implemented in a strictly conservative way is also supported by <A HREF="http://www.cl.cam.ac.uk/research/hvg/HOL/">HOL</A>.
<P>
<A NAME="C">
<CENTER><H4>Constructive</H4></CENTER></A>
<P>
Theoretical work on constructive logical systems, usually type theories (see <A HREF="../logic/cl/tlc004.htm">PTS</A>), has become widespread since Martin L&ouml;f claimed special relevance to computing for his Intuitionistic Type Theories.
<P>
Constructive mathematics is particularly concerned with realisability (in an informal as well as a technical sense).
Whereas in classical mathematics the notion of a <I>function</I> is very broad, and includes many functions which could never be evaluated by a computer, constructive mathematics concerns itself only with functions which are <A HREF="../philos/glossary/e.htm">effective</A>ly computable.
<P>
In constructive logics the ways of demonstrating the existence of functions satisfying some property (which may be thought of as the specification of a program) are restricted.
The result of this restriction is that from any proof of the consistency of a specification, a value satisfying the specification can be extracted.
In principle therefore the specify/implement/verify post hoc verification paradigm may be modified when using a constructive logic to specify/verify-consistency/extract-implementation, where the last stage is completely automatic.
This principle has been demonstrated by proof tools for constructive logics, for example <A HREF="http://www.cs.cornell.edu/Info/Projects/NuPrl/nuprl.html">the NUPRL system</A>.
<P>
<A NAME="BS">
<CENTER><H4>Broad Spectrum</H4></CENTER></A>
<P>
The label <I>broad spectrum</I> is used to describe specification languages which are suitable for use at all stages in the development of an information system from conception through specification, design, implementation and verification.
<P>
It is used here to cover not only that kind of language, but also languages which are hybrid relative to the above classification for any reason at all.
Two examples of such hybrid notations are RSL the specification language associated with the <A HREF="http://spd-web.terma.com/Projects/RAISE/">RAISE</A> development methods, and <A HREF="http://wwwtios.cs.utwente.nl/lotos/">LOTOS</A>, a specification notation intended originally for the specification of communication protocols.
RAISE synthesises the model oriented, process model and algebraic paradigms, while LOTOS combines process model and algebraic methods.
<P>
<HR WIDTH=70%>
<CENTER>
<A HREF="csfm01.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT="HOME" BORDER=0></A>
&copy; <A HREF="../rbj.htm"><IMG SRC="../../rbjgifs/rbjin1.gif" ALT="RBJ" ALIGN=absmiddle BORDER=0></A>
created 1995-05-24 modified 2011-08-06
</CENTER>
</BODY>
</HTML>
