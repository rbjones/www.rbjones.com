<HTML><HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../prof/p1sty.txt" TITLE="Factasia">
<TITLE>The LCF Paradigm</TITLE>
<META name="description" content="">
<META name="keywords" content="RbJ">
</HEAD>
<BODY CLASS=con>
<A HREF="index.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0 ALIGN=LEFT></A>
<CENTER>
<H1>The LCF Paradigm</H1>
<P>

<TABLE BORDER CELLPADDING=3 CLASS=con><TR VALIGN=TOP><TD WIDTH=50%>

<B>1. What is the LCF paradigm?</B>
<FONT SIZE=2>
The LCF paradigm is a method of implementing a tool to support formal reasoning in some logic.
<P>
LCF stands both for <I>Logic for Computable Functions</I> (which is the name of a logic devised by Dana Scott) and for a proof tool implemented originally at the University of Edinburgh to support reasoning in the logic.
<P>
There may be differing views about which features of that tool are essential ingredients of the paradigm, here I take a minimal position so that the LCF paradigm encompasses a broad collection of possible tools.
</FONT>
<HR>
<B>4. Functional MetaLanguage</B>
<FONT SIZE=2>For the original LCF implementation a new functional language (called ML) was designed and implemented to serve as a metalanguage.
ML was used to implement the abstract data type which guarantees the correctness of the theorems computed.
ML was also made available both to the LCF system developers and to end-users to program techniques for automatically constructing proofs.
</FONT>
<HR>
<B>6. Use of Higher Order Functions</B>
<FONT SIZE=2>
The LCF paradigm encourages the use of higher level functions in a wide variety of ways creating a proof development environment with powerful abstract high level functionality which can be adapted to the needs of various problems or domains.
<P>
<I>Tactics</I> and <I>derived inference rules</I> are among the simpler kinds of higher order function employed.
</FONT>
</TD><TD>
<B>2. Proof as Computation</B>
<FONT SIZE=2>The first element of the LCF paradigm is to treat a proof as a computation which computes new theorems from previously established theorems.
The key feature of the paradigm is that it permits a powerful programming language to be used in programming inferences in a way which ensures that the inferences thus programmed are guaranteed sound.
The technique for guaranteeing soundness is the use of an abstract data type.
</FONT>
<HR>
<B>3. Logic as Abstract DataType</B>
<FONT SIZE=2>A Logic is represented in the LCF paradigm by an abstract data type of theorems.
The abstract data type has constructors for the type of theorems which correspond precisely to the axioms and inference rules in the chosen logic, with the effect that every computation of a value of type theorem corresponds to a proof of a result in the logic.
</FONT>
<HR>
<B>5. Tactics</B>
<FONT SIZE=2>
The original LCF system and its descendents also have <I>Tactics</I>, which are one way of organising the search for a proof of some conjecture.
<P>
Tactics accept a conjecture (called a "goal") and compute a number of (hopefully) simpler conjectures from which the original conjecture can be derived, together with a function which is capable of performing the required derivation if supplied with theorems corresponding to the conjectures.
<P>
Tactics are just one of many ways in which the search for proofs in an LCF-like proof system can be organised and may not be considered an essential feature of <I>the LCF paradigm</I>.
</FONT>
</FONT></TD></TR></TABLE>

<HR WIDTH=70%>
<CENTER>
<A HREF="index.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT="HOME" BORDER=0></A>
&copy; <A HREF="../rbj.htm"><IMG SRC="../../rbjgifs/rbjin1.gif" ALT="RBJ" ALIGN=absmiddle BORDER=0></A>
created 1996/8/26 modified 1996/8/26
</CENTER>
</BODY>



