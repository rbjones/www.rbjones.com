<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../prof/p1sty.txt" TITLE="Resource">
<TITLE>Not-So-Good Candidates</TITLE>
<META name="description" content="">
<META name="keywords" content="RbJ">
</HEAD>
<BODY BACKGROUND="../../rbjgifs/backpi.gif">
<A HREF="cs001.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0 ALIGN=LEFT></A>
<CENTER><H1>Not-So-Good Candidates</H1></CENTER>
<P>
<A NAME="Problem">

First we start with non-candidates just to put on record the obvious reasons why they don't solve the problem.
<P>
<CENTER>
<H4><A HREF="#Can1">Rationals</A></H4>
<H4><A HREF="#Can2">Arbitrary Precision Floating Point</A></H4>
<H4><A HREF="#Can3">Automatic Reals</H4></A>
<H4><A HREF="#Can4">N-ary expansions for some N&gt;1</A></H4>
<H4><A HREF="#Can5">Continued Fractions</A></H4>
</CENTER>

<CENTER><A NAME="Can1"><H3>Rationals</H3></CENTER>

Technically these fail because they are a proper subset of the computable numbers.
In practice a perfect implementation of rationals still suffers from the same problems which caused the real numbers to be introduced, known since the times of the Greeks.
Some problems that we want answers to just don't have rational solutions, so we end up having to accept approximations.

<A NAME="Can2">
<CENTER><H3>Arbitrary Precision Floating Point</H3></CENTER>

There's some scope for variation in what you mean by this.
In the best case that I can imagine you are still just representing the rational numbers so the previous observations apply.


<A NAME="Can3">
<CENTER><H3>Automatic Reals</H3></CENTER>

This is an interesting middle ground which is the subject of some research.
I think they are something like the set of reals whose n-ary expansions are computable by some device less powerful than a turing machine.
John Doner has some Web material on them to which I will place a reference if I can find it again!
<P>
As I understand it, again these systems fail simply because they don't represent all the computable reals.
A consequence of this is that they don't have very good closure properties.

<A NAME="Can4">
<CENTER><H3>Computable N-ary expansions for some N>1</H3></CENTER>

This is the first candidate for which the set of reals represented is the computable reals.
Unfortunately it is also the first to demonstrate that meeting that criterion is not sufficient. 

<A NAME="Can5">
<CENTER><H3>Computable Continued Fractions</H3></CENTER>

These are neat.
See Knuth, Volume 2, page 316 [1st Edition; s.4.5.3, p. 339 in 2nd Edition], and <A HREF="ftp://ftp.netcom.com/pub/hb/hbaker/hakmem/cf.html">Gosper</A>.
<P>
They not only represent all the real numbers, they do so uniquely (if you are using <I>regular</I> continued fractions).
Furthermore, the rationals are represented by finite continued fractions.
<P>
Unfortunately the combination of these two features is sufficient to guarantee that addition is not effective over this representation
(a general algorithm for adding arbitrary regular continued fractions will end up looping <I>without producing any more terms</I> if you apply it to two irrational numbers whose sum is rational).
<P>
Possibly you might get an admissible representation by using irregular continued fractions, but then you lose the uniqueness.
<P>
You can still use them as a <I>part</I> of an admissible representation (e.g. as a way of representing rationals in a convergent sequence).
Or you can use them and put up with occasional non-termination.
But anyway, they are <I>inadmissible</I>.
<P>
<A NAME="Can6"> </A>
<CENTER><H3>N-ary Expansion Representations</H3></CENTER>
<P>
Minsky defines a computable real as one whose decimal (or n-ary) expansion can be "generated sequentially by a turing machine".
This definition is suggestive of a representation of computable reals as algorithms for generating positional expansions.
Unfortunately, under this representation, the operation of addition is not itself computable.
<P>
Consider two algorithms as follows.
The first computes the decimal expansion "0.1111111..." and the second the expansion "0.8888...".
An algorithm to compute the expansion of the sum of these numbers cannot determine the expansion by evaluating the algorithms which generate the two operands, since this would never yield sufficient information to determine the first digit of the result.
It would therefore have to inspect the algorithms and discover in some way the result.
In doing so it would effectively be computing whether two algorithms were computing the same number.
From such an algorithm a solution to the halting problem could be constructed.
<P>
<CENTER><H3>Continued Fractions</H3></CENTER>
<P>
For an explanation of continued fractions and an extended account of their merits see:
<A HREF=" ftp://ftp.netcom.com/pub/hb/hbaker/hakmem/cf.html">
Henry Baker's Continued Fractions Page</A>
<P>
Now I have a problem with continued fractions.
Basically, they don't work.
Addition is not effective over reals represented as continued fractions.
Now Veuillemin acknowledges this in his paper, and then he goes right ahead and uses them anyway.
So he must have some trick up his sleeve, and I havn't yet looked close enough to figure out what it is.
(e.g. he <EM>could</EM> use a continued fraction plus an error bound, or a pair of continued fractions, not that I think either of these is a good idea, but they probably could be made to work.)
<P>
<HR WIDTH=70%>
<CENTER>
<A HREF="cs001.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT="HOME" BORDER=0></A>
&copy; <A HREF="../rbj.htm"><IMG SRC="../../rbjgifs/rbjin1.gif" ALT="RBJ" ALIGN=absmiddle BORDER=0></A>
created 1995/9/3 modified 1998/7/17
</CENTER>
</BODY>

