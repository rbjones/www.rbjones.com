<HTML>
<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../prof/p1sty.txt" TITLE="Factasia">
<TITLE>Combinatorial Explosion - How to Beat it</TITLE>
<META name="description" content="">
<META name="keywords" content="RbJ">
</HEAD>
<BODY CLASS=con>
<A HREF="index.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0 ALIGN=LEFT></A>
<CENTER><H1>Combinatorial Explosion</H1>
<H2>- How to Beat it</H2>
there are no easy solutions - it takes intelligence
<P>
<TABLE CELLPADDING=5 CLASS=con><TR VALIGN=TOP><TD WIDTH=50%>
<B>1. Embed a clean programming language into your logic.</B>
<FONT SIZE=2>This is so that the system can reason about the algorithms it uses.
See <A HREF="../logic/log011.htm">HOST</A> for a sketch of the kind of logic you need for this.</FONT>
<P>
<B>2. Incorporate a <I>Reflection Principle</I> into your logic.</B>
<FONT SIZE=2>So if we know an algorithm is reliable we can use it to solve a problem and use the result in a proof.</FONT>
<P>
</FONT></TD><TD WIDTH=50%>
<B>3. Code up a wide range of specific problem solving techniques</B>
<FONT SIZE=2>Most people learn methods out of books or off other people.
They don't work them out for themselves.</FONT>
<P>
<B>4. Use Axioms or other techniques to defer proof obligations</B>
<FONT SIZE=2>Functionality first, assurance next.
When the machine gets good, it can come back and do the proofs itself.</FONT>
</FONT></TD></TR></TABLE>
<TABLE CLASS=con>
<TR><TD WIDTH=80%><FONT SIZE=2>Steps 1-4 enable problem solving using efficient algorithms within the context of a general proof based problem solving framework.
It uses human coding ingenuity to get near optimal solutions in all those specific problem domains where techniques are known.
Before the system can do this kind of thing for itself it must learn programming methods and theory.
Coding up methods is the most efficient analogue to learning by rote.
So we teach it programming the same way in the first instance.
</FONT></TD></TR>
</TABLE>
<TABLE CELLPADDING=5 CLASS=con>
<TR VALIGN=TOP><TD WIDTH=50%>
<B>5. Code up programming methods.</B>
<FONT SIZE=2>There is an enormous amount of this to be done before the system has any chance of being intelligent.
To get over the hump we have to make this pay as it goes, so this system has to be a productive software development envuronment long before it ever gets to be an <I>artificial intelligence</I>.
</FONT></TD><TD WIDTH=50%>
<B>6. Eventually the system is able to code up its own efficient problem solving methods.</B><FONT SIZE=2>
And sometime after that it really gets to be intelligent, in this narrow logical domain: logic, mathematics, computer programming.
Then, like us humans, it will sometimes be able to solve novel problems despite combinatorial explosion.
</FONT></TD></TR></TABLE>
<P>
<HR WIDTH=70%>
<CENTER>
<A HREF="index.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT="HOME" BORDER=0></A>
&copy; <A HREF="../rbj.htm"><IMG SRC="../../rbjgifs/rbjin1.gif" ALT="RBJ" ALIGN=absmiddle BORDER=0></A>
created 1996/12/24 modified 1996/12/24
</CENTER>
</BODY>
</HTML>





