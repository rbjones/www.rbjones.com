<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../prof/p1sty.txt" TITLE="Resource">
<TITLE>Good Candidates for Computable Reals</TITLE>
<META name="description" content="">
<META name="keywords" content="RbJ">
</HEAD>
<BODY BACKGROUND="../../rbjgifs/backpi.gif">
<A HREF="cs004.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0 ALIGN=LEFT></A>
<CENTER><H1>Good Candidates for Computable Reals</H1></CENTER>
<P>

<CENTER>
<H4><A HREF="#Can6">Rational Sequences</A></H4>
<H4><A HREF="#Can8">Bishop's Representation</A></H4>
<H4><A HREF="#Can7">Wide N-ary Expansions</A></H4>
<H4><A HREF="#Can9">Wiedmer's Representation</A></H4>
<H4><A HREF="#Can10">Sequences of finite B-adic numbers</A></H4>
<H4><A HREF="#Can11">Linear Fractional Transformations (M&ouml;bius transformations)</A></H4>
<H4><A HREF="#Can12">My Preferred Options</A></H4>
</CENTER>


<A NAME="Can6"> </A>
<CENTER><H3>Computable Rational Sequences with Predetermined or Computable Error Bounds</H3></CENTER>

This is the first adequate representation against the proposed criteria.
It also probably contains the easiest and best documented cases.
For example, the representation adopted by Bishop85.
<P>
The only problem with representations of this kind is one of efficiency.
If a sequence of rationals is used, then at each point in the sequence we are replicating information already delivered, together with another small piece of information narrowing the bound of error.
<P>
It is plausible that a representation more like a positional notation, or a continued fraction notation will yeild more efficient implementations because they do not reiterate information already delivered earlier in the sequence.
<P>
<A NAME="Can8"> </A>
<CENTER><H3>Bishops Representation</H3></CENTER>
<P>
An alternative representation may be found by reference to the literature on constructive analysis.
For example <A HREF="../philos/bibliog/b.htm#Bishop85">Bishop85</A> talks of a real number as a <EM>regular</EM> sequence of rationals 
A sequence is <EM>regular</EM> if the difference between the <EM>n</EM>th and <EM>m</EM>th elements in the sequence is not greater than (1/m+1/n).
Modifiying this to give computable reals as algorithms which generate regular sequences of rationals gives a representation over which addition is computable.
<P>
This representation is likely to be inefficient because of its slow rate of convergence.
<P>

<A NAME="Can7"> </A>
<CENTER><H3>Wide N-ary Expansions</H3></CENTER>

The problem with ordinary n-ary expansions is that there are some points which are not in the interior of a suitable nest of open sets in the topology induced by the representation.
This problem can be fixed simply by a representation in which positional notation for some base n>1 is used but in which <I>more than n</I> digits are available.
For example, a binary expansion in which all of the digits 0,1 and 2 are permitted.

<P>
Its a lot easier to come up with a representation for the computable reals than to come up with one that <I>works</I>.
<P>
For a representation of the computable reals to work <I>properly</I> its not sufficient for the representations of the computable reals to be computable.
All the operations which one would expect to be computable over the computable reals (which is probably the same as the constructive functions over constructive reals) must also be computable over the chosen representatives.
For a pretty complete picture of the ones which should be computable look at a text on constructive analysis, e.g. <A HREF="../philos/bibliog/b.htm#Bishop85">Bishop85</A>.
That happens to include things like addition, subtraction, multiplication, division (except by zero) and lots lots more.
And effective means that they never go into unproductive loops, not just infrequently.
Get your representation wrong and you algorithms will sulk indefinitely on some problems.
<P>
So you should ask yourself, first of all, when you are about to adopt a representation, whether addition is effective over the representatives.
And then go on to ask whether the other operations are.
<P>
This might seem a pretty obvious requirement, but neither the most obvious (n-ary positional expansions for some integer n>1), nor what appears to have recently been the most popular (continued fractions) ways of representing computable reals satisfy this criterion.
Both of these do provide computable representatives of all the computable reals, so they determine the right subset of the reals in a computable way.
However over neither of these representations is even the most elementary operation, addition, effective.
<P>
<A NAME="Can9"> </A>
<CENTER><H3>Wiedmer's Representation</H3></CENTER>
<P>
Signed decimal expansions.
This works.
It is a wide-10ary expansion.

<P>
<A NAME="Can10"> </A>
<CENTER><H3>Sequences of finite B-adic approximations</H3></CENTER>
This one has been discussed and implemented by <A HREF="http://pauillac.inria.fr/~menissier/">Val&eacute;rie M&eacute;nissier-Morain</A>.
It is a special case of representation by a convergent sequence of rationals.
The special features are:
<OL>
<LI>The denominators of the rationals are all positive integer powers of some base B.
<LI>The rate of convergence is fixed by the requirement that the nth B-adic in the sequence is within 1/(B<SUP>n</SUP>) of the real answer.
</OL>

<P>
<A NAME="Can11"> </A>
<CENTER><H3>Linear Fractional Transformations</H3></CENTER>
Aka M&ouml;bius transformations.
See <A HREF="http://www.cs.uni-sb.de/RW/users/heckmann/heckmann.html">Reinhold Heckman</A> or <A HREF="http://theory.doc.ic.ac.uk/~pjp/">Peter Potts</A>, or watch this space.

<P>
<A NAME="Can12"> </A>
<CENTER><H3>My Hunch</H3></CENTER>
<P>
What we need is a representation which makes the operations computable and efficient (insight!).
<P>
I have two preferences:
<OL>
<LI>
Floating point infinite positional expansions with signed digits using a very large base (e.g. 2<SUP>32</SUP>).
Because of the large granularity you need to have ways of putting together higher level operations (e.g. summing infinite sequences) which do not build on the primitive two-operand addition.
<A HREF="http://www.dimi.uniud.it/~pietro/">Pietro di Gianontonio</A> discusses large base representations and the resulting granularity problems, proposing a different approach to their resolution which I have not yet grasped.
<LI>
A signed n-ary expansion with a <EM>variable</EM> base (a power of two).
When you want another "digit" you say how much precision you are looking for, (number of bits) and you get back exactly what you asked for (plus a sign).
This is to get the advantages of computing with large chunks while avoiding the problems of large granularity.
<OL>
<P>
Here's the rationale.
<OL>
<LI>Its incremental
<LI>If you ask for a lot it will make effective use of the arithmetic hardware.
<LI>The precision demanded from subsidiary computations need not be more than necessary
</OL>
If in order to realise benefit (2) you chose a fixed very large base (say 2^64), then little benefit will accrue, since the precision required in the operands will grow just as rapidly (in terms of number of "digits") as if the base were small.
<P>
If the base is variable then where 32 bit precision is required it can be realised using the hardware, but the small increments in precision required for subsidiary computations to realise the required precision in the result are not exaggerated to negate the benefit of using the hardware.
<P>
However this is hard to make work.
<HR>
<CENTER>
<A HREF="cs004.htm"><IMG SRC="../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A HREF="../index.htm"><IMG SRC="../../rbjgifs/home.gif" ALT="HOME" BORDER=0></A>
&copy; <A HREF="../rbj.htm"><IMG SRC="../../rbjgifs/rbjin1.gif" ALT="RBJ" ALIGN=absmiddle BORDER=0></A>
created  1995/9/3 modified 1999/4/28
</CENTER>
</BODY>

