<HEAD>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../prof/p1sty.txt" TITLE="Factasia">
<TITLE>Fetzer's Folly</TITLE>
</HEAD>
<BODY CLASS=con2>
<A HREF="pcs000.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT=UP BORDER=0 ALIGN=LEFT></A>
<CENTER><H1>Fetzer's Folly</H1></CENTER>
Fetzer's achieved fame in the <EM>Formal Methods</EM> community by arguing that program verification is in principle impossible (<I><A HREF="../bibliog/f.htm#Fetzer88">[Fetzer88]</A></I>).
<P>
He stirred up a debate that lasted quite some time and involved many prominent Computer Scientists, however the essence of Fetzer's position, and an adequate refutation can be stated in very few words.
<P>
Fetzer's position was that to claim to have <EM>formally</EM> verified a computer program is to claim to have mathematically proven that a computer executing that program will always give correct results.
Since this is a claim about the contingent behaviour of physical objects, it is an elementary epistemological error to suppose such claims susceptible of logical or mathematical proof.
I believe that Fetzer also asserted that a computer program is a physical object, and that this may have been why he though a claim to verification must be contingent.
<P>
Fetzer was wrong in the most elementary way.
Computer scientists who talk about program verification are making no unconditional claim about the behaviour of physical machines.
(you could say that <EM>provided the computer conforms to its specification</EM> it will obtain the correct results when executing the program, but in fact no reference to computers is necessary or desirable).
<P>
Not only is Fetzer's position based on a misunderstanding of the language of computer science, it also reveals a gross underestimate of the philosophical sophistication of the average computer scientist.
<P>
I have myself participated in work related to program verification, and including hardware verification.
When I first became involved in hardware verification this area was not widely understood even by computer scientists familiar with the idea of program verification.
It was not uncommon for me to receive puzzled enquiries from people who understood how program verification might be possible but could not understand how hardware could be verified.
Computer Scientists are all too aware that computers, even when their design is without flaw, sometimes do not behave as they should.
<P>
On the question of whether a program is a physical object, the terms <EM>hardware</EM> and <EM>software</EM> dating from the earliest days of computing, testify to an awareness that the former but not the latter consists of physical objects.
<HR>
<CENTER>
<A HREF="pcs000.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT=up BORDER=0></A>
<A HREF="../../index.htm"><IMG SRC="../../../rbjgifs/home.gif" ALT=home BORDER=0></A>
&copy; <A HREF="../../rbj.htm">
<IMG SRC="../../../rbjgifs/rbjin1.gif" ALT=RBJ ALIGN=absmiddle BORDER=0></A>
created 1996/2/26 modified 1998/7/30
</CENTER>
</BODY>
