<HTML>
<HEAD>
<TITLE>Computing at Cambridge</TITLE>
</HEAD>

<BODY BGCOLOR="#e0e0f0">
<A HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT="UP" BORDER=0 ALIGN=LEFT></A>
<CENTER><H1>Computing at Cambridge</H1></CENTER>
<P>
The first computer to which I had reasonable access was the IBM 1130 installed in the Cambridge University Engineering Laboratories near the end of 1966.
<P>
It was pretty exiting to me at the time to be able to play with this machine.
Here are some reminiscences.
<P>
<CENTER>
<TABLE CELLPADDING=10>
<TR><TH><A HREF="#Determinants">Determinants</A></TH><TH><A HREF="#RedInk">Making Red Ink and Breaking the Machine</A></TH></TR>
<TR><TH><A HREF="#AI">Artificial Intelligence</A></TH><TH><A HREF="#Languages">Languages</A></TH></TR>
</TABLE>
</CENTER>
<P>
<CENTER><A NAME="Determinants"><H3>Determinants</H3></A></CENTER>
The first program I can remember anything about was a Fortran II program which read in a matrix of numbers and computed the determinant of the matrix.
The interesting bit was making it work for an arbitrary size of matrix.
<P>
I probably wouldn't remember it at all but I was pleased about how neat and short it was (dunno <I>how</I> short, less than a page) and I had this little exchange with Roland Backhouse in which he was determined it couldn't be done for arbitrary <I>n</I> and insisting on pouring over the code before he would believe it.
Backy was reading Maths and the mathematicians were lucky to get their hands on a mechanical calculator.
<P>
It was appallingly slow.
<P>
<CENTER><A NAME="RedInk"><H3>Making Red Ink and Breaking the Machine</H3></A></CENTER>
Undergraduates were only permitted to program in Fortran.
However, every now and then a postgrad might be seen doing specially clever things.
This even included making the golfball printer on the console print in red, which it never would for Fortran programs.
<P>
Somewhere along the track this came to be a secret ambition, making red ink.
<P>
I wrote a program (in Fortran of course) which accepted machine code programs in Hex and stored them in an array.
Having done this the program could be requested to enter the program, which it did by exploiting the lack of bound checking in Fortran and the lack of protection in the hardware.
It overwrote a jump in the executive, which Fortran programs passed through when they terminated, with a jump to the start of the program assembled in its array.
At the end of the program the jump would be reinstated and the program would resume the normal exit route.
<P>
With the benefit of this program I learned about how the operating system drove the peripherals and eventually made the red ink.
<P>
Some time after this feat the operating system was corrupted.
It lived on an 8Mb replaceble disc cartridge, but if you messed it up you had to reload the lot from paper tape, which was very time consuming.
I don't think anyone knew what had happened to mess it up, but it took eons to put right and my little Fortran hex assembler was the only thing around that looked suspicious enough to blame.
<P>
So I was asked not to use it again, but we were pretty close to the exams by that time so the action was pretty much over anyway.
<P>
<CENTER><A NAME="AI"><H3>Artificial Intelligence</H3></A></CENTER>
<P>
En route to the red ink I must have got a bit frustrated with waiting for access to the "flexowriters" which we used to punch our programs onto paper tape.
There weren't enough of them so they were more of a bottle neck than the computer.
<P>
So I wrote a program to enable the computer console to be used for editing paper tapes so that when the computer was idle but the flexowriters were in demand I could edit my programs on the computer.
(of course this all sounds pretty silly these days, but this was 30 years ago)
<P>
Due to a curiousity in Fortran the tapes coming out were longer than the ones going in.
And every time you edited them they came out longer still, even if you were only deleting stuff.
I think it was because spaces got changed into tabs on the way in and tabs were output as multiple spaces.
<P>
So I got to thinking about programs for eliminating the redundancy which this program injected, and this lead my into the first thoughts I can recall about Artificial Intelligence.
<P>
It ran like this.
<P>
A perfect program for removing redundancy from a certain class of inputs would translate a source which was not random into outputs which were.
Consequently, its inverse would translate random inputs into scripts in the rundundant input class.
<P>
So if you had a program which could take a sample of the class and then optimally compress you could feed it with good english and it would subsequently be able to generate good English from random inputs.
Taking it one step further, if one fed it English which was not just good, but <I>true</I>, then you should get an algorithm for generating true statements from random numbers.
<P>
Of course this doesn't get you very far, it just indicates that removing redundancy is an arbitrarily hard problem.
<P>
<CENTER><A NAME="Languages"><H3>Languages</H3></A></CENTER>
I must have been interested in languages, because I got to talking to Pete Flake about CAD software (electronic hardware simulation).
We were thinking of collaborating, and I would have done the analysis of the input data.
<P>
Maybe he wanted free format input and didn't know how to do it in Fortran.
This didn't get off the ground because we were getting too close to the end-of-year exams and that was the end of my stay at Cambridge.
Thirty years later we still talk about collaboration, but it hasn't happened yet.
<P>
My first job was at Nelson Research Labs working on compiler-compilers.
<P>
<CENTER>
<HR WIDTH=70%>
<A HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A HREF="../../index.htm"><IMG SRC="../../../rbjgifs/home.gif" ALT=HOME BORDER=0></A>
&copy; <A HREF="../../rbj.htm"><IMG SRC="../../../rbjgifs/rbjin1.gif" ALT=RBJ BORDER=0></A> created 96/12/7 modified 96/12/7
</CENTER>
</BODY></HTML>
