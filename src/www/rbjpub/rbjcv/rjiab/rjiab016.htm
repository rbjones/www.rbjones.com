<HTML>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../prof/p1sty.txt" TITLE="Content">
<HEAD><TITLE>MainFrame: Working with HOL</TITLE>
<META name="description" contents="An overview of the things I have done, am doing, and hope to do with Higher Order Logic.">
<META name="keywords" contents="RbJ FormaL MethoD LogiC ProoF HigheR OrdeR HOL">
</HEAD>
<BODY CLASS=con>
<CENTER>
<FONT COLOR=maroon><H1>Working with HOL</H1></FONT>
</CENTER>
<A NAME="over"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>Overview:</H1>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
I was first acquainted with Higher Order Logic and the HOL proof tool when I joined the ICL Defence Systems Formal Methods Group in January 1986.
Since then I have done a variety of small bits of work on or with HOL.
</B></FONT>
</TD></TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B><A HREF="#sec">security</A>:</B>
I have written security models and participated in the formal verification of secure systems using both <A TARGET="_top" HREF="../../philos/glossary/z.htm#Z">Z</A> and <A TARGET="_top" HREF="../../philos/glossary/h.htm#HOL">HOL</A>
</TD></TR>
<TR VALIGN=TOP><TD>
<B><A HREF="#hard">hardware verification</A>:</B> I lead the formal verification of the "One Way Regulator", a UKL6 certified commercial product.
</TD></TR>
<TR VALIGN=TOP><TD>
<B><A HREF="#fnd">foundations</A>:</B>
I did some work on alternatives to <A TARGET="_top" HREF="../../philos/glossary/z.htm#ZF">ZF</A>, using "ZF-HOL", an axiomatisation of <A TARGET="_top" HREF="../../philos/glossary/z.htm#ZFC">ZFC</A> in Classic HOL.</TD></TR></TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B><A HREF="#z">Z in HOL</A>:</B>
I was the prime mover in the ICL work exploiting HOL as a proof tool for Z, and designed the semantic embedding of Z into HOL used by ProofPower.</TD></TR>
<TR VALIGN=TOP><TD>
<B><A HREF="#pp">ProofPower</A>:</B>
I conceived and lead the "FST" project, a collaboration between ICL, PVL, Cambridge and Kent Universities under which ICL developed ProofPower, an implementation of HOL supporting proof in Z.
</TD></TR></TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B><A HREF="#now">now</A>:</B>
I'm looking at Richard Boulton's "Claret" with a view to doing some work on the semantics of Verilog and possibly other hardware description languages.
I'm also ruminating about how to implement <A TARGET="_top" HREF="../../logic/log034.htm">HOST</A>.
</TD></TR>
<TR VALIGN=TOP><TD>
<B><A HREF="#fut">future</A>:</B>
My fantasies about <A TARGET="_top" HREF="../../cs/ai013.htm">The Global SuperBrain</A> involve <A TARGET="_top" HREF="../../logic/log034.htm">Higher Order Set Theory</A> as a foundation.
This is my line on a future for HOL.
I'd also like to do a bit more on "<A HREF="#fnd">foundations</A>" with HOL.
</TD></TR></TABLE>

</TD></TR></TABLE>

<P>
<A NAME="sec"></A>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>Security:</H1>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
I have written security models and participated in the formal verification of secure systems using both Z and HOL.
</B></FONT>
</TD></TR></TABLE>

</TD></TR></TABLE>

<P>
<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>first model:</B>
in 1986 I wrote my first formal security model, for GCHQ, in <A HREF="../../philos/glossary/z.htm#z">Z</A> and transcribed it into HOL for proof work.
This was the start of our work on <A HREF="#z">Z in HOL</A>.
In 1987 <A HREF="http://www.fairbruk.demon.co.uk/">Kevin Blackburn</A> took over the detailed work both on the security proofs and support for Z in HOL, and we jointly wrote a paper (unpublished) entitled "Translating Z into HOL".</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>Relational Databases:</B>
I contributed to the early stages of a contract with RSRE concerning formal treatment of their secure relational database SWORD, by producing a formalisation of the security requirement, and identifying a way of structuring the formal semantics of the query language so that a security proof would be tractable.
Specifications in HOL, proofs completed (by Gill Prout and <A HREF="http://www.lemma-one.com">Rob Arthan</A>) using ProofPower.</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>OWR:</B>
I was the "architect" of the formal verification of the security of the One Way Regulator, and lead the formal methods team which did all the real work.
see <A HREF="#hard">hardware verification</A>.

</TD></TR></TABLE>

</TD></TR></TABLE>
<P>
<A NAME="hard"></A>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>Hardware Verification:</H1>
</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
I lead the formal verification of the "One Way Regulator", a UKL6 certified commercial product.
</B></FONT>
</TD></TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>methods:</B>
The OWR was specified in HOL with transcripts supplied in Z.
It was a hardware device, designed by ICL to meet the security requirement.
The design was formally proven against the security requirement using a specially modified version of Classic HOL.
This involved formal reasoning about information flow bandwidths.
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>modifying HOL:</B>
HOL was modified, to make it more secure, and to permit loose constant specifications.
"new_axiom" and "mk_thm" were hidden from users.
Loose specifications were enabled by permitting the deletion of definitions, using a definition using the choice function, deriving a theorem of the form  "<IMG SRC="../../../rbjgifs/exists.gif" ALT=exists ALIGN=ABSMIDDLE BORDER=0>x.P x <IMG SRC="../../../rbjgifs/turnstil.gif" ALT=turnstile ALIGN=ABSMIDDLE BORDER=0> P c" and then deleting the definition.
</TD></TR></TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>reals:</B>
We had a look at implementing reals in HOL (this was 1988), using represention of real numbers as open downward-closed cuts in pre-rationals represented as triples of natural numbers ((a,b,c) represents the rational ((a-b)/(c+1)).
This was pretty heavy going (no linear arithmetic).
Long before we had the reals we had a way of talking about bandwidth without them, so we had to give up that little project and get on with the real work.
</TD></TR>
</TABLE>

</TD></TR></TABLE>

<P>
<A NAME="fnd"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>Foundations:</H1></TD>
<TD>
<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
I did some research on alternatives to ZF, using "ZF-HOL", an axiomatisation of ZFC in Classic HOL.</B></FONT></TD></TR>
</TABLE>
</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="25%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>Motive:</B>
I was working on the VDM standard, and had this idea that specification languages should be as expressive as mathematical foundation systems, so I wanted to come up with a semantic foundation suitable for a VDM which met that criterion.
</TD></TR>
<TR VALIGN=TOP><TD>
<B>Criteria:</B>
So I wanted a foundation system which was (a) well founded (b) as rich as ZFC (c) based on functions not sets (d) polymorphic functions (e) supported modularity.
Also I wanted the theory of functions to be both pure and extensional.</TD></TR>

</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>Method:</B>
The idea is to start from a suitable semantic domain, define appropriate operators over the domain, establish by proof properties of these operators which would form the basis for the axiomatisation of the logic of the specification language.
To do this in HOL and end up with a specification language of the same strength as ZFC is not possible without first extending HOL, which can be done by introducing a new type which made into a model for ZFC by appropriate axioms.
HOL thus extended I called ZF-HOL.
Using this type as raw material the required semantic domains can be constructed.
</TD></TR>
</TABLE>

</TD><TD WIDTH="36%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B><A HREF="../../logic/inter013.htm">pure functions</A></B> are obtained by filtering the sets yeilding a collection of functions as large as the universe of ZFC.
</TD></TR>
<TR VALIGN=TOP><TD>
<B>polymorphic pure functions</B> are pure functions parameterised by assignments of values to type variables (the assignments also represented by pure functions).
</TD></TR>
<TR VALIGN=TOP><TD>
<B>structured polymorphic pure functions</B> are one step higher intended to support local definitions and modules.
</TD></TR>
<TR VALIGN=TOP><TD>
<B>pure categories</B> I also tried a foundation system in which everything is a category, just out of curiosity.
It didn't work, but one day I'd like another crack at it.
</TD></TR>
</TABLE>
</TD></TR></TABLE>

<P>
<A NAME="pp"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>ProofPower:</H1>

</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5>
<TR><TD><FONT SIZE=4><B>
I conceived and lead the "FST" project, a collaboration between ICL, PVL, Cambridge and Kent Universities under which ICL developed ProofPower, an implementation of HOL supporting proof in Z.
</B></FONT></TD></TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>purpose:</B> we wanted a good proof tool for formal methods work which had to be able to work with Z specifications.
It wasn't clear that Z would be tractible for proof, the proof rules were not understood.
So cutting our teeth on re-engineering HOL and doing the best achievable proof support for Z on that base seemed a good idea.
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>the project:</B> We put together a collaboration to bid for support from the DTI under its "IED" initiative.
The members in the end were ICL, Program Validation Limited, The University of Cambridge (foundational research under Martin Hyland) and the University of Kent (Keith Hanna and Veritas).
The project was called "Foundations and Tools for Formal Verification", and ICL's part of this project was the implementation of what was later called ProofPower, a re-engineered HOL.
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>results:</B> We re-implemented HOL twice (the first was a test run) and embedded the Z specification language into HOL.
The result was christened ProofPower, and became a commercial product (though that wasn't the original intention).
Later support for the DERA compliance notation was implemented, enabling verification of SPARK programs against Z specifications.
</TABLE>
</TD></TR></TABLE>
<P>
<A NAME="z"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>Z in HOL:</H1>

</TD><TD>

<TABLE BORDER=3 CLASS=con CELLPADDING=5>
<TR><TD><FONT SIZE=4><B>
I was the prime mover in the ICL work exploiting HOL as a proof tool for Z, and designed the semantic embedding of Z used by ProofPower.</B></FONT></TD></TR></TABLE>

</TD></TR></TABLE>

<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>first steps:</B> we started off in 1986 by manually transcribing Z specifications into HOL and gradually built up ad hoc methods and tools for working in this way.
This included libraries to support the kinds of data structures found in Z and to match the Z library, techniques for working with Z like schemas and axiomatic specifications in a rigorous and conservative way, and also tools which allowed HOL specs to <I>look</I> more like the Z specs they were based on (extended character set, and Z-like boxes).
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>the embedding:</B> in 1990, with a prototype ICL-HOL in the bag, I though about Z in HOL and figured out how to do a full and faithful embedding.
I specified the mapping in Z and a prototype was produced on the prototype ICL-HOL
The trickyest problems were probably the handling of bound variables (Z has some really exotic variable binding constructs), and the support of Z's novel set generic polymorphism.
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>implementation:</B> ProofPower Z was then implemented on the "product quality" implementation of ICL-HOL (later christened ProofPower).
The work on Z contributed to some of the novel features of ProofPower, for example, the multi-lingual quotation mechanisms, and the context sensitive proof automation which permitted features like "strip_tac" to change behaviour radically when reasoning in Z to the way it behaves for HOL (e.g. understanding schema conjunction as well as logical conjunction).
</TABLE>
</TD></TR></TABLE>


<P>

<A NAME="now"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>Now:</H1></TD>
<TD>
<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
I'm looking at Richard Boulton's "Claret" with a view to doing some work on the semantics of Verilog and possibly other hardware description languages.
I'm also ruminating about how to implement HOST.
</B></FONT></TD></TR>
</TABLE>
</TD></TR></TABLE>
<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>Claret:</B>
is a tool to support semantic embedding of languages into HOL.
It takes a file describing the syntax of the language are generates a parser, a pretty printer, parse tree datatypes in standard ML and in HOL.
Even if you don't want to do the embedding these can be handy for defining the semantics of the language or for prototype implementations.
</TD></TR></TABLE>
</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B><A HREF="../../logic/log034.htm" TARGET="_top">HOST</A>:</B>
is Higher Order Set Theory, (to be) implemented as an <A HREF="../../cs/cslog001.htm" TARGET="_top">LCF-like</A> proof system with the compiler built into the logical kernel, compiling executable function definitions to give fast evaluation during rewriting.
This means (in theory) that semantic embedding yields efficient simulators.
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>SML and Verilog:</B>
I need a semantics in HOL for a subset of SML to do an embedding which legitimises integration of an SML compiler into the HOST kernel.
The semantics of verilog is then a target application for the HOST system.
Embedding verilog (or some other Hardware Description Language) yeilds both a tool for reasoning about harware and an efficient simulator.
</TD></TR>
</TABLE>

</TD></TR></TABLE>
<P>
<A NAME="fut"></A>
<TABLE>
<TR VALIGN=TOP><TD WIDTH=200><H1>Future:</H1></TD>
<TD>
<TABLE BORDER=3 CLASS=con CELLPADDING=5 WIDTH="100%">
<TR><TD><FONT SIZE=4><B>
My fantasies about <A TARGET="_top" HREF="../../cs/ai013.htm">The Global SuperBrain</A> involve <A TARGET="_top" HREF="../../logic/log034.htm">Higher Order Set Theory</A> as a foundation.
This is my line on a future for HOL.
I'd also like to do a bit more on "<A HREF="#fnd">foundations</A>" with HOL.
</B></FONT></TD></TR>
</TABLE>
</TD></TR></TABLE>
<TABLE WIDTH="100%">
<TR VALIGN=TOP><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B><A TARGET="_top" HREF="../../cs/ai013.htm">the Global SuperBrain</A>:</B> under this extravagent rubrick I am thinking about how to do distributed logicist AI.
For this purpose I believe one needs a <I><A TARGET="_top" HREF="../../logic/log005.htm">foundation system</A></I> adequate for modern mathematics and know none which seems to me more practical than <A TARGET="_top" HREF="../../logic/log034.htm"><I>Higher Order Set Theory</I></A>.
</TD></TR></TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>the megakernel:</B>
to support the AI angle the LCF paradigm must be bludgeoned into delivering higher performance, particularly when evaluating functions defined in the foundational logic (or in languages embedded in that logic).
For this purpose I seek an embedding of a practical functional language into the logic, the compiler for which would then be integrated into the logical kernel.
</TD></TR>
</TABLE>

</TD><TD WIDTH="33%">

<TABLE CELLPADDING=5 WIDTH="100%" CLASS=co2>
<TR VALIGN=TOP><TD>
<B>other foundational work:</B> I would also like to have another crack at <A TARGET="_top" HREF="../../logic/inter013.htm"><I>the theory of pure functions</I></A> and a theory of pure categories, defined and explored using ZFC in HOL.
This is just entertainment, I don't expect it to be useful, so that means it may never happen (though that doesn't distinguish it from much around here!).
</TD></TR>
</TABLE>

</TD></TR></TABLE>
<P>
<P>
<CENTER>
<HR WIDTH=70%>
<A TARGET="_top" HREF="index.htm"><IMG SRC="../../../rbjgifs/up.gif" ALT="UP" BORDER=0></A>
<A TARGET="_top" HREF="../../index.htm"><IMG SRC="../../../rbjgifs/home.gif" ALT="HOME" BORDER=0></A>
&copy;
<A HREF="../../rbj.htm" TARGET="_top"><IMG SRC="../../../rbjgifs/rbjin1.gif" ALT=RBJ ALIGN=ABSMIDDLE BORDER=0></A>
created 1998/06/04 modified 1998/06/30
</CENTER></BODY></HTML>