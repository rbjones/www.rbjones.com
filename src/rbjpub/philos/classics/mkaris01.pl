# The following required file contains procedures supporting the generation of the
# output from this translation.
require "mkaris02.pl";

# The following required file contains procedures supporting the analysis of the source
# texts.
require "mkaris03.pl";

#$modified="2009/04/26";
#$created="1996/11/18";

#  The following variable provides a prefix used for all files generated by this script
$stub=$ARGV[0];
$controlfile=$ARGV[1];
$mainTitle=$ARGV[2];

$trace=0;

if ($trace>0) {print "stub $stub, controlfile $controlfile; mainTitle $mainTitle\n"};

# Aristotle's organon comes in five plain text files.
# The first two of these (alphabetically!) have a two level structure (for present
# purposes) consisting of a sequence of "Part"s each of which is a
# sequence of paragraphs.
# The remaining three have a three level structure, consisting of "Books" containing
# Parts and paragraphs.

$file=0;
$book=0;
$part=0;
$para=0;

# The hypertext edition will be structured into HTML files as follows.
# A sigle top level file will contain an index at the file/book level with titles
# supplied by the editor.
# Each file/book will have its own index of parts with titles invented by the editor.
# Each part will have a single HTML file containing all its paragraphs, and a separate
# index of paragraphs, containing as titles either the first sentence of the paragraphs
# of a title invented by the editor if the first sentence is too long or if it is
# a poor guide to the content of the paragraph.

# The structure of the organon is described in the file "organon.txt" which controls
# the conversion and contains any editorial injections.  It also triggers invocation
# of special routines in those points in the text where custom transformations are
# needed.

# All files created by this program will have names beginning with $stub and will
# be placed in directory $direc.

$direc="aristotl";

$controlDataRef=&readcontroldata($controlfile);
%controlData=%$controlDataRef;

# The program for conversion consists of this main routine (01) together with one file
# of procedures concerned with reading and analysis of the source texts (03) and one
# file of procedures concerned with output of the HTML files (02).

$filecount=$controlData{"filecount"};
if ($trace>0){print "Number of files is $filecount\n"};

if ($trace > 9) {&testParaTitle}
else {
    &startOIndex;
    while($file++ < $controlData{"filecount"}) {
	$fileName=$controlData{$file}{"name"};
	$fileTitle=$controlData{$file}{"title"};
	$fileType=$controlData{$file}{"type"};
	$numBooks=$controlData{$file}{"numBooks"};
	if ($fileType eq "SB") {&doSBFile($file)};
	if ($fileType eq "MB") {&doMBFile($file)};
    };
    &closeOIndex;
};

print "Translation completed.\n";

sub testParaTitle
{
    $fileName=$controlData{5}{"name"};
    &openFile($fileName);
    $_=<INPUT>;
    while (!eof(INPUT)){
	$paraTitle="";
#	while (!eof(INPUT)) {&readLine; s/\r/<CR>/g; s/\l/<LF>\n/g; s/\n/<CR>\n/g; print};
	while (!$_ && !eof(INPUT)) {&readLine};
	while (/^((i\.e\.|e\.g\.|viz\.|[^.\?:;])+)$/) {
	    $temp=$1; chomp($temp); if($paraTitle) {$paraTitle.=" $temp"} else {$paraTitle=$temp}; &readLine;};
	print "£:$paraTitle:£\n";
	if (s/^((i\.e\.|e\.g\.|viz\.|[^.\?:;])*[.\?:;])\s*(.*)$/$3/) {
	    print "\$:$1+$2+$3\n"; $paraTitle.=" $1";};
	print "\%:$paraTitle\n";
    };
};

sub doSBFile
{	if ($trace>0) {print "doSBFile $file $fileName $fileType $fileTitle\n"};
	if ($trace>1){$temp=<STDIN>};
	&openFile($fileName);
	$book=1; $bookHead="Book 1";
	$testPartStart=\&testSBPartStart;
	&book;
	&closeFile;
};

sub doMBFile
{	if ($trace>0) {print "doMBFile $file $fileName $fileType $fileTitle\n"};
	if ($trace>1){$temp=<STDIN>};
	&openFile($fileName);
	$testPartStart=\&testMBPartStart;
	$book=0;
	while (&testBookStart) {$bookHead=$1; $_=<INPUT>; ++$book; &book};
	&closeFile;
};

sub book
{    	if ($trace>1){$temp=<STDIN>};
	$bookTitle=$controlData{$file}{$book}{"title"};
	$bookSection=$controlData{$file}{$book}{"booksection"};
	if ($trace>0){print "Starting file $file $bookSection $book\n"};
	if (! defined($bookTitle)) {$bookTitle="$bookSection $book"};
	if ($trace>1){print "\$bookTitle: $bookTitle\n"};
	&oIndexEntry;	&nextBookIndex;
	$part=1;
	while (&$testPartStart)
		{&readLine; &part; ++$part};
	&closeBookIndex;
};
	
sub part        
{	$partTitle=$controlData{$file}{$book}{$part}{"title"};
	if (!(defined $partTitle)){$partTitle=""};
	&bookIndexEntry;	&nextPartIndex;
	&startPart;
	if ($trace>2)
	 {print "Writing file $file book $book part $part to ?\$partCFile ($temp).\n";
	 $temp=<STDIN>};
	$para=0;
	until (&$testPartStart || &testBookStart || eof(INPUT))
		{++$para; &paragraph};
	&endPart;
	&closePartIndex;
};

sub paragraph
{
	if ($trace>3) {print "Starting f $file b $book p $part paragraph $para.\n"};
	while (/^$/ && !eof(INPUT)) {&writeLine($_); &readLine;};
	if (/^\<PRE\>/)
		{until (/^\<\/PRE\>/ || eof(INPUT))
			{&writeLine($_); &readLine};
		if (/^\<\/PRE\>/) {&writeLine($_); &readLine};
		--$para}
	else 	{&paraTitle;
		 my($rest)=$_;
#		 print "Rest: $rest";
#		 $in=<STDIN>;
		&startParagraph;
		&partIndexEntry;
		&writeLine($rest); &readLine;
		if ($trace>4) {print "Line:$_";};
		until (/^\s/ || &$testPartStart || &testBookStart || eof(INPUT))
			{
			&writeLine($_); &readLine;
			if ($trace>4) {print "Line:$_";}};
		};
	while (/^\s*$/ && !eof(INPUT)) {&readLine;};
};

1;
