.nr PS 11
.nr VS 14
.so roff.defs
.LP
.TL
A New Axiomatisation of the Theory of Restricted Generality
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.DA 1987-03-12
.AB no
.AE
.ds LH DTC/RBJ/037   Issue 1.6
.ds CH \s-2A New Axiomatisation of Restricted Generality\s+2
.ds RH 1987-03-12
.ds LF DTC/RBJ/037   Issue 1.6
.ds CF \s-2A New Axiomatisation of Restricted Generality\s+2
.ds RF Page \\n(PN
.LP
.ta 0.8i 1.6i 2.4i 3.2i 4.0i 4.8i
.KS
.NH
INTRODUCTION
.LP
This document specifies semi-formally and formally a version of illiative combinatory logic.
The semi-formal notation is marked by a vertical bar in the
left margin.
The formal notation is in the language Miranda and occurs 
between marks | |< and | |> in the text.
.KE
.KS
.NH
SYNTAX
.LP
A term is a constant or a variable or a term applied to a term.
Application is rendered by juxtaposition (left associative) except
in some cases where an infix notation is used.
.LP
The primitive constants are:
.RS
.IP K
(\(*lx,y.x)
.IP S
(\(*lx,y,z.xz(yz))
.IP =
equality (infix)
.IP P
Purity
.IP \*d
logical OR (infix)
.IP \(*C
restricted quantification
.IP \(*i
choice function
.RE
.KE
.LP
A sequent is a list of terms followed by "\*o" followed by a list of terms
and should be read "if each term on the left is true then so is each 
term on the right".
.KS
.LP
The syntax expressed as a context free grammar is therefore:
.DS L
term ::= constant | variable | term term | term infix_constant term

variable ::= x | y | z | x1 ...

constant ::= infix_constant | S | K | P | \(*C | \(*i ...

infix_constant ::= \*d | = | ...

sequent ::= list_of_terms \*o list_of_terms

list_of_terms ::= term | term "," list_of_terms
.DE
.KE
.KS
.DS L
||<
%nolist
term ::=	V [char]	|	|| variable
		C [char]	|	|| constant
		term $A term	|| application

seq ::= [term] $Sq [term]
||>
.DE
.KE
.LP
The inference system presented below is a sequent calculus which
defines a set of sequents which are called theorems.
This is presented as a number of axiom schemas, and three inference
rule schemas.
.KS
.NH
AXIOM SCHEMAS
.LP
x, x2, y, z are metavariables ranging over variables.
.LP
u, u', v, v', w are metavariables ranging over terms.
.LP
\(*F, \(*G, \(*H, \(*D are metavariables ranging over lists of terms.
.LP
\(*F \(ib \(*G should be read "every term in \(*F is also in \(*G".
.KE
.KS
.LP
The following specific abbreviation will be used:
.sv
true = K
false = KI
I = S K K
.sw
.KE
.KS
.LP
In Miranda:
.DS L
||<
k = C "K"
s = C "S"
i = (s $A k) $A k
true = k
false = k $A i
p = C "P"
true = C "true"
false = C "false"
||>
.DE
.KE
.KS
.LP
The semi-formal description of the axiom schemas is:
.sv
(inc)	\(*G				\*o \(*H			if \(*H \(ib \(*G
(pin)					\*o P K, P S, P true, P false
(pa)	P u, P v			\*o P (u v)
(ke)					\*o K u v = u
(se)					\*o S u v w = (u w) (v w)
.sw
.sv
(qi)					\*o u = u
(qs)	u = v				\*o v = u
(qtr)	u = v, v = w		\*o u = w
(qap)	P (u v), u=u', v=v'	\*o u v = u' v'
(qt)	u, u = v			\*o v
(qk)	u				\*o u = true
.sw
.KE
.sv
(oil)	u					\*o u \*d v
(oir)	v					\*o u \*d v
(re)	\(*C u v, u w				\*o v w
(ni)					\*o \(no (S = K)
(ch)	u v					\*o u (\(*i u)
.sw
.KS
.LP
In Miranda we first define the abstract data type theorem.
.LP
The first set of constructor types are the types of the axiom schemas:
.DS L
||<
abstype theorem
with		inc	:: [term] -> [term] -> theorem
		pin  :: theorem
		pa	:: term -> term -> theorem
		ke	:: term -> term -> theorem
		se	:: term -> term -> term -> theorem
||>
.DE
.DS L
||<
		qi	:: term -> theorem
		qs	:: term -> term -> theorem
		qtr	:: term -> term -> term -> theorem
		qap	:: term -> term -> term -> term -> theorem
		qt	:: term -> term -> theorem
		qk	:: term -> theorem
||>
.DE
.KE
.DS L
||<
		oil	:: term -> term -> theorem
		oir	:: term -> term -> theorem
		re	:: term -> term -> term -> theorem
		ni	:: theorem
		ch	:: term -> term -> theorem
||>
.DE
.KS
.LP
Types of Inference rules:
.DS L
||<
		tr	:: theorem -> theorem -> theorem
		su	:: theorem -> theorem -> theorem
		oe	:: theorem -> theorem -> theorem
		ri	:: theorem -> theorem
		ra	:: theorem -> theorem
||>
.DE
.KE
.KS
.LP
Type of Definitions:
.DS L
||<
		def	:: [char] -> term -> theorem
theorem	== seq
||>
.DE
.KE
.LP
We now introduce some functions in Miranda which will help make the
specifications of the axioms and inference rules more transparent.
.KS
.LP
\fIal\fP constructs a term from a list of terms by left associative
application.
.DS L
||<
al (u:v:w) = al((u $A v):w)
al [u] = u
||>
.DE
.KE
.KS
.LP
\fIca\fP applies a constant to a term, \fIci\fP applies an infix constant
occurring as its second argument to the terms supplied as its first and third. \fIcl\fP applies a constant to a 
list of terms.
.DS L
||<
ca c u = (C c) $A u
ci u c v = ((C c) $A u) $A v
cl c l = al ((C c):l)
||>
.DE
.KE
.DS L
||<
vx = V "x"
vy = V "y"
vz = V "z"
||>
.DE
.KS
.LP
Next we give the Miranda definitions of all the functions 
which may construct theorems from terms, these correspond to
axiom schemas in the semiformal definition.
.DS L
||<
inc tl1 tl2	= tl1			$Sq tl2, (tl2--tl1)=[]
		= ki
pin		= []			$Sq [p $A k, p $A s, p $a true, p $A false]
pa u v	= [p $A u, p$A v]	$Sq [p $A (u $A v)]
ke u v	= []			$Sq [cl "="[al [k, u, v], u]]
se u v w	= []			$Sq [ci (al [s, u, v, w]) "=" (al[u $A w, v $A w])]
||>
.DE
.KE
.KS
.DS L
||<
qi u		= []			$Sq [cl "="[u, u]]
qs u v	= [ci u "=" v]	$Sq [ci v "=" u]
qtr u v w	= [ci u "=" v, ci v "=" w]
					$Sq [ci u "=" w]
qap u1 u2 v1 v2	= [p $A (u $A v), ci u1 "=" u2, ci v1 "=" v2]
					$Sq [ci (u1 $A v1) "=" (u2 $A v2)]
qt u v		= [u, ci u "=" v]		$Sq [v]
qk u		= [u]			$Sq [ci u "=" true, ci (ca "\(no" u) "=" false]
||>
.DE
.KE
.DS L
||<
oil u v			= [u]		$Sq [cl "\*d"[u, v]]
oir u v			= [v]		$Sq [cl "\*d"[u, v]]
re u v w		= [cl "\(*C"[u, v], u $A w]
					$Sq [v $A w]
ni			= []	$Sq [ca "\(no" (ci s "=" k)]
ch u v		= [u $A v] $Sq [u $A (C "\(*i" $A u)]
||>
.DE
.KS
.NH
INFERENCE RULE SCHEMAS
.NH 2
Free Variables
.LP
We write "fv(c)" to denote the (free) variables occuring in some syntactic
construct.
A variable "x" occurs in an atomic term iff the variable is the term.
A variable "x" occurs in a term "(u v)" iff the variable occurs in u
or in v.
A variable "x" occurs in a list of terms "\(*F" iff it occurs in one or more of the
constituent terms.
.DS L
||<
fv_t (V x)	= [x]
fv_t (C x)	= []
fv_t (u $A v)	= (fv_t u) ++ (fv_t v)

fv_lt []	= []
fv_lt (u:f)	= (fv_t u) ++ (fv_lt f)
||>
.DE
.KE
.KS
.NH 2
Transitivity of Sequents
.LP
.sv (tr)
\(*F \*o \(*G;	\(*G \*o \(*H
.sb
\(*F \*o \(*H
.sw
.DS L
||<
tr (a $Sq b) (b $Sq c)	= (a $Sq c)
tr u v		= ki
||>
.DE
.KE
.KS
.NH 2
Union of Sequents
.LP
.sv (su)
\(*F \*o \(*G; \(*H \*o \(*D
.sb
\(*F \(cu \(*H \*o \(*G \(cu \(*D
.sw
.DS L
||<
su (a $Sq b) (c $Sq d) = (a ++ c) $Sq (b ++ d)
||>
.DE
.KE
.KS
.NH 2
Or Elimination
.LP
.sv (oe)
u, \(*F \*o w; v, \(*G \*o w
.sb
u \*d v, \(*F, \(*G \*o w
.sw
.DS L
||<
oe ((u:f) $Sq [w]) ((v:g) $Sq [w]) = (((cl "\*d"[u,v]):f++g) $Sq [w])
||>
.DE
.KE
.KS
.NH 2
\(*C Introduction
.LP
.sv (ri)
u x, \(*F	\*o v x		x \*i (fv (\(*F) \(cu fv(u))
.sb
\(*F \*o \(*C u v
.sw
.DS L
||<
ri (((u $A (V x)):f) $Sq [v $A (V x)])	= f $Sq [cl "\(*C"[u, v]], ~ (member (fv_lt (u:f)) x)
ri u			= ki
||>
.DE
.KE
.KS
.NH 2
Reductio ad Absurdum
.LP
.sv (ra)
u, \(*F	\*o false
.sb
\(*F \*o \(no u
.sw
.DS L
||<
ra ((u:f) $Sq [false])	= f $Sq [ca "\(no" u]
ra u			= ki
||>
.DE
.KE
.KS
.NH
DEFINITIONS AND DERIVED RULES
.LP
New constants may be introduced by defining them to be equal to some term formed
using only primitive or previously defined constants.
The necessary theorem expressing the equation may be obtained using the axiom
schema "def" shown below.
.KE
.LP
The reader should be aware that "def" represents a hole in the type checking
of proofs since it does not check either that the constant thus defined has
not previously been defined.
Nor does it check that the constants used in the definiendum have all been defined.
.LP
.sv
(def)		\*o name = term	|| where name is a new constant
					|| and term mentions only previously
					|| defined constants
.sw
.DS L
||<
def c u = [] $Sq [cl "="[C c, u]]
%list
||>
.DE
