.nr PS 11
.nr VS 14
.so roff.defs
.nr P 1 Presentation Flag
.nr D 0 Document Flag
.LP
.TL
Problems with Z
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.ds LH \s-8DTC/RBJ/038 Issue 0.1\s+8
.ds CH \s-4Problems With Z\s+4
.ds RH \s-4\*(DY\s+4
.ds LF \s-8DTC/RBJ/038 Issue 0.1\s+8
.ds CF \s-4Problems with Z\s+4
.ds RF \s-4Page \\n(PN\s+4
.ct P
.nr PS 20
.nr VS 24
.ec
.KS
.NH
Z REFERENCE DOCUMENTATION
.sp
.IP A
What is the best reference material currently available covering each of the
following areas:
.RS
.IP 1
Concrete Syntax
.IP 2
Type System
.IP 3
Semantics
.IP 4
Proof Theory
.IP 5
Methodology
.RE
.sp
.IP B
What further developments to such reference material are anticipated?
.sp
.IP C
Is there any way we can be sure of being kept up to date on such material?
.sp
.IP D
Is there in progress or in prospect any standardisation activity for Z?
.sp
.IP E
If Z is still fluid, can we exert any influence on the direction of development,
and if so, how?
.KE
.KS
.NH
THE SYNTAX OF Z
.sp
.IP A
Why are there two different signs for introducing definitions ( \*g, ::=)?
.sp
.IP B
When is infix/prefix usage permitted?
.sp
.IP C
What is the current story on boxes?
.KE
.KS
.NH
THE Z TYPE-SYSTEM
.sp
.IP A
Under what conditions are recursive type definitions legal?
.sp
.IP B
Is \*r a built in type or not? (also seq)
.sp
.IP C
We infer that the things after colon's are arbitrary sets, it this correct?
.sp
.IP D
Are "dependent" schema types permitted?
.sp
.IP E
Any hope of "type inheritance" for schema types?
.sp
.IP F
What are the rules for type parameterisation?
.KE
.KS
.NH
THE SEMANTICS OF Z
.sp
.IP A
Disjoint Union
.sp
.IP B
Recursive types
.sp
.IP C
\*r and seq
.sp
.IP D
The use of schema types for specifying operations.
.sp
.IP E
The semantic significance of decorations.
.KE
.KS
.NH
PROOF THEORY
.sp
.IP A
What is it?
.sp
.IP B
How do we ensure or demonstrate consistency of specifications?
.KE
.KS
.NH
METHODOLOGY
.sp
.IP A
What is it?
.KE
.KS
.NH
SPECIFYING OPERATIONS AS FUNCTIONS
.LP
.sp
.sv
Type of \fIObject\fP
	\fBAUTO\fP
Type of \fIProperty\fP
	\fB\*m AUTO\fP
Type of \fIOperation\fP
	\fBIN \(mu STATE \(-> STATE \(mu OUT\fP
		\(ib \*m(IN \(mu STATE \(mu STATE \(mu OUT)
Type of \fIProperty of\fP Operation
	\fB\*m (IN \(mu STATE \(-> STATE \(mu OUT)\fP
Type of \fINon-Deterministic\fP Operation
	\fBIN \(mu STATE \(-> \*m (STATE \(mu OUT)\fP
Type of \fIProperty of Non-Deterministic\fP Operation
	\fB\*m (IN \(mu STATE \(-> \*m (STATE \(mu OUT))\fP
Type of \fIPartial\fP Operation
	\fBIN \(mu STATE \*b STATE \(mu OUT\fP
Type of \fIProperty of Partial\fP Operation
	\fB\*m (IN \(mu STATE \*b STATE \(mu OUT)\fP
Type of \fIPartial Non-Deterministic\fP Operation
	\fBIN \(mu STATE \*b \*m (STATE \(mu OUT)\fP
Type of \fIProperty of Partial Non-Deterministic\fP Operation
	\fB\*m (IN \(mu STATE \*b \*m (STATE \(mu OUT))\fP
.sw
.KE
.KS
.NH
SPECIFYING OPERATIONS USING SCHEMA TYPES
.LP
.sv
\(*DSTATE \*g [i:IN; s,s':STATE; o:OUT]
		\o'=~' IN \(mu STATE \(mu STATE \(mu OUT
.sw
.sp
Not necessarily an operation at all.
Certainly not a loose specification of an operation.
.LP
Can we find any interpretations of schema types as specifications of
operations?
.LP
First define the type of functional subtypes of the schema type \(*DSTATE.
.sv
PAUTO \*g {x: \*m \(*DSTATE |
		\*j y,z:\(*DSTATE. (y\(mox \*e z\(mox
		\*e y.i=z.i \*e y.s=z.s) \(rA  y.o=z.o \*e y.s'=z.s'}
.sw
.LP
We could then interpret a schema type as a lose specification denoting
all of its (partial) functional subtypes.
.LP
Alternatively we might only wish to admit total functional subtypes:
.sv
AUTO \*g {x:PAUTO | \*ji:IN, s:STATE.
	\*ks\':STATE, o:OUT, y:\(*DSTATE.
		y.i=i \*e y.s=s \*e y.s\'=s\' \*e y.o=o}
.sw
.LP
A further interpretation is as a single non-deterministic operation:
.KE
