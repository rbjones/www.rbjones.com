=TEX
\begin{slide}{}

\vfill

\begin{center}
{\bf Tool Support\\
for\\
Formal Proof Development}

\vfill

\small{Roger~B.~Jones \\
International Computers Limited,\\
Eskdale Road,\\
Winnersh,\\
Wokingham,\\
Berks RG11 5TT

tel: 0734 693131 x6536,\\
fax: 0734 697636\\
email: R.B.Jones@win0109.uucp}
\end{center}

\vfill

\end{slide}

\begin{slide}{}

\begin{center}
{\bf Topics}

\vfill

the role of formal methods in the development of critical systems

\vfill

the role of proof in such developments

\vfill

the requirement for tools to support proof related activities

\vfill

the characteristics and capabilities of ProofPower
\end{center}

\vfill

\end{slide}

\begin{slide}{}

\begin{center}

{\bf { PROOF}
themes

\vfill
focus formality


automate proof}

\vfill
\end{center}


{\bf { METHODs}} supporting selective application of formality to best effect in combination with other methods.



{\bf { TOOLs}} proving least cost proof development support integrated with support for other methods.

\vfill

\end{slide}


\begin{slide}{}
\begin{center}
{\bf  ILLUSTRATIVE METHODS}

\vfill
 

``STRUCTURED''

\vfill

FORMAL with REFINEMENT

\vfill

FORMAL for CRITICAL COMPONENTS

\vfill

FORMAL for CRITICAL REQUIREMENTS

\vfill

\end{center}
\end{slide}


\begin{slide}{}
\begin{center}
{\bf  ``STRUCTURED'' DEVELOPMENT}


\vfill

REQUIREMENTS

\vfill

FUNCTIONAL SPECIFICATION

\vfill

DESIGN

\vfill

IMPLEMENTATION

\vfill

VALIDATION

\vfill
\end{center}

\end{slide}

\begin{slide}{}
\begin{center}
{\bf  STRUCTURED DEVELOPMENT
-
PROs and CONs}

\vfill

PRO

provides framework for systematic
design against requirements
prior to implementation

permits checking of design
against requirements prior
to implementation

\vfill

CON

reliance on english language
prior to implementation

validation cannot test
all possible cases

\vfill
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf  FORMAL DEVELOPMENT
with REFINEMENT}

\vfill

REQUIREMENTS

\vfill

FORMAL FUNCTIONAL SPECIFICATION

\vfill

VERIFIED REFINEMENT TO CODE

\vfill

VALIDATION

\vfill
\end{center}

\end{slide}


\begin{slide}{}
\begin{center}
{\bf  FORMAL DEVELOPMENT
with REFINEMENT
-
PROs and CONs}

\vfill

PRO

greater precision in functional specification

permits proof in refinement process

verification covers all cases

\vfill

CON

specification may be large

specification may be wrong

``design'' process radically changed

lack of focus

\vfill
\end{center}

\end{slide}


\begin{slide}{}
\begin{center}
{\bf FORMAL DEVELOPMENT
for CRITICAL COMPONENTS}

\vfill

REQUIREMENTS
supplemented by
HAZARD ANALYSIS

\vfill

IDENTIFY CRITICAL COMPONENTS

\vfill

Use FORMAL approach
for CRITICAL COMPONENTS

\vfill

Use STRUCTURED approach
for NON-CRITICAL COMPONENTS

\vfill
\end{center}
\end{slide}


\begin{slide}{}
\begin{center}
{\bf  FORMAL DEVELOPMENT
for CRITICAL COMPONENTS
-
PROs and CONs}

\vfill

PRO

formal treatment focused
on critical components

\vfill

CON

most of previously mentioned problems

critical components may be
incorrectly identified

\vfill

\end{center}

\end{slide}

\begin{slide}{}
\begin{center}
{\bf  FORMAL DEVELOPMENT
for CRITICAL REQUIREMENTS}

\vfill

formalise critical requirements\\
on SYSTEM

\vfill

formally model architecture

\vfill

formalise critical requirements\
on SUBSYSTEMS

\vfill

verify architecture

\vfill

repeat through structured design process

\vfill

implement and verify
using pre/post conditions

\vfill

\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf FORMAL DEVELOPMENT
of CRITICAL REQUIREMENTS
-
PROs and CONs}

\vfill

PRO

formal treatment focused\\
on critical requirements

identification of critical components\\
formally verified

requirements on critical components\\
formally verified


\vfill

CON

lack of literature on techniques
\vfill
\end{center}

\end{slide}

\begin{slide}{}

\begin{center}

{\bf PROCESSING of FORMAL SPECIFICATIONS}

\vfill

SYNTAX CHECKING

TYPE CHECKING\\
..................\\
CONSISTENCY PROOFS

SEMANTIC WELL-FORMEDNESS PROOFS

PRE-CONDITION SIMPLIFICATION

REFINEMENT VERIFICATION\\
...................\\
PROOF of CRITICAL PROPERTIES


CODE/HARDWARE VERIFICATON

\vfill

\end{center}


\end{slide}

\begin{slide}{}

\begin{center}

{\bf  REQUIREMENTS for PROOF TOOLS}

\vfill

SOUNDNESS/INTEGRITY

\vfill

PRODUCTIVITY

\vfill

ADAPTABILITY/EXTENDIBILITY

\vfill
\end{center}

\end{slide}

% =====================================================================

\begin{slide}{}
\begin{center}

{\bf Productivity Factors}

\end{center}
\vfill

{\small
The following factors can each influence by an order of magnitude or more the cost effectiveness of formal analysis:

\vfill

\begin{itemize}
\item
Architectural Considerations.

{\tiny
The top-level structuring of high level specifications and the high level structuring of the system itself can have a major impact on the costs of verifying critical properties.
}%\tiny

\vfill
\item
The Proof Tool

{\tiny
The level of automation, and the extent and relevance of libraries in the proof tool has a major impact on proof development productivity.
}%\tiny

\vfill

\item
Staff Skills

{\tiny
Variation in productivity of staff can be very substantial.
}%\tiny

\end{itemize}
}%\small
\vfill

\end{slide}

% =====================================================================

\begin{slide}{}
\begin{center}

{\bf ProofPower Software and Services}

\vfill
Software Support for Formal Specification and Formal Reasoning

\vfill
Consultancy and Training in Languages, Methods and Tools

\vfill
Formal Analysis Subcontract

\vfill
Collaborative Bids
\end{center}
\vfill

\end{slide}

% =====================================================================

\begin{slide}{}
\begin{center}

{\bf Languages Supported by ProofPower}

\end{center}
\vfill

\begin{itemize}
\item
NOW:
\begin{itemize}
\item
Standard ML (as metalanguage)
\item
Higher Order Logic
\end{itemize}

\item
SOON:
\begin{itemize}
\item
Z
\item
SAL (SPARK Annotation Language)
\end{itemize}

\item
EVENTUALLY (we hope):
\begin{itemize}
\item
ISO Standard Z
\item
others
\end{itemize}
\end{itemize}
\vfill

\end{slide}

% =====================================================================

\begin{slide}{}
\begin{center}

{\bf ProofPower Functionality}

\end{center}

\begin{itemize}
\vfill

{\small
\item
Document Preparation/Printing:

\begin{itemize}
\item
using LaTeX ``literate scripts'' with extended fonts for document sources
\item
indexes, cross reference and theory listings
\end{itemize}

\vfill
\item
Syntax Check/Type Check (interactive or batch)

\vfill
\item
Formal Reasoning (interactive or batch)

\vfill
\item
Theory Management:

\begin{itemize}
\item
specifications and theorems held in theory hierarchy
\item
programmable access to theory hierarchy
\end{itemize}
}

\end{itemize}
\vfill

\end{slide}

\begin{slide}{}

\begin{center}

{\bf ProofPower\\
-\\
CRITICAL REQUIREMENT}\\
\vfill
all theorems are true\\
if\\
all extensions are conservative

\vfill
{\bf  ARCHITECTURE}
\vfill

\end{center}

code for management of theory database and checking of proofs separated out and protected using abstract data type

code for all other functions (e.g. syntax checking, type inference, proof heuristics) written in SML, but non-critical.

System user extensible.
\vfill
\end{slide}

