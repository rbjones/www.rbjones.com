.RP
.nr PS 11
.nr VS 14
.so roff.defs
.so roff2.defs
.TL
Review of `Understanding Z'
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB
.LP
This document consists of a critical review of the book `Understanding Z' by M.Spivey.
.AE
.ds LH 
.ds CH PF in HOL
.ds RH 1988-05-25 Page \\n(PN
.ds LF DBC/FMU/RBJ/126   Issue 0.1
.ds CF PF in HOL
.ds RF Page \\n(PN
.LP
.KS
.NH
OVERVIEW
.LP
The primary purpose of this book is to give a formal semantics for the Z notation.
.KE
.LP
The first chapter introduces the language by means of a short example, discusses the reasons for providing a formal semantics and the problems arising from `meta-circular' definitions.
It compares Z with VDM and with algebraic specification techniques.
.LP
Chapter 2 identifies the semantic domains, and Chapter 3 provides the abstract syntax and the semantic mappings.
.LP
Chapter 4 offers an enhancement to the semantics to support generic definitions, discusses apparent instances of referential opacity, alternative treatments of partial functions, and the relationship between Z and Clear.
.LP
The final chapter discusses four further topics of interest.
Proof rules for some of the operations of the schema calculus are provided and are shown to be sound by reference to the semantics.
A method is shown for consistently introducing new types, illustrated by the natural numbers.
The relationship between specifications and implementations is discussed, as is the need for non-determinism.
.LP
A summary of notation is provided, which appears to cover the variant of Z used as a metalanguage, and an index of definitions is conveniently condensed onto two facing pages.
.NH
ANALYSIS
.LP
The book does not claim to be an introduction either to Z or to techniques for formally defining the semantics of specification languages.
It is therefore suitable primarily for readers having some prior acquaintance with both topics.
Domain theory is not a prerequisite.
The author does takes care to explain and illustrate his techniques before applying them to the problem.
.LP
By addressing a subset of the language the complexity of the formal semantics has been contained, and a reader not previously expert in formal semantics might therefore benefit from a careful reading of the book.
Reader's without knowledge of Z will however find some difficulty, since Z is itself the meta-language in which the semantics is defined.
.LP
The book does not claim to provide a standard semantics for the Z notation.
The metalanguage and the object language used in the book are distinct variants of Z, neither of which fully corresponds with other recently available Z documentation.
.LP
.NH 2
Is a formal semantics the way to understand Z?
.LP
An understanding of the semantics of a language depends not merely upon successfully identifying what each construct in the language denotes, but also upon an appreciation of the properties enjoyed by these denotations.
These properties are needed for reasoning about specifications.
It might be argued, that the primary purpose of a formal semantics, is to enable the derivation or justification of proof rules.
Derivation of proof rules is a substantial task, in default of which the merits of the semantics must remain \fIsub-judice\fP.
.LP
The author does provide some proof rules derived from his semantics in section 5.1, these are illustrative and cover schema conjunction, schema disjunction and schema projection.
Very little discussion is provided of the proof theoretic consequences of the main body of the semantics.
.LP
.NH 2
Does the book define the semantics of Z?
.LP
The semantics of Z is defined using (a different variant of) Z itself, supplemented in parts by a Plotkin style `structured operational semantics'.
The author makes no attempt to conceal the difficulties arising from this approach, putting rather more vigour into identifying the pitfalls than into explaining how they are avoided.
Nevertheless his analysis of the problems is incomplete.
He observes that a meta-circular definition of the semantics of a programming language will have a trivial least-fixed-point, and may have several significantly different non-trivial fixed-points.
He does not attempt to identify or eliminate any ambiguities which arise in this way.
.LP
While clearly aware of some of the special considerations which apply to expressive specification languages, he does not acknowledge that these prevent the intended semantics from appearing among the fixed points.
This can however be established from the use of the axiom of regularity in defining the \fIworld of sets\fP which is the principal semantic (co-)domain.
.LP
The author is probably correct in claiming that his semantics could be rendered directly in first order set theory without the use of Z as a metalanguage.
But in asking the reader to accept this he calls for an act of faith on the part of the reader, and begs a question which the formal semantics of Z might have been expected to settle more conclusively.
.LP
Nevertheless, the meta-circular semantics will most probably be more accessible to the intended readership than a semantics written directly in first order set theory.
.LP
Passing over the small number of trivial errors in the formal semantics there still remain a number of issues which justify discussion about whether the semantics defined is or should be the semantics of Z.
.NH 2
Discussion points
.NH 3
Conservative Extensions
.LP
The semantics given makes it clear that there is in Z no requirement that specifications should be conservative extensions of the basic language.
This has the undesirable consequence that specifications cannot be shown consistent without resort to the metalanguage, and that giving structure to such a consistency proof is made more difficult.
A semantics could have been given in which extensions are either conservative or content free, and within such a semantic framework proof rules could be established enabling consistency proofs to be conducted in a well structured way in the object language.
The practical disadvantages of the semantics in this respect are substantial for any user who needs to show his specifications consistent, and for tool developers who wish to provide support for the construction of consistency proofs.
.NH 3
Schema Negation
.LP
The semantic domains chosen for schemas do not admit a rendering of the semantics of schema operations which faithfully reproduces previous informal accounts.
The effect upon the semantics of schema negation (not noted by the author) seems most unsatisfactory and is illustrated by the following example.
.LP
The negation of the schema:
.sd FUN
f: † – †
.sb
P
.se
.LP
where P is some desired property, on the basis of previous informal accounts would be:
.sd FUN
f: † – †
.sb
Œ P
.se
.LP
but according to the formal semantics it will be:
.sd FUN
f: ‘(† ‰ †)
.sb
Œ (function f € P)
.se
.LP
This is because the information contained in the signature of the schema over and above the type of the names (in this case the fact that `f' must be a \fIfunctional\fP relation) is merged in the denotation with the information in the body of the schema (in this case P).
.LP
When the complement is taken all the non-functional relations emerge.
.NH 3
The Axiom of Choice
.LP
The author clearly has reservations about the axiom of choice and has taken steps to ensure that the axiom is not necessary.
.RS
.IP (i)
`‡', previously described as the choice operator and given the full force of the classical choice function in draft rules of reasoning, has now been cut back to an operator of `definite description'.
.IP (ii)
global generic definitions are required to be definite rather than loose.
.RE
.LP
That the choice function has been discarded is probably a good thing.
The requirement that generic definitions should not be loose seems to be unnecessary and undesirable.
Unnecessary, because the semantics does not depend, contrary to the author's claim, upon the axiom of choice.
It is true that the consistency of some loose generic specifications can only be shown using the axiom of choice.
But any loosening of a tight specification could be proven consistent without the axiom, and hence so could any implementable loose specification.
.LP
Even if the author were correct in claiming that the axiom of choice is necessary to give a semantics to loose global generic definitions, the cure seems worse than the illness.
Disallowing looseness forces overspecification, and might make an implementation of a data type incompatible with the Z library for wholly trivial reasons.
It also makes proofs more difficult by imposing further proof obligations.
On the other hand, adverse consequences of admitting the axiom of choice are difficult to identify.
Objections to it seem to be of a philosophical rather than practical nature.
.NH 3
Partial Functions
.LP
The treatment of partial functions falls between the sort of treatment necessary in first order set theory and those advocated for the VDM specification language.
.LP
In first order set theory every term must be assigned a value in the domain of quantification of each interpretation.
A choice must be made in defining function application about what value should result when a function is applied to a value outside its domain.
The primitive predicates (equality and membership) are total; classical first order logic is used without modification.
.LP
In the VDM literature, application of a function outside its domain of definition does not yield a value in the domain of quantification, predicates may be partial, and the logic is three valued.
.LP
In Spivey's semantics terms do not necessarily denote values in the domain of quantification, but the logic remains boolean.
All predicates are ultimately formed from the equality and membership predicates, each of which will yield true or false even if its arguments are undefined.
Undefinedness is therefore eliminated in the construction of formulae from terms.
.LP
In his semantics Spivey assigns the value false to the equality or membership predicates when either of their arguments is undefined.
The motivation behind this choice is not explained, nor its consequences.
The author clearly finds equality thus defined insufficient for his own purposes.
He defines in the metalanguage a strong equality, `·', yielding true when applied to two undefined terms.
This is used extensively in defining the semantics, but is not present in the object language.
.LP
This treatment of partial functions results in the need for side conditions on specialisation of universally quantified formulae.
Before a specialisation can take place, the term to which specialisation is proposed must be shown defined.
.LP
The axiom of reflection continues to hold, e.g.:
.DS
… ƒ x:†Ž x = x
.DE
applying the everywhere-undefined partial function over natural numbers to a natural number will always yield an undefined term of type †:
.DS
… (¤: † – †) 1 º †
.DE
.LP
which by Spivey's semantics will not be equal to itself, hence:
.DS
… Œ (¤ 1 = ¤ 1)
.DE
.LP
Showing that specialisation of the law of reflection to the well typed term `¤ 1' cannot be permitted.
.LP
This is likely to make proofs more difficult than they would otherwise be.
.LP
.NH
CONCLUSIONS
.LP
This book sets a new standard in rigour of definition for the Z specification language.
I hope that it does not prove to be the last word on the semantics of Z, but it does represent a very considerable improvement over previously available literature on this topic.
The author has made a serious and careful attempt to put the semantics of Z on a sound basis, and students of the Z language will find this book a valuable aid in understanding Z.
.LP
