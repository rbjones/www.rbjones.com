.nr PS 11
.nr VS 14
.so roff.defs #?
.so roff2.defs
.so lroff2.defs
.nr P 1 Presentation Flag
.nr D 0 Document Flag
.TL
The Use of HOL in the Development of Secure Systems
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB
.ct D
.cx
.ct P
This document consists of the overheads for a presentation to
BCS FACS on May 25 1989.
.cx
.AE
.ds LH \s-8\s+8
.ds CH \s-2\s+2
.ds RH \s-8\s+8
.ds LF \s-8DS/FMU/RBJ/160\s+8
.ds CF \s-2\s+2
.ds RF \s-8Issue 0.1 May 25 1989 Page \\n(PN\s+8
.ct P
.nr PS 24
.nr VS 28
.cx
.KS
.DS C
The ICL Defence Systems
FORMAL METHODS UNIT




\fB\s+4HOL\fP\s-4
LANGUAGE, LOGIC
and TOOL




SPECIAL CHARACTERISTICS
of SECURITY APPLICATIONS




METHODOLOGICAL
IDIOSYNCRASIES
.DE
.KE
.nr PS 20
.nr VS 24
.KS
.DS C
\fBTHE ICL DEFENCE SYSTEMS
FORMAL METHODS UNIT\fP

STARTED in 1985 by Roger Stokes
.DE
.DS L
SLOGAN:
.DE
.DS C
working on real problems
with real tools
.DE
.DS L
CURRENT TEAM:
.DE
.DS C
\fBDr. Rob Arthan\fP
(tools)

\fBDr. Kevin Blackburn\fP
(proof technology)

\fBDr. Barry Homer\fP
(security modelling)

\fBDr. Clive Jervis\fP
(hardware verification)

\fBRoger Jones\fP
(leader, foundations)

\fBGeoff Scullard\fP
(HOL/VISULA link)
.DE
.KE
.KS
.DS C
\fB\s+4
The
TYPED LAMBDA-CALCULUS\s-4\fP
.DE
.DS L
TYPES are:
.DE
.RS
.DS
	type variables
	type constants
	closed under function space constructor
.DE
.RE
.DS L
TERMS are:
.DE
.RS
.DS
	variables
	constants
	applications
	abstractions
.DE
.RE
.DS L


TYPE ::=	Tvar <<string>>					|
		Tcon <<string>>					|
		Fun <<TYPE â TYPE>>

TERM ::=	Ivar <<string â TYPE>>			|
		Icon <<string â TYPE>>			|
		App <<TERM â TERM>>			|
		Abs <<string â TYPE â TERM>>
.DE
.KE
.KS
.DS C
\fB\s+4HOL\s-4
LANGUAGE and LOGIC and TOOL\fP
.DE
.DS L
the HOL \fBLANGUAGE\fP is:
.DE
.RS
.IP \(bu
The typed Lambda-Calculus
.RE
.LP
with:
.RS
.IP \(bu
2 primitive types ("bool" and "ind")
.IP \(bu
3 primitive constants ("==>" "=" and "@")
.RE

.LP
The HOL \fBLOGIC\fP has:
.RS
.IP \(bu
Equality rules (\(*a, \(*b and \(*y reduction)
from TYPED LAMBDA CALCULUS
.IP \(bu
2 extra inference rules (MP, DISCH)
.IP \(bu
4 extra axioms (2 propositional, choice and infinity)
.RE
.DS C
HOL is a FOUNDATION SYSTEM,
within which most of mathematics
can be developed using only
CONSERVATIVE EXTENSIONS
.DE

.LP
The HOL \fBTOOL\fP is:
.RS
.IP
a proof development tool, developed from Cambridge LCF,
by Mike Gordon and his hardware verification group
at the University of Cambridge in 1985.
.RE
.LP
.KE
.KS
.DS C
\fBTHE LCF PARADIGM\fP




implement proof checker using
a TYPED FUNCTIONAL programming LANGUAGE
as META-LANGUAGE (e.g. SML)




abstract data type of THEOREMS
GUARANTEED SOUND by the type checker
(assuming the logic is well defined)




META-LANGUAGE is AVAILABLE TO the USER
for programming proofs and other customisation,
WITHOUT risk of COMPROMISING the CHECKER.

.DE
.KE

.KS
.LP
\fBBENEFITS of the LCF PARADIGM\fP



.IP \(bu
HIGH ASSURANCE of SOUNDNESS



.IP \(bu
EASY to CUSTOMISE and EXTEND



.IP \(bu
COMPLETE USER CONTROL
.br
of PROOF STRATEGY



.IP \(bu
RERUNNABLE PROOF SCRIPTS



.IP \(bu
LEG WORK convertible to HEAD WORK
.br
by PROGRAMMING in META-LANGUAGE
.LP
.KE

.KS
.DS C
\s+3\fBSPECIAL CHARACTERISTICS
of
SECURITY APPLICATIONS\fP\s-3



VERY HIGH ASSURANCE SOUGHT



IMPORTANCE of FORMAL METHODS
RECOGNISED in EVALUATION GUIDELINES



VERY NARROW AREA of CONCERN



FORMAL TREATMENT CONFINED
to SECURITY CHARACTERISTICS



REASONING ABOUT INFORMATION FLOW
.DE
.KE
.KS
.DS C
\fB\s+4METHODOLOGICAL ISSUES\fP\s-4

\fBCONSISTENCY\fP
.DE
.LP
Machine checked formal proofs
are worthless unless the logical
system in which they are derived
is known to be sound.
.DS C


\fBLOOSENESS\fP
.DE
.LP
To obtain highest possible levels of assurance
in respect of critical requirements
the statement of these requirements
must not be cluttered either by:
.RS

.IP (i)
details of non-critical requirements

.IP (ii)
implementation detail

.RE
.LP
.DS C

\fBSATISFACTION and REFINEMENT\fP
.DE
.LP
To obtain formal correctness proofs
a formally precise account of the
`implementation relation'
is needed.
.DE
.KE
.KS
.DS C
\fB\s+4SOLUTIONS\s-4\fP


SPECIFICATION LANGUAGES
should be
MATHEMATICAL FOUNDATION SYSTEMS

all APPLICATIONS should require
ONLY CONSERVATIVE EXTENSIONS

SPECIFICATIONS should be
PROPERTIES or SETS

SATISFACTION is MEMBERSHIP
(or possession of property)

"I satisfies S"
should be rendered formally as
"I ù S" or "S I"

REFINEMENT
is
INCLUSION or ENTAILMENT

"S∞ refines S¨"
should be rendered formally as
"S∞ • S¨" or "ÉIé S∞ I ä S¨ I"
.DE
.KE
.KS
.DS C
\fB\s+4CONSISTENCY\fP\s-4

ABSOLUTE ASSURANCE
of
CONSISTENCY of LOGICAL SYSTEM
NOT POSSIBLE

but we SHOULD HAVE

MACHINE CHECKABLE RELATIVE CONSISTENCY
for
USER EXTENSIONS
(i.e. all applications)

LANGUAGE DESIGNERS and TOOL BUILDER'S
should provide a
SAFE DEVELOPMENT ENVIRONMENT

within which

USER ERRORS CANNOT COMPROMISE
the CONSISTENCY OF the PROOF ENVIRONMENT

in other words
\s+3SPECIFICATION LANGUAGES
should be
MATHEMATICAL FOUNDATION SYSTEMS\s-3
.DE
.KE
.KS
.DS C
\s+4\fBMATHEMATICAL FOUNDATION SYSTEMS\fP\s-4


.DE
.IP \(bu
A mathematical foundation system is
a FORMAL LOGICAL SYSTEM within which
most of MATHEMATICS CAN BE DEVELOPED
using only CONSERVATIVE EXTENSIONS



.IP \(bu
CONSERVATIVE EXTENSIONS, are typically
.br
well formed definitions
.br
e.g. "name = term"
.br
or loosely "name ù non_empty_set"


.IP \(bu
FOUNDATION SYSTEM come with
.br
WELL POPULATED UNIVERSES
.br
(witnesses for consistency proofs)
.KE
.KS
.LP
The following are FOUNDATION SYSTEMS:

.RS
.IP \(bu
Higher Order Logic

.IP \(bu
First Order Set Theory (e.g. ZFC)

.IP \(bu
Constructive Type Theories 
.br
(e.g. ITT, NUPRL)

.IP \(bu
Z (if Ü is primitive)

.RE
.DE
.LP
The following are NOT foundation systems:

.RS
.IP \(bu
First Order Logic

.IP \(bu
Anything weaker than first order logic!

.IP \(bu
Probably not VDM-SL

.RE
.DE
.KE
.KS
.DS C
\fB\s+4LOOSENESS\fP\s-4


LOOSE SPECIFICATIONS
are
CRUCIAL TO SECURITY APPLICATIONS


PRE/POST - CONDITIONS
NOT SUFFICIENTLY EXPRESSIVE


Z-SCHEMAS
NOT SUFFICIENTLY EXPRESSIVE


working in HOL or in set theory
(even in Z)
we can use PROPERTIES or SETS
as SPECIFICATIONS

and
SATISFACTION is MEMBERSHIP
.DE
.KE
.KS
.LP
Give a state consisting of one highly classified and one lowly
classified object:
.sd STATE
high, low :bool
.se
.LP
can we specify loosely an operation on the state which does not
result in any information transfer from `high' to `low'?
.sd \(*DSTATE
STATE, STATE'
.sb
?
.se
.LP
It is easy enough to give a specific operation satisfying this requirement,
but to capture the requirement loosely we have to use a loose specification
outside of the schema, e.g.:
.KE
.KS
.sv
	f: STATE ã STATE
.sb
	És∞ s¨:STATEé (s∞.low = s¨.low)
			ä (f s∞).low = (f s¨).low
.sw
.LP
We could then write our schema:
.sd \(*DSTATE
STATE, STATE'
.sb
	\(*h STATE' = f \(*h STATE
.se
but since all the work has been done in the specification
of `f' the use of the schema appears superfluous.
.KE
.KS
.LP
Note that in the axiomatic definition of f, the requirement
is expressed as a property of f, but this property has
not itself been given a name.
.LP
It is therefore not possible to express in the object language
the claim that some other explicitly defined function has this property.
.LP
For example the following function has the required property:
.sv
	g: STATE ã STATE
.sb
	És :STATEé f s = s
.sw
.LP
but we cannot state this in Z without restating the original property
(though it can be said in the metalanguage).
.KE
.KS
.LP
To enable such correctness propositions to be expressed we must
give a name to the property itself as follows:
.sv
	secure : ë (STATE ã STATE)
.sb
	f ù secure Ç
	És∞ s¨:STATEé (s∞.low = s¨.low)
			ä (f s∞).low = (f s¨).low
.sw
.LP
The conjecture that `g' satisfies this specification can now be expressed:
.DS
		Ö? g ù secure
.DE
.KE
.KS
.LP
If we define a further requirement:
.sv
	safe : ë (STATE ã STATE)
.sb
	f ù safe Ç
	És∞ s¨:STATEé (s∞.high = s¨.high)
			ä (f s∞).high = (f s¨).high
.sw
Then the combination of these two requirements:
.sv
	no_flow : ë (STATE ã STATE)
.sb
	no_flow = secure † safe
.sw
.LP
may be regarded as a REFINEMENT of the original specification "secure".
.LP
That it is a refinement can be expressed in the object language
as the conjecture:
.DS
	Ö? no_flow • secure
.DE
.LP
Note that here refinement is defined as a relationship between
specifications which is distinct from the relationship between
a specification and an implementation.
.KE
.KS
.NH
SPECIFYING OPERATIONS AS FUNCTIONS
.LP
.sp
.nf
Type of \fIObject\fP
	\fBAUTO\fP
Type of \fISpecification\fP
	\fBë AUTO\fP
Type of \fIOperation\fP
	\fBIN â STATE ã STATE â OUT\fP
		\(ib ë(IN â STATE â STATE â OUT)
Type of \fISpecification of\fP Operation
	\fBë (IN â STATE ã STATE â OUT)\fP
Type of \fINon-Deterministic\fP Operation
	\fBIN â STATE ã ë (STATE â OUT)\fP
Type of \fISpecification of Non-Deterministic\fP Operation
	\fBë (IN â STATE ã ë (STATE â OUT))\fP
Type of \fIPartial\fP Operation
	\fBIN â STATE ñ STATE â OUT\fP
Type of \fISpecification of Partial\fP Operation
	\fBë (IN â STATE ñ STATE â OUT)\fP
Type of \fIPartial Non-Deterministic\fP Operation
	\fBIN â STATE ñ ë (STATE â OUT)\fP
Type of \fISpecification of Partial Non-Deterministic\fP Operation
	\fBë (IN â STATE ñ ë (STATE â OUT))\fP
.KE
.KS
.DS C
\fBTHE IMPLEMENTATION RELATION\fP


.DE
.LP
Using SETS or PROPERTIES
as SPECIFICATIONS
we can express in HOL (or Z)
the CORRECTNESS PROPOSITION
which asserts that:
.DS C
some `IMPLEMENTATION'
SATISFIES
its `SPECIFICATION'



NO CLUTTER OF PROOF OBLIGATIONS



NO DEPENDENCE
on
VERIFICATION CONDITION GENERATORS
.DE
.KE
.KS
.DS C
\fB\s+4THE SLOGANS\s-4\fP






SPECIFICATION LANGUAGES
should be
FOUNDATION SYSTEMS







SATISFACTION
is 
MEMBERSHIP
.DE
.KE
