% /usr/local/rbj/vdm/069.doc -- 22 Aug 1987
\documentstyle[11pt,FM,vdm]{article}
\pagestyle{FM}
\setcounter{section}{-1}
\FMtitle{Notes on the VDM type model (document 44)}
\FMidentity{DBC/RBJ/069}
\FMissue{1.1}
\FMclass{ }
\FMdate{27th Aug 1987}
\FMauthor{Roger Bishop Jones}
\FMstatus{Draft}
\FMtype{}
\FMauthority{}
\FMsummary{Comments on Document 044}
\FMdistribution{}

\begin{document}
\makeFMfrontpage
\section{Document control}  % to get section number `0'

\subsection{Contents list}  % to get section number `0.1'

\tableofcontents
\subsection{Document cross references}  % to get section number `0.2'

\begin{thebibliography}{99}

\bibitem{doc44}
  {\em A Type Model for VDM}, B.Q.Monahan, Document no.44.
  Published in LNCS 252, ISBN 0-387-17654-3

\end{thebibliography}

\section{Introduction}
These are personal notes made partly to aid my own comprehension and
partly to provide feedback for Brian.
I have picked nits, including typos.
The structure of this document follows that of Brian's paper exactly
even to the extent of dummy sections to get the section numbers right.
\section{A Language for Type Definition}
\section{Type Universe and their Axiomatic Properties}

\subsection{Basic Types}

Are we to assume that all atoms introduced by name (subsequently)
are distinct if their names are distinct?

Of which basic types is \underline{NIL VALUE} a member?
(none I would guess)

Proposition (7) should read:
\setcounter{equation}{6}
\begin{equation}
\forall{S \subseteq Atom}{(S \neq \{\} \And |S| \in \omega) \Implies S \in Bty}
\end{equation}

The text asserts that Atom is not a basic type, but the formal
propositions do not, and (8) is formalised in a way which suggests
it might be (do the connotations of formulae matter?).


If (71) were added:
\setcounter{equation}{70}
\begin{equation}
Atom \notin Bty
\end{equation}


then (8) might be expressed:
\setcounter{equation}{7}
\begin{equation}
\forall {S \in Bty}{|S| \notin \omega \Implies Atom \cap S = \emptyset}
\end{equation}

Why is Atom not a Basic Type?

Supersets of Atom are not excluded, should they have been?

Maybe the following (instead of (7) and (8)) better expresses
the requirements:
\begin{equation}
\forall {S}{S \cap Atom \neq \emptyset \Implies
		(S \in Bty \Iff (|S| \in \omega \And S \subset Atom))}
\end{equation}

In words, the only basic types containing any atoms are the finite
(non-empty) subsets of Atom (which are all basic types).
This prevents Atom being a member of $Sub(Bty)$.

Observations in subsequent sections seem to depend upon $Bty$ being a
countable set of countable sets, but this doesn't seem to follow
from anything said here.

Perhaps we should also have:
\begin{eqnarray}
|Byt|  \in \omega \cup \{\omega\}\\
\forall S \in Bty. |S|  \in \omega \cup \{\omega\}
\end{eqnarray}
The correctness of these propositions depends a property of the
definitions of $\omega$ and $|s|$ , which is not mentioned either
here or in the appendix on set theory.
Viz. $\forall a,b \in \omega. a<b \Leftrightarrow a\in b$

\subsection{Operators}

What is meant by a $family$ of sets?
Is this just a set of sets, or will any collection or class do?


Note that field selection corresponds to the application of the
{\em mapping representing the record} to the {\em field name}.
\subsection{Closure conditions}

{\em Fortuneatly} should read {\em Fortunately}
\section{Extended Type Universes}

\subsection{The subset closure operator}

`Hence if..' is this because all the operators are monotonic?

\subsection{Flat domain embedding operator}

\framebox{$\bot$} surely cannot be arbitrary,
it must presumably not be a member of
$\cup {\em F}$.

\subsection{Scott Universes}
How do they fail to be CCC's?

\section{CONSTRUCTIONS}

\subsection{Base Types}

I like the use of countable sets, but the constraints specified here
on {\em A} are difficult to understand.

Floating point numbers are a proper subset of Q (I note in passing).

Surely the options are:

\begin{enumerate}
\item [i]
Something realistic like floating point (not a field).
\item [ii]
Compromise with a field (e.g. Q).
\item [iii]
Go the whole hog with a complete field (countable models available if that
matters).
\end{enumerate}

`A' seems to be a vague compromise falling somewhere between [ii] and [iii].

\subsection{The Tag Operator}

Chose a countable {\em set} Tag...

Its not clear how we know that $\overline{U}$ is a countable set of countable sets.
Perhaps this follows from a similar unstated constraint on Bty?
\subsubsection{Tags and the $mk$ notation}

Why are record types ordered?
\subsection{Building $U$}

Your reference to Cohn doesn't give any satisfaction in the
1981 paperback edition.
\subsection{Building the Scott Universe}

Last sentence first paragraph, for {\em delt} read {\em dealt}. 

Page 14, footnote, {\em fortuneatly} should read {\em fortunately}.
\section{Type Universes and VDM Types}

\section{Conclusions and Summary}

By {\em finitely generated} do you just mean countable or finite, or
do you mean more than that, if so, what?

{\em is either {\em infinite} or not values..} doesn't make grammatical sense.

The examples concerning type equivalence are not very illuminating.
Surely no notion of type equivalence, whether extensional or not, could
fail to have the properties mentioned?
The first property is a consequence of equality being an equivalence relation,the second an instance of the requirement that type constructors must
respect type equality.

That types are extensional requires that whenever two types have exactly
the same members they are equal, which is not derivable from the properties
shown.

\section{Supplimentary Discussion}

\subsection{Continuity}

The restriction to continuous function spaces seems to me to be a problem.
This is O.K. for a programming language, but inadequate for a specification
language.
We want to be able to use quantification in implicit specifications,
quantification is not continuous, so post-conditions will not in general
be continuous functions, similarly for pre-conditions, invariants etc.
In some applications the quantification in implicit specifications occurs
nested several layers deep in subsidiary function definitions, and so
functions in general may be discontinuous.

Of course computable functions will always be continuous, but surely we
don't want to restrict implicit specifications to continuous functions?

Brian seems to suggest in section 2 that some separate language is used
in type invariants, but this is not reflected elsewhere in the language
definition where invariants are boolean expressions, and all expressions
may have boolean expressions embedded in them.

It would be open to us to make a systematic distinction between continuous
and discontinuous functions, or between computable and non-computable
functions, but the distinction is not there at the moment, and continuous
functions do not by themselves suffice.

\subsection{Solutions to Recursive Type Equations}

The closure conditions on the Universe of Types are specified,
but this does not give us any obvious characterisation of which
systems of type equations have non-trivial solutions.

Though interesting examples are given of cases where recursive equations
have non-trivial solutions, there are also cases where the only
solutions are trivial or where there are no solutions.
We need some account of when solutions will be obtained.  

\end{document}



