=TEX
\begin{slide}{}
\begin{center}
{\bf What's Different About ICL HOL}

\ 

\small{Roger Bishop Jones \\
International Computers Limited,
Eskdale Road,
Winnersh,
Wokingham,
Berks RG11 5TT

tel: 0734 693131 x6536,
fax: 0734 697636\\
email: uucp: rbj@win0109.uucp}
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf WHAT'S DIFFERENT ABOUT ICL-HOL}

Objectives

What's the Same?

``System Level'' Changes

Concrete Syntax

Theory Hierarchy

Goal Package

Proof Contexts

Rewriting

Resolution

Missing Bits
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf OBJECTIVES}

INTEGRITY

ASSURANCE

SUPPORT FOR Z (\& other notations)

PRODUCTIVITY

{\bf NOT} intended to supplant Cambridge HOL

{\bf NOT} oriented towards hardware verification

{\bf NOT} compatible with Cambridge HOL
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf WHAT'S THE SAME}


FOLLOWS ``LCF PARADIGM''\\
(more closely than LCF and HOL?)

ABSTRACT LOGIC\\
(but not concrete syntax)

BASIC CONCEPTS

rules\\
conversions\\
tactics\\
...als\\
etc...
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf ``SYSTEM LEVEL'' DIFFERENCES}

METALANGUAGE = Standard ML (with extensions)

THEORY DATABASE = PolyML database

hence

delete definition\\
delete theory


WATERTIGHT ABSTRACT DATA TYPE\\
(no ``mk\_thm'')
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf CONCRETE SYNTAX}

extended character set

well defined syntax and lexis for terms

user definable fixity and precedence

specification paragraphs

¬if a then b else c® instead of \verb+"(a => b | c)"+

set abstraction simplified

ALIASES instead of INTERFACE MAPS

no ``indeterminate types'' error

``type-contexts'' instead of ``sticky types''

polymorphic type abbreviations
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf THEORY HIERARCHY}

theories are ``designed''

min\\
log\\
init\\
misc\\
pair\\
î\\
list\\
char\\
basic\_hol\\
/\ \ \ \ $\vert$\ \ \ \ $\backslash$ \\
sets combin one\\
$\backslash$\ \ \ \ \ $\vert$\ \ \ \ \ / \\
$\backslash$ sum /\\
$\backslash$\ $\vert$ \ / \\
hol\\
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf GOAL PACKAGE}

Validation by Incremental Proof

Proves exactly the Goal

Proof Stack

Numbered Assumptions and Goals

Eliminates Duplicate Subgoals

Subgoals extra assumptions

Terms in Quotes (¬t®)\\
Numbers in Comments ((* 4 *))
\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf PROOF CONTEXTS}
\end{center}

PROOF CONTEXTS CONTROL:
\begin{itemize}
\item
Basic rewrites
\item
Stripping of concls and asms
\item
Rewrite canonicalisation
\item
Auto Proof
\item
Consistency Proof
\end{itemize}

\end{slide}

\begin{slide}{}
\begin{center}
{\bf STRIPPING}

effects extended through proof context

e.g. solves propositional tautologies

{\bf REWRITING}

fails if no rewriting

does not instantiate free variables in theorems used for rewriting

``basic rewrites'' taken from proof context\\
(and usually include conversions as well as theorems)

\end{center}
\end{slide}

\begin{slide}{}
\begin{center}
{\bf RESOLUTION}

no equivalent to Cambridge-HOL resolution

manual instantiation of assumptions sometimes does the job

first-order resolution package using unification supported

{\bf MISSING BITS}

words,
concrete data types

term surgery,
libraries

restricted quantification

user programmable type-checking for HOL
\end{center}
\end{slide}
