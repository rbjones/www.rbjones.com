.nr PS 11
.nr VS 14
.so roff.defs
.nr P 1 Presentation Flag
.nr D 0 Document Flag
.LP
.TL
HOL88 and the future of HOL
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB
.ct D
.cx
.ct P
This document consists of the overheads for a presentation on HOL88
and the future of HOL, prepared for the `compusec' meeting in APRIL 1989.
.cx
.AE
.ds LH \s-8HOL88 and the future of HOL\s+8
.ds CH \s-2\s+2
.ds RH \s-8\*(DY\s+8
.ds LF \s-8DS/RBJ/159\s+8
.ds CF \s-2\s+2
.ds RF \s-8Issue 0.1 Page \\n(PN\s+8
.ct P
.nr PS 24
.nr VS 28
.cx
.KS
.DS C





NEW FEATURES IN HOL88





FUTURE PROJECTS INVOLVING HOL





`THE' IED PROJECT
.DE
.KE
.nr PS 20
.nr VS 24
.KS
.DS C
\fBNEW FEATURES in HOL88 VERSION 1.05\fP



LOOSE SPECIFICATIONS OF CONSTANTS
(as requested by ICL)


MULTIPLE CONSTANT INTRODUCTION


RECURSIVE TYPE DEFINITION PACKAGE
(developed by Tom Melham)


INTRODUCTION OF LIBRARIES


CUSTOMISABLE USER INTERFACE


IMPROVED ERROR MESSAGES


UNIX SYSTEM CALLS
.DE
.KE
.KS
.DS C
\fBFUTURE PROJECTS INVOLVING HOL\fP


INTERFACING HOL to CATHEDRAL II
(ESPRIT BRA, CAMBRIDGE, PHILLIPS, IMEC)


TOTALLY VERIFIED SYSTEM
(software compiler and hardware)
(IED, INMOS, SRI, OXFORD, CAMBRIDGE)


INTERFACING HOL to ELLA
(IED PRAXIS BA CAMBRIDGE)


DOCUMENTATION for HOL
(AUSTRALIAN MOD, CAMBRIDGE, SRI)


FOUNDATIONS and TOOLS
for FORMAL VERIFICATION
(IED, ICL, PVL, CAMBRIDGE, KENT)


HOL IMPLEMENTATION in SML
at CALGARY
.DE
.KE
.nr PS 20
.nr VS 24
.KS
.DS C
\fBFOUNDATIONS and TOOLS
for
FORMAL VERIFICATION\fP

.DE
.DS L
PARTICIPANTS:
.DE
.DS C
ICL Defence Systems

Program Validation Limited

University of Cambridge

University of Kent
.DE
.DS L
OBJECTIVES:
.DE
.DS C
High Quality, High Assurance
re-implementation of HOL (in SML)

Improvements to usability and productivity

Extension to software verification

Link with SPADE tools

Development of Libraries

Foundational Studies
.DE
.KE
.KS
.DS C
\fBHIGH ASSURANCE
IMPLEMENTATION of HOL\fP

following LCF paradigm
SEPARATE OUT CRITICAL CODE
into abstract data type


FORMALLY SPECIFY
SYNTAX (in HOL) and SEMANTICS (in ZF-HOL)
of ABSTRACT HOL LOGIC


FORMALLY SPECIFY (in HOL)
ABSTRACT PROOF SYSTEM


INFORMALLY PROVE SOUNDNESS
of PROOF SYSTEM


IMPLEMENT CORE PROOF CHECKER
in HOL/ML


INFORMALLY PROOF CORRECTNESS
of IMPLEMENTATION
.DE
.KE
.KS
.DS C
\fBAPPROACHES to CODE VERIFICATION
using 
HOL\fP


WRITE and VERIFY PROGRAMS
in INTERSECTION of HOL and ML




ADAPT SPADE TOOLS
to GENERATE
VERIFICATION CONDITIONS in HOL




define
PROGRAMMING LANGUAGE SEMANTICS
in HOL and
EMBED PROGRAM LOGICS
into HOL
(see MJCG paper)
.DE
.KE
.KS
.DS C
\fBTINKERING with the LOGIC\fP




SCOPING of NAMES
(by using compound names)




OVERLOADING of NAMES
(disambiguation by type)




OVERLOADING of JUXTAPOSITION

.DE
.KE
.KS
.DS C
\fBMORE RADICAL CHANGES to LOGIC\fP



FULL SUPPORT for MODULARITY
(with ML-like Polymorphism)



INTRODUCTION
of
DEPENDENT TYPES



RETREAT to PSEUDO-TYPES



REFLEXIVE FOUNDATIONS



CONVERGENCE with METALANGUAGE
.DE
.KE
