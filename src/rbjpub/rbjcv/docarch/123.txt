.nr PS 11
.nr VS 14
.so /escher/usr2/projects/infra/msmacros/roff.defs
.so /escher/usr2/projects/infra/msmacros/roff2.defs
.RP
.TL
Pure function theory in HOL
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB
.LP
This document consists of the introduction into HOL of a pure theory of (partial) functions.
.AE
.ds LH 
.ds CH PF in HOL
.ds RH \*(DY Page \\n(PN
.ds LF DBC/FMU/RBJ/123   Issue 0.1
.ds CF PF in HOL
.ds RF Page \\n(PN
.ig cx
extend_theory`pf123`;;
loadf`/escher/usr2/projects/infra/pholfiles/TAUT`;;
map load_definitions [`zf120`;`zf122`;`pf123`];;
map load_theorems [`zf120`;`zf122`;`pf123`];;
map load_axioms [`zf120`;`zf122`;`pf123`];;
map delete_cache [`zf120`;`zf122`;`pf123`];;
let NOT_FORALL_TAC = REWRITE_TAC[NOT_FORALL] THEN BETA_TAC;;
let PURE_NOT_FORALL_TAC = PURE_REWRITE_TAC[NOT_FORALL] THEN BETA_TAC;;
let NOT_EXISTS_TAC = REWRITE_TAC[NOT_EXISTS] THEN BETA_TAC;;
let PURE_NOT_EXISTS_TAC = PURE_REWRITE_TAC[NOT_EXISTS] THEN BETA_TAC;;
let NEW_GOAL_TAC t = RMP_TAC t THENL [STRIP_TAC; ALL_TAC];;
let new_goal t = expand (NEW_GOAL_TAC t);;
let NEW_GOAL_PROOF_TAC t p = RMP_TAC t THENL [STRIP_TAC THEN p; ALL_TAC];;
let new_goal_proof t p = expand (NEW_GOAL_PROOF_TAC t p);;
.cx
.LP
.KS
.NH
INTRODUCTION
.LP
.hd
new_theory`pf123`;;
new_parent`zf122`;;
loadf`/escher/usr2/projects/infra/pholfiles/TAUT`;;
map load_definitions [`zf120`;`zf122`];;
map load_theorems [`zf120`;`zf122`];;
map load_axioms [`zf120`;`zf122`];;
map delete_cache [`zf120`;`zf122`];;
let NOT_FORALL_TAC = REWRITE_TAC[NOT_FORALL] THEN BETA_TAC;;
let PURE_NOT_FORALL_TAC = PURE_REWRITE_TAC[NOT_FORALL] THEN BETA_TAC;;
let NOT_EXISTS_TAC = REWRITE_TAC[NOT_EXISTS] THEN BETA_TAC;;
let PURE_NOT_EXISTS_TAC = PURE_REWRITE_TAC[NOT_EXISTS] THEN BETA_TAC;;
let NEW_GOAL_TAC t = RMP_TAC t THENL [STRIP_TAC; ALL_TAC];;
let new_goal t = expand (NEW_GOAL_TAC t);;
let NEW_GOAL_PROOF_TAC t p = RMP_TAC t THENL [STRIP_TAC THEN p; ALL_TAC];;
let new_goal_proof t p = expand (NEW_GOAL_PROOF_TAC t p);;
.he
.KE
.NH
INTRODUCING THE NEW TYPE
.LP
.NH 2
The Defining Property
.LP
The following property selects those sets which are obtainable from the empty set by iterating the construction of functions.
.LP
The property (of properties) of being "function hereditary" is used to define the collection of functions.
.LP
A property is function hereditary if it holds of some set under the following conditions:
.RS
.IP 1
The set is a function (a many-one relation).
.IP 2
Bottom is not in the range of the function.
.IP 3
Every element in the domain or range of the function has the property.
.RE
.LP
.hd
let ¥_DEF = new_definition(`¥_DEF`,"¥:SET = unit(§ ó §)");;

let function_hereditary_DEF = new_definition(`function_hereditary_DEF`,"
	(function_hereditary:(SETãbool)ãbool) p =
	É(f:SET)é function f Ä ¥ ì (image f) Ä
		(É(x:SET)é x ù (field f) äp x)
	ä p f
");;
.he
A function is any set which has every function-hereditary property.
.ig cx
˝ = §
a≤ ó≤ b≤ = unit (a ó b)
a≤ ï≤ b≤ = a ï b
¥≤ = (˝ ó≤ ˝)
T≤ = ¥≤ ó≤ ˝
F≤ = ¥≤ ï≤ T≤
UNIT = T≤ ó≤ T≤
BOOL = UNIT ï≤ (F≤ ó≤ T≤)
0≤ = ˝ ó≤ T≤
suc≤ x≤ = x≤ ó≤ T≤
.cx
.hd
let pure_function_DEF = new_definition(`pure_function_DEF`,"
	(pure_function:SETãbool) s = É(p:SETãbool)é function_hereditary p ä p s
");;
.he
.LP
We will need to use the following lemma stating that pure_function is function hereditary:
.hd
set_goal([],"
	function_hereditary pure_function
");;
expand(REWRITE_TAC [function_hereditary_DEF]);;
expand (REPEAT STRIP_TAC);;
expand (REWRITE_TAC [pure_function_DEF]);;
expand (REPEAT STRIP_TAC);;
expand (DEF_RES_TAC function_hereditary_DEF);;
expand RES_TAC;;
.he
.hd
lemma "Éxé x ù (field f) ä p x";;
 expand (REPEAT STRIP_TAC);;
 expand RES_TAC;;
 expand (DEF_RES_TAC pure_function_DEF);;

expand RES_TAC;;

let PF_t01 = save_top_thm `PF_t01`;;
.he
.LP
We now obtain the inductive principle that any function_hereditary property is true of all the pure functions:
.hd
set_goal([],"
	É(p:SETãbool)é function_hereditary p ä
		É(x:SET)é pure_function x ä p x
");;
expand (REPEAT STRIP_TAC);;
expand (DEF_RES_TAC function_hereditary_DEF);;
expand (DEF_RES_TAC pure_function_DEF);;
let PF_t02 = save_top_thm `PF_t02`;;
.he
.hd
set_goal([],"
	function_hereditary function
");;
expand(REWRITE_TAC [function_hereditary_DEF]);;
expand (REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[]);;
let PF_t03 = save_top_thm `PF_t03`;;
.he
.hd
set_goal([],"
	function_hereditary çx:SETé(¥ ì image x)
");;
expand(REWRITE_TAC [function_hereditary_DEF] THEN BETA_TAC);;
expand (REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[]);;
let PF_t04 = save_top_thm `PF_t04`;;
.he
.hd
set_goal([],"
	Éx:SETé pure_function x ä function x Ä (¥ ì image x)
");;
expand (STRIP_TAC THEN STRIP_TAC THEN STRIP_TAC);;
expand (ASSUME_TAC PF_t03);;
expand (IMP_RES_TAC PF_t02);;
expand (ASSUME_TAC PF_t04);;
expand (IMP_RES_TAC PF_t02);;
expand (ACCEPT_TAC (BETA_RULE (ASSUME "(çxé ¥ ì (image x))x")));;
let PF_t05 = save_top_thm `PF_t05`;;
.he
.hd
set_goal([],"
	Éx:SETé pure_function x ä
		Éy:SETé y ù (field x) äpure_function y
");;
expand (STRIP_TAC THEN STRIP_TAC THEN STRIP_TAC);;

lemma "function_hereditary ç(x:SET)é
		function x Ä
		¥ ì (image x) Ä
		É(y:SET)é y ù (field x) ä pure_function y";;
  expand (PURE_REWRITE_TAC [function_hereditary_DEF] THEN BETA_TAC);;
  expand (REPEAT STRIP_TAC);;

  expand (ASM_REWRITE_TAC[]);;

  expand (ASM_REWRITE_TAC[]);;

  expand RES_TAC;;
  expand (ASSUME_TAC PF_t01);;
  expand (DEF_RES_TAC function_hereditary_DEF);;
  expand RES_TAC;;

expand (DEF_RES_TAC pure_function_DEF);;
expand RES_TAC;;
expand (ASSUME_TAC (BETA_RULE (ASSUMP "(çxé
         function x Ä
         ¥ ì (image x) Ä
         (Éyé y ù (field x) ä pure_function y))
       x")));;
expand (ASM_REWRITE_TAC[]);;
let PF_t06 = save_top_thm `PF_t06`;;
.he
.NH 2
Non-emptyness
.LP
Before introducing the type determined by this property we must prove that it is non-empty.
.hd
set_goal([],"
	pure_function §
");;
expand (REWRITE_TAC [pure_function_DEF; function_hereditary_DEF]);;
expand (REPEAT STRIP_TAC);;

lemma "function §";;
  expand (REWRITE_TAC [function;relation;ZF_le2]);;

lemma "¥ ì (image §)";;
  expand (REWRITE_TAC[ì_DEF;image_DEF;¥_DEF;ZF_le2;ZF2]);;

lemma "(Éxé x ù (field §) ä p x)";;
  expand (REWRITE_TAC [ZF_thm10; field_DEF; domain_DEF; image_DEF; ZF_le2; ZF2]);;

expand RES_TAC;;

let PF_t07 = save_top_thm `PF_t07`;;
.he
.hd
set_goal([],"
	Ñ(x:SET)é pure_function x
");;
expand (EXISTS_TAC "§");;
expand (ACCEPT_TAC PF_t07);;

let PF_t08 = save_top_thm `PF_t08`;;
.he
.NH 2
Type introduction
.LP
Now we introduce the new type:
.hd
let DEF_PF = new_type_definition(`PF`,"pure_function",PF_t08);;
.he
.hd
let PF_ONE_ONE = REWRITE_RULE [definition `bool` `ONE_ONE_DEF`]
							(CONJUNCT1 DEF_PF);;
.he
.LP
.hd
set_goal([],"
	É(x:PF)(y:PF)é (x=y) = (REP_PF x = REP_PF y)
");;
expand (REPEAT STRIP_TAC THEN EQ_TAC);;
expand (STRIP_TAC THEN ASM_REWRITE_TAC[]);;
expand (REWRITE_TAC [PF_ONE_ONE]);;
let PF_t09 = save_top_thm `PF_t09`;;
.he
.ig cx
set_goal([],"
	É(P:*ãbool)é ($Ñ P) ä P ($á P)
");;
expand (STRIP_TAC);;
expand (TAUT_REWRITE_TAC "a ä b = åb ä åa");;
expand NOT_EXISTS_TAC;;
expand (TAUT_REWRITE_TAC "åa ä b = åb ä a");;
expand NOT_FORALL_TAC;;
expand (TAUT_REWRITE_TAC "ååa = a");;
expand (STRIP_TAC);;
expand (IMP_RES_TAC SELECT_AX);;
let PF_l2 = save_top_thm `PF_l2`;;
.cx
.hd
let  ABS_PF_DEF = new_definition(`ABS_PF_DEF`,"
	(ABS_PF:SETãPF) s = áp:PFé REP_PF p = s
");;
.he
.hd
let PF_l3 = INST_TYPE [":PF",":*"] SELECT_AX;;

set_goal([],"
	pure_function x ä (REP_PF (ABS_PF x) = x)
");;
expand (REWRITE_TAC [ABS_PF_DEF;DEF_PF]);;
expand (STRIP_TAC);;
lemma "REP_PF x' = x";;
expand (ASM_REWRITE_TAC[]);;
expand (IMP_RES_TAC (BETA_RULE (SPEC "ç(x':PF)é REP_PF x' = (x:SET)" PF_l3)));;
let PF_t10 = save_top_thm `PF_t10`;;
.he
.LP
.hd
set_goal([],"
	É(x:PF)é ABS_PF(REP_PF x) = x
");;
expand (REWRITE_TAC [ABS_PF_DEF]);;
lemma "É(x:PF)(y:PF)é (REP_PF x = REP_PF y) = (x = y)";;
expand (REPEAT STRIP_TAC THEN EQ_TAC);;
expand (MATCH_ACCEPT_TAC PF_ONE_ONE);;
expand (STRIP_TAC THEN (ASM_REWRITE_TAC[]));;
expand (STRIP_TAC THEN (ASM_REWRITE_TAC[]));;
expand (ACCEPT_TAC (MP
	(BETA_RULE (SPECL ["çp:PFé p = x";"x:PF"]
		(INST_TYPE [":PF",":*"] SELECT_AX)))
	(REFL "x:PF")));;
let PF_t11 = save_top_thm `PF_t11`;;
.he
.LP
ABS_PF mat be thought of as a function which lifts a value from the representation type to the new `abstract type'.
Analogues for operators are introduced here:
.hd
let lift_monop_DEF = new_definition(`lift_monop_DEF`,"
	(lift_monop:(SETãSET)ã(PFãPF)) f = çx:PFé ABS_PF(f (REP_PF x))
");;
let lift_binop_DEF = new_definition(`lift_binop_DEF`,"
	(lift_binop:(SETãSETãSET)ã(PFãPFãPF)) f =
		ç(x:PF)(y:PF)é ABS_PF(f (REP_PF x)(REP_PF y))
");;
.he
.LP
Before defining abstraction it is necessary to identify the values "¥≤" and "T≤".
.hd
let ˝_DEF = new_definition(`˝_DEF`,"
	(˝:PF) = ABS_PF §
");;
.he
.hd
let unit_map_DEF = new_definition(`unit_map_DEF`,"
	(unit_map:SETãSETãSET) x y = ((y = ¥) => § | unit(x ó y))
");;

let ó≤_DEF = new_infix_definition(`ó≤_DEF`,"
	(ó≤:PFãPFãPF) = lift_binop unit_map 
");;
.he
.hd
let ¥≤_DEF = new_definition(`¥≤_DEF`,"
	(¥≤:PF) = ˝ ó≤ ˝
");;

let T≤_DEF = new_definition(`T≤_DEF`,"
	(T≤:PF) = ¥≤ ó≤ ˝
");;
.he
.LP
.hd
let truef_DEF = new_definition(`truef_DEF`,"
	(truef:SET) = REP_PF T≤
");;
.he
.hd
let set_to_type_DEF = new_definition(`set_to_type_DEF`,"
	(set_to_type:SETãSET) s = s ™ (unit (REP_PF T≤))
");;
let monop_set_to_type_DEF = new_definition(`monop_set_to_type_DEF`,"
	(monop_set_to_type:(SETãSET)ã(SETãSET)) o = çs:SETé set_to_type (o s)
");;
.he
.hd
let dom_DEF = new_definition(`dom_DEF`,"
	dom	= lift_monop (monop_set_to_type domain)
");;
let ran_DEF = new_definition(`ran_DEF`,"
	ran	= lift_monop (monop_set_to_type image)
");;
let fie_DEF = new_definition(`fie_DEF`,"
	fie	= lift_monop (monop_set_to_type field)
");;
.he
.LP
Some general lemmas would be useful showing how properties are lifted.
.NH
TRUTH
.DS L
let F≤_DEF = new_definition(`F≤_DEF`,"
	(F≤:PF) = T≤ ï≤ (˝ ó≤ ˝)
");;
.DE
.NH
Abstraction and Application
.LP
The most fundamental operations concerned with functions are functional abstraction and function application.
.LP
Functional Application
.LP
First we define the appropriate operation on SET and then we lift it to PF.
.hd
let function_application_DEF = new_definition(`function_application_DEF`,"
	(function_application:SETãSETãSET) f a =
		a ù (domain f) => f © a | ¥
");;
.he
.hd
let ≤_DEF = new_infix_definition(`≤_DEF`,"
	≤ = lift_binop function_application
");;
.he
.hd
%
let PF_hereditary_DEF = new_definition(`PF_hereditary_DEF`,"
	(PF_hereditary_DEF:(PFãbool)ãbool) p =
		É(x:PF)é(É(y:PF)é	(fie x) ≤ y äp y) ä p x
");;
%
.he
.LP
We should be able to prove an axiom of extensionality.
.LP
First we prove the property of sets corresponding to the required property of pure functions.
.hd
let func_extensional_DEF = new_definition(`func_extensional_DEF`,"
	func_extensional x y =
		((x = y) =	(É(z:SET)é
		(function_application x z = (function_application y z))
				)
		)
");;
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)é pure_function x
		ä (y ù (domain x) = (function_application x y à ¥))
");;
expand (EVERY[
		REWRITE_TAC [function_application_DEF; NE_DEF];
		REPEAT STRIP_TAC; EQ_TAC]);;
.he
.sv "HOL output"
2 subgoals
"å((y ù (domain x) => x © y | ¥) = ¥) ä y ù (domain x)"
    [ "pure_function x" ]

"y ù (domain x) ä å((y ù (domain x) => x © y | ¥) = ¥)"
    [ "pure_function x" ]
.sw
.hd
expand (EVERY[
	STRIP_TAC;
	ASM_REWRITE_TAC[];
	IMP_RES_TAC PF_t05;
	IMP_RES_TAC (SPECL ["x:SET";"y:SET";"¥"]ZF2_thm4);
	ASM_REWRITE_TAC[];
	STRIP_TAC;
	IMP_RES_TAC (SPECL ["y:SET";"¥:SET";"x:SET"] ZF2_thm7);
	ASSUME_TAC (REWRITE_RULE [ì_DEF] (ASSUME "¥ ì (image x)"));
	RES_TAC]);;

expand (EVERY[
	TAUT_REWRITE_TAC "åa ä b = åb ä a";
	STRIP_TAC;
	ASM_REWRITE_TAC[]]);;
let PF_t12 = save_top_thm `PF_t12`;;
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)(z:SET)é function x Ä y ù (domain x)
	ä ((function_application x y = z) = ((y ó z) ù x))
");;
expand (EVERY[
	REWRITE_TAC [function_application_DEF];
	REPEAT STRIP_TAC;
	IMP_RES_TAC ZF2_thm4;
	EQ_TAC; ASM_REWRITE_TAC[]]);;
let PF_t13 = save_top_thm `PF_t13`;;
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)(z:SET)é pure_function x Ä y ù (domain x)
	ä ((function_application x y = z) = ((y ó z) ù x))
");;
expand (EVERY[
	REWRITE_TAC [function_application_DEF];
	REPEAT STRIP_TAC;
	IMP_RES_TAC PF_t05;
	IMP_RES_TAC ZF2_thm4;
	EQ_TAC; ASM_REWRITE_TAC[]]);;
let PF_t14 = save_top_thm `PF_t14`;;
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)é pure_function x ä pure_function y
		ä	func_extensional x y
");;
expand (EVERY[
	REPEAT STRIP_TAC;
	PURE_ONCE_REWRITE_TAC[func_extensional_DEF];
	EQ_TAC; REPEAT STRIP_TAC]);;
.he
.sv "HOL output"
2 subgoals
"x = y"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]

"function_application x z = function_application y z"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "x = y" ]
.sw
.hd
expand (ASM_REWRITE_TAC[]);;
.he
.sv "HOL output"
goal proved
é Ö function_application x z = function_application y z

Previous subproof:
"x = y"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]
.sw
.hd
expand (EVERY[
	PURE_REWRITE_TAC [ZF_le1];
	REPEAT STRIP_TAC; EQ_TAC; REPEAT STRIP_TAC]);;
.he
.sv "HOL output"
2 subgoals
"z ù x"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]
    [ "z ù y" ]

"z ù y"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]
    [ "z ù x" ]
.sw
.hd
lemma "Ñ(v:SET)(w:SET)é z = (v ó w)";;
expand	(IMP_RES_TAC PF_t05);;
expand	(DEF_RES_TAC function);;
expand	(DEF_RES_TAC relation);;
expand (ASM_REWRITE_TAC[]);;
.he
.hd
%
lemma_proof "Ñ(v:SET)(w:SET)é z = (v ó w)"
	[IMP_RES_TAC PF_t05;
	DEF_RES_TAC function;
	DEF_RES_TAC relation];;
expand (ASM_REWRITE_TAC[]);;
%
.he
.sv "HOL output"
"(v ó w) ù y"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]
    [ "z ù x" ]
    [ "z = v ó w" ]
.sw
.hd
lemma_proof "(v ó w) ù x"
	[ACCEPT_TAC	(REWRITE_RULE [ASSUMP "z = v ó w"] (ASSUMP "z ù x"))];;

lemma_proof	"v ù (domain x)"
	[IMP_RES_TAC ZF2_thm7];;

lemma_proof "function_application x v = w"
	[IMP_RES_TAC (SPECL ["x:SET";"v:SET";"w:SET"] PF_t14);
	ASM_REWRITE_TAC[]];;

lemma_proof "function_application y v = w"
	[ASM_REWRITE_TAC[SYM (SPEC "v:SET" (ASSUMP
	"Ézé function_application x z = function_application y z"))]];;
.he
.hd
lemma_proof "function_application x v à ¥"
	[IMP_RES_THEN DEF_RES_TAC (SPECL["x:SET";"v:SET"]PF_t12)];;

lemma_proof "function_application y v à ¥"
  	[ACCEPT_TAC (REWRITE_RULE [SPEC "v:SET"
	(ASSUMP "Ézé function_application x z = function_application y z")]
	(ASSUMP "(function_application x v) à ¥"))];;

lemma_proof	"v ù (domain y)"
	[IMP_RES_TAC (SPECL ["y:SET";"v:SET"] PF_t12);
	ASM_REWRITE_TAC[]];;
.he
.sv "HOL output"
"(v ó w) ù y"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]
    [ "z ù x" ]
    [ "z = v ó w" ]
    [ "(v ó w) ù x" ]
    [ "v ù (domain x)" ]
    [ "function_application x v = w" ]
    [ "function_application y v = w" ]
    [ "(function_application x v) à ¥" ]
    [ "(function_application y v) à ¥" ]
    [ "v ù (domain y)" ]
.sw
.hd
expand (IMP_RES_TAC (SPECL ["y:SET";"v:SET";"w:SET"] PF_t14));;
expand (ACCEPT_TAC (REWRITE_RULE
		[ASSUMP "(function_application y v = w) = (v ó w) ù y"]
		(ASSUMP "function_application y v = w")));;
.he
.sv "HOL output"
Previous subproof:
"z ù x"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]
    [ "z ù y" ]
.sw
.hd
lemma "Ñ(v:SET)(w:SET)é z = (v ó w)";;
expand (EVERY
		[IMP_RES_TAC PF_t05;
		DEF_RES_TAC function;
		DEF_RES_TAC relation]);;
expand (ASM_REWRITE_TAC[]);;
.he
.sv "HOL output"
"(v ó w) ù x"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]
    [ "z ù y" ]
    [ "z = v ó w" ]
.sw
.hd
lemma_proof "(v ó w) ù y"
	[ACCEPT_TAC	(REWRITE_RULE [ASSUMP "z = v ó w"] (ASSUMP "z ù y"))];;

lemma_proof	"v ù (domain y)"
	[IMP_RES_TAC ZF2_thm7];;

lemma_proof "function_application x v = w"
	[IMP_RES_TAC (SPECL ["y:SET";"v:SET";"w:SET"] PF_t14);
	ASM_REWRITE_TAC[]];;

lemma_proof "function_application x v = w"
	[ASM_REWRITE_TAC[SYM (SPEC "v:SET" (ASSUMP
	"Ézé function_application x z = function_application y z"))]];;
.he
.hd
lemma_proof "function_application y v à ¥"
	[IMP_RES_THEN DEF_RES_TAC (SPECL["y:SET";"v:SET"]PF_t12)];;

lemma_proof "function_application x v à ¥"
  	[ACCEPT_TAC (REWRITE_RULE [SYM (SPEC "v:SET"
	(ASSUMP "Ézé function_application x z = function_application y z"))]
	(ASSUMP "(function_application y v) à ¥"))];;

lemma_proof	"v ù (domain x)"
	[IMP_RES_TAC (SPECL ["x:SET";"v:SET"] PF_t12);
	ASM_REWRITE_TAC[]];;
.he
.sv "HOL output"
"(v ó w) ù x"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "Ézé function_application x z = function_application y z" ]
    [ "z ù y" ]
    [ "z = v ó w" ]
    [ "(v ó w) ù y" ]
    [ "v ù (domain y)" ]
    [ "function_application x v = w" ]
    [ "(function_application y v) à ¥" ]
    [ "(function_application x v) à ¥" ]
    [ "v ù (domain x)" ]
.sw
.hd
expand (IMP_RES_TAC (SPECL ["x:SET";"v:SET";"w:SET"] PF_t14));;
expand (ACCEPT_TAC (REWRITE_RULE
	[ASSUMP "(function_application x v = w) = (v ó w) ù x"]
	(ASSUMP "function_application x v = w")));;
.he
.sv "HOL output"
goal proved
Ö Éx yé
    pure_function x ä pure_function y ä func_extensional x y
.sw
.hd
let PF_t15 = save_top_thm `PF_t15`;;
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)é pure_function x Ä pure_function y Ä y à ¥
		ä pure_function (unit (x ó y))
");;
expand (PURE_REWRITE_TAC [NE_DEF] THEN REPEAT STRIP_TAC);;
expand (TMP_TAC (SPEC "unit(x ó y)" (REWRITE_RULE [function_hereditary_DEF] PF_t01)));;
expand (REPEAT STRIP_TAC);;

expand (ACCEPT_TAC (SPEC_ALL ZF2_thm9));;
.he
.hd
expand (PURE_REWRITE_TAC [ì_DEF; image_DEF; ZF2]);;
expand (TAUT_REWRITE_TAC "å(a Ä b) = åa Å åb" THEN DISJ2_TAC THEN BETA_TAC);;
expand (PURE_REWRITE_TAC [ZF_thm9; ZF2_thm3]);;
expand (ASM_REWRITE_TAC[]);;
expand (UNDISCH_TAC "å(y = ¥)");;
expand (TAUT_REWRITE_TAC "åa ä åb = b ä a");;
expand (REPEAT STRIP_TAC THEN ASM_REWRITE_TAC []);;
.he
.hd
expand (RMP_TAC "(x' = x) Å (x' = y)");;
expand (STRIP_TAC THEN ASM_REWRITE_TAC[]);;
expand (STRIP_ASSUME_TAC (BETA_RULE
	(REWRITE_RULE [field_DEF; image_DEF; domain_DEF;
				ZF2; ZF_thm9; ZF_thm10; ZF2_thm3]
	(ASSUMP "x' ù (field(unit(x ó y)))")))
	THEN ASM_REWRITE_TAC[]);;
let PF_t16 = save_top_thm `PF_t16`;;
.he
.hd
set_goal([],"
	pure_function ¥
");;
expand (PURE_REWRITE_TAC [¥_DEF]);;
expand (TMP_TAC (SPECL ["§";"§"] PF_t16));;
expand (REWRITE_TAC [PF_t07; ¥_DEF; NE_DEF; ZF_le1]);;
expand (NOT_FORALL_TAC THEN EXISTS_TAC "§ ó §");;
expand (REWRITE_TAC [ZF_le2; ZF_thm9]);;
let PF_t17 = save_top_thm `PF_t17`;;
.he
.hd
%
set_goal([],"
	É(x:SET)(y:SET)é pure_function x Ä (y ù field x)
		ä pure_function y
");;
expand (REPEAT STRIP_TAC);;
%
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)é pure_function x ä pure_function y
		ä pure_function (function_application x y)
");;
expand (REPEAT STRIP_TAC);;
expand (ASM_CASES_TAC "y ù (domain x)" THEN ASM_REWRITE_TAC[]);;

lemma_proof "Ñz:SETé function_application x y = z"
	[EXISTS_TAC "function_application x y"; REWRITE_TAC[]];;

lemma_proof "(function_application x y = z) ä (y ó z) ù x"
	[IMP_RES_TAC PF_t14; ASM_REWRITE_TAC[]];;

expand RES_TAC;;
expand (ASM_REWRITE_TAC[]);;
expand (IMP_RES_TAC (SPECL ["y:SET";"z:SET";"x:SET"] ZF2_thm7));;

lemma_proof "z ù (field x)" [ASM_REWRITE_TAC [field_DEF; ZF_thm10]];;

expand (IMP_RES_TAC PF_t06);;

lemma_proof "function_application x y = ¥"
	[IMP_RES_THEN (DEF_RES_TAC o (TAUT_REWRITE_RULE
		"(a = åb) = (åa = b)") o (REWRITE_RULE [NE_DEF])) PF_t12];;

expand (ASM_REWRITE_TAC [PF_t17]);;

let PF_t18 = save_top_thm `PF_t18`;;
.he
.hd
set_goal([],"
	Éx:PFé pure_function (REP_PF x)
");;
expand (REWRITE_TAC [CONJUNCT2 DEF_PF]);;
expand (STRIP_TAC THEN EXISTS_TAC "x:PF" THEN REFL_TAC);;
let PF_t19 = save_top_thm `PF_t19`;;
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)é pure_function x Ä pure_function y
		ä (É(z:PF)é function_application x (REP_PF z)
				= function_application y (REP_PF z))
		ä (x = y)
");;
expand (REPEAT STRIP_TAC);;
lemma "É(w:SET)é function_application x w = function_application y w";;
expand (STRIP_TAC THEN ASM_CASES_TAC "pure_function w");;
lemma "Ñx'é w = REP_PF x'";;
  expand (DEF_RES_TAC (SPEC "w:SET" (CONJUNCT2 DEF_PF)));;
expand (ASM_REWRITE_TAC[]);;
.he
.hd
lemma "function_application x w = ¥";;
  lemma "å (w ù domain x)";;
    expand (IMP_RES_TAC PF_t06);;
    lemma "åw ù (field x)";;
      expand (STRIP_TAC THEN RES_TAC);;
    expand (UNDISCH_TAC "åw ù (field x)"
	THEN REWRITE_TAC [field_DEF; ZF_thm10]);;
    expand TAUT_TAC;;
  expand (IMP_RES_THEN (DEF_RES_TAC o
	(TAUT_REWRITE_RULE "(a = åb) = (åa = b)") o
	(REWRITE_RULE [NE_DEF])) (SPECL ["x:SET";"w:SET"] PF_t12));;
expand (ASM_REWRITE_TAC[]);;
.he
.hd
lemma "function_application y w = ¥";;
  lemma "å (w ù domain y)";;
    expand (IMP_RES_TAC PF_t06);;
    lemma "åw ù (field y)";;
      expand (STRIP_TAC THEN RES_TAC);;
    expand (UNDISCH_TAC "åw ù (field y)"
	THEN REWRITE_TAC [field_DEF; ZF_thm10]);;
    expand TAUT_TAC;;
  expand (IMP_RES_THEN (DEF_RES_TAC o
	(TAUT_REWRITE_RULE "(a = åb) = (åa = b)") o
	(REWRITE_RULE [NE_DEF])) (SPECL ["y:SET";"w:SET"] PF_t12));;
expand (ASM_REWRITE_TAC[]);;
.he
.hd
lemma_proof "func_extensional x y" [IMP_RES_TAC PF_t15];;
expand (DEF_RES_TAC func_extensional_DEF);;
expand (ASM_REWRITE_TAC[]);;
let PF_t20 = save_top_thm `PF_t20`;;
.he
.LP
.hd
set_goal([],"
	É(x:PF)(y:PF)é (x = y) = (É(z:PF)é x ≤ z = y ≤ z)
");;
expand (REPEAT STRIP_TAC THEN EQ_TAC);;
.he
.sv "HOL output"
2 subgoals
"(Ézé x ≤ z = y ≤ z) ä (x = y)"

"(x = y) ä (Ézé x ≤ z = y ≤ z)"
.sw
.hd
expand (REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[]);;
.he
.sv "HOL output"
goal proved
Ö (x = y) ä (Ézé x ≤ z = y ≤ z)

Previous subproof:
"(Ézé x ≤ z = y ≤ z) ä (x = y)"
.sw
.hd
expand (REWRITE_TAC [PF_t09;≤_DEF;ó≤_DEF;¥≤_DEF;lift_binop_DEF]);;
expand BETA_TAC;;
.he
.hd
lemma "(É(y:PF)(z:PF)éREP_PF(ABS_PF(function_application(REP_PF y)(REP_PF z))) =
       function_application(REP_PF y)(REP_PF z))
";;
  expand (STRIP_TAC THEN STRIP_TAC);;
  lemma_proof "pure_function (REP_PF x)" [REWRITE_TAC [PF_t19]];;
  lemma_proof "pure_function (REP_PF y)" [REWRITE_TAC [PF_t19]];;
  lemma_proof "pure_function (REP_PF z)" [REWRITE_TAC [PF_t19]];;
  lemma_proof "pure_function (function_application(REP_PF x)(REP_PF z))"
	[IMP_RES_TAC PF_t18];;
  lemma_proof "pure_function (function_application(REP_PF y)(REP_PF z))"
	[IMP_RES_TAC PF_t18];;
  expand (IMP_RES_TAC PF_t10);;
.he
.hd
expand (ASM_REWRITE_TAC[]);;
lemma_proof "pure_function (REP_PF x)" [REWRITE_TAC [PF_t19]];;
lemma_proof "pure_function (REP_PF y)" [REWRITE_TAC [PF_t19]];;
expand (IMP_RES_TAC PF_t20);;
let PF_t21 = save_top_thm `PF_t21`;;
.he
.NH
˝, the everywhere undefined function
.LP
This is a primitive.
.hd
set_goal([],"
	É(x:PF)é ˝ ≤ x = ¥≤
");;
expand (REWRITE_TAC[˝_DEF; ≤_DEF; lift_binop_DEF;¥≤_DEF; ó≤_DEF; ¥_DEF; unit_map_DEF]
		THEN BETA_TAC THEN STRIP_TAC);;
lemma_proof	"pure_function §"		[ACCEPT_TAC PF_t07];;
expand (IMP_RES_TAC PF_t10 THEN ASM_REWRITE_TAC[]);;
lemma_proof	"å(REP_PF x) ù (domain §)"
		[REWRITE_TAC [domain_DEF; ZF2; ZF_le2]];;
lemma_proof "function_application §(REP_PF x) = unit(§ ó §)"
	[IMP_RES_THEN
		(DEF_RES_TAC o TAUT_REWRITE_RULE "(a = åb) = (åa = b)")
		(REWRITE_RULE [NE_DEF; ¥_DEF] PF_t12)];;
expand (ASM_REWRITE_TAC []);;
expand (ASM_CASES_TAC "unit(§ ó §) = §" THEN ASM_REWRITE_TAC[]);;
lemma "å(§ = unit(§ ó §))";;
  expand (UNDISCH_TAC"å(unit(§ ó §) = §)"
	THEN TAUT_REWRITE_TAC "åa ä åb = b ä a"
	THEN STRIP_TAC);;
expand (CONV_TAC SYM_CONV THEN ACCEPT_TAC (ASSUMP "§ = unit(§ ó §)"));;
expand (ASM_REWRITE_TAC[]);;

let PF_t22 = save_top_thm `PF_t22`;;
.he
.NH
ó≤, the unit map
.LP
This is also primitive.
.LP
The following lemma will be useful in establishing the important properties.
.hd
set_goal([],"
	É(x:SET)(y:SET)(z:SET)é	pure_function x Ä pure_function y
	ä pure_function (unit_map x y)
");;
expand (EVERY[	REPEAT STRIP_TAC;
			REWRITE_TAC [unit_map_DEF]]);;
.he
.sv "HOL output"
"pure_function((y = ¥) => § | unit(x ó y))"
    [ "pure_function x" ]
    [ "pure_function y" ]
.sw
.hd
expand (ASM_CASES_TAC "y = ¥" THEN ASM_REWRITE_TAC[]);;
.he
.sv "HOL output"
2 subgoals
"pure_function(unit(x ó y))"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "å(y = ¥)" ]

"pure_function §"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "y = ¥" ]
.sw
.hd
expand (ACCEPT_TAC PF_t07);;
.he
.sv "HOL output"
goal proved
Ö pure_function §

Previous subproof:
"pure_function(unit(x ó y))"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "å(y = ¥)" ]
.sw
.hd
expand (IMP_RES_TAC (REWRITE_RULE [NE_DEF] PF_t16));;
.he
.sv "HOL output"
goal proved
Ö Éx y zé
    pure_function x Ä pure_function y ä
    pure_function(unit_map x y)
.sw
.hd
let PF_t23 = save_top_thm `PF_t23`;;
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)(z:SET)é å(y ù (domain x))
	ä (function_application x y = ¥)
");;
expand (REPEAT STRIP_TAC THEN ASM_REWRITE_TAC [function_application_DEF]);;
let PF_t24 = save_top_thm `PF_t24`;;
.he
.hd
set_goal([],"
	É(x:SET)(y:SET)(z:SET)é	pure_function x Ä pure_function y
	ä (function_application (unit_map x y) z = ((z = x) => y | ¥))
");;
expand (REPEAT STRIP_TAC);;
expand (ASM_CASES_TAC "z ù domain(unit_map x y)");;
.he
.sv "HOL output"
2 subgoals
"function_application(unit_map x y)z = ((z = x) => y | ¥)"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "åz ù (domain(unit_map x y))" ]

"function_application(unit_map x y)z = ((z = x) => y | ¥)"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "z ù (domain(unit_map x y))" ]
.sw
.hd
lemma "(function_application (unit_map x y) z = ((z = x) => y | ¥))
		= (z ó ((z = x) => y | ¥)) ù (unit_map x y)";;
lemma_proof "pure_function (unit_map x y)" [IMP_RES_TAC PF_t23];;
lemma_proof "function (unit_map x y)" [IMP_RES_TAC PF_t05];;
expand (IMP_RES_TAC (SPECL ["unit_map x y";"z";"(z = x) => y | ¥"] PF_t13));;
.he
.sv "HOL output"
goal proved
Previous subproof:
"function_application(unit_map x y)z = ((z = x) => y | ¥)"
    [ "pure_function x" ]
    [ "pure_function y" ]
    [ "z ù (domain(unit_map x y))" ]
    [ "(function_application(unit_map x y)z = ((z = x) => y | ¥)) =
       (z ó ((z = x) => y | ¥)) ù (unit_map x y)" ]
.sw
.hd
expand (ASM_REWRITE_TAC[]);;
expand (REWRITE_TAC [unit_map_DEF]);;
lemma "å(y = ¥)";;
	expand STRIP_TAC;;
	lemma_proof "unit_map x y = §" [ASM_REWRITE_TAC [unit_map_DEF]];;
	expand (ACCEPT_TAC ((BETA_RULE o REWRITE_RULE
		[ASSUMP "unit_map x y = §"; domain_DEF; ZF2; ZF_le2])
		(ASSUMP "z ù (domain(unit_map x y))")));;
.he
.hd
expand (ASM_REWRITE_TAC[ZF_thm9; ZF2_thm3]);;
expand (MP_TAC ((CONJUNCT2 o BETA_RULE o REWRITE_RULE
	[domain_DEF; ZF2; ZF_le2; ZF_thm9; ZF2_thm3;
		unit_map_DEF; ASSUMP "å(y = ¥)"])
		(ASSUMP "z ù (domain(unit_map x y))")));;
expand (STRIP_TAC THEN ASM_REWRITE_TAC[]);;

expand (IMP_RES_TAC PF_t24 THEN ASM_REWRITE_TAC[]);;
expand (ASM_CASES_TAC "(z = x)");;
expand (ASM_REWRITE_TAC[]);;
expand (UNDISCH_TAC "åz ù (domain(unit_map x y))"
	THEN TAUT_REWRITE_TAC "åa ä b = åb ä a"
	THEN ASM_REWRITE_TAC
	[domain_DEF; unit_map_DEF; ZF2]);;
expand (SUBST1_TAC (SYM_CONV "¥ = y"));;
expand (STRIP_TAC THEN ASM_REWRITE_TAC[]);;
expand (BETA_TAC THEN ASM_REWRITE_TAC[unit_map_DEF;ZF6]);;
expand STRIP_TAC;;
expand (REWRITE_TAC[ZF6; ZF_thm9; ZF2_thm3]);;
expand (EXISTS_TAC "pair x y" THEN REWRITE_TAC[]);;
expand (REWRITE_TAC[ZF5] THEN EXISTS_TAC "x ó y");;
expand (REWRITE_TAC [ó_DEF; ZF5]);;

expand (EXISTS_TAC "y:SET" THEN ASM_REWRITE_TAC[unit_map_DEF;ZF_thm9]);;

expand (ASM_REWRITE_TAC[]);;
let PF_t25 = save_top_thm `PF_t25`;;
.he
.hd
set_goal([],"
	¥≤ = ABS_PF ¥
");;
expand (REWRITE_TAC[¥≤_DEF;ó≤_DEF; ˝_DEF; unit_map_DEF;
		lift_binop_DEF; ¥_DEF]);;
expand BETA_TAC;;
expand (ASSUME_TAC PF_t07);;
expand (IMP_RES_TAC PF_t10);;
expand (ASM_REWRITE_TAC[]);;
lemma  "å (§ = unit(§ ó §))";;
	expand STRIP_TAC;;
	lemma "(§ ó §) ù §";;
		lemma "(§ ó §) ù unit(§ ó §)";;
			expand (REWRITE_TAC [ZF_thm9]);;
		expand (ACCEPT_TAC (REWRITE_RULE
			[SYM (ASSUMP "§ = unit(§ ó §)")]
			(ASSUMP "(§ ó §) ù (unit(§ ó §))")));;
		expand (MP_TAC (ASSUMP "(§ ó §) ù §") THEN REWRITE_TAC [ZF_le2]);;
expand (ASM_REWRITE_TAC[]);;
let PF_t26 = save_top_thm `PF_t26`;;
.he
.hd
set_goal([],"
	É(x:PF)(y:PF)(z:PF)é (x ó≤ y) ≤ z = ((z = x) => y | ¥≤)
");;
expand (EVERY [	REPEAT STRIP_TAC;
			REWRITE_TAC [ó≤_DEF; ≤_DEF; lift_binop_DEF];
			BETA_TAC]);;
lemma_proof "pure_function (REP_PF x)"
	[REWRITE_TAC [DEF_PF]; EXISTS_TAC "x"; REFL_TAC];;
lemma_proof "pure_function (REP_PF y)"
	[REWRITE_TAC [DEF_PF]; EXISTS_TAC "y"; REFL_TAC];;
lemma_proof "function_application(unit_map(REP_PF x)(REP_PF y))(REP_PF z) =
       ((REP_PF z = REP_PF x) => REP_PF y | ¥)"
	[IMP_RES_TAC (SPECL ["REP_PF x";"REP_PF y";"REP_PF z"] PF_t25)];;
lemma "REP_PF (ABS_PF (unit_map(REP_PF x)(REP_PF y)))
		= unit_map(REP_PF x)(REP_PF y)";;
	lemma_proof "pure_function (unit_map(REP_PF x)(REP_PF y))"
			[IMP_RES_TAC PF_t23];;
	expand (IMP_RES_TAC PF_t10);;
expand (ASM_REWRITE_TAC[]);;
expand (ASM_CASES_TAC "z = x");;
expand (ASM_REWRITE_TAC[PF_t11]);;
expand (ASM_REWRITE_TAC[]);;
expand (ASM_REWRITE_TAC [SYM (SPECL ["z:PF";"x:PF"] PF_t09); PF_t26]);;
let PF_t27 = save_top_thm `PF_t27`;;
.he
.NH
THE END
.hd
close_theory`pf123`;;
print_theory`pf123`;;
.he
.KS
.NH
THE THEORY pf123
.LP
.DS L
The Theory pf123
Parents --  ZF2     ZF2     
Types --  ":PF"     
Constants --
  ¥ ":SET"     function_hereditary ":(SET ã bool) ã bool"
  pure_function ":SET ã bool"     REP_PF ":PF ã SET"
  ABS_PF ":SET ã PF"     lift_monop ":(SET ã SET) ã (PF ã PF)"
  lift_binop ":(SET ã (SET ã SET)) ã (PF ã (PF ã PF))"
  ˝ ":PF"     unit_map ":SET ã (SET ã SET)"     ¥≤ ":PF"
  T≤ ":PF"     truef ":SET"     set_to_type ":SET ã SET"
  monop_set_to_type ":(SET ã SET) ã (SET ã SET)"
  dom ":PF ã PF"     ran ":PF ã PF"     fie ":PF ã PF"
  function_application ":SET ã (SET ã SET)"
  func_extensional ":SET ã (SET ã bool)"     
Curried Infixes --
  ó≤ ":PF ã (PF ã PF)"     ≤ ":PF ã (PF ã PF)"     
Axioms --
  DEF_PF
    Ö ONE_ONE REP_PF Ä (Éxé pure_function x = (Ñx'é x = REP_PF x'))
  
Definitions --
  ¥_DEF  Ö ¥ = unit(§ ó §)
  function_hereditary_DEF
    Ö function_hereditary p =
       (Éfé
         function f Ä
         ¥ ì (image f) Ä
         (Éxé x ù (field f) ä p x) ä
         p f)
  pure_function_DEF
    Ö pure_function s = (Épé function_hereditary p ä p s)
  ABS_PF_DEF  Ö ABS_PF s = (ápé REP_PF p = s)
  lift_monop_DEF  Ö lift_monop f = (çxé ABS_PF(f(REP_PF x)))
  lift_binop_DEF
    Ö lift_binop f = (çx yé ABS_PF(f(REP_PF x)(REP_PF y)))
  ˝_DEF  Ö ˝ = ABS_PF §
  unit_map_DEF  Ö unit_map x y = ((y = ¥) => § | unit(x ó y))
  ó≤_DEF  Ö $ó≤ = lift_binop unit_map
  ¥≤_DEF  Ö ¥≤ = ˝ ó≤ ˝
  T≤_DEF  Ö T≤ = ¥≤ ó≤ ˝
  truef_DEF  Ö truef = REP_PF T≤
  set_to_type_DEF  Ö set_to_type s = s ™ (unit(REP_PF T≤))
  monop_set_to_type_DEF  Ö monop_set_to_type o = (çsé set_to_type(o s))
  dom_DEF  Ö dom = lift_monop(monop_set_to_type domain)
  ran_DEF  Ö ran = lift_monop(monop_set_to_type image)
  fie_DEF  Ö fie = lift_monop(monop_set_to_type field)
  function_application_DEF
    Ö function_application f a = (a ù (domain f) => f © a | ¥)
  ≤_DEF  Ö $≤ = lift_binop function_application
  func_extensional_DEF
    Ö func_extensional x y =
       ((x = y) =
        (Ézé function_application x z = function_application y z))
  
Theorems --
  PF_t01  Ö function_hereditary pure_function
  PF_t02  Ö Épé function_hereditary p ä (Éxé pure_function x ä p x)
  PF_t03  Ö function_hereditary function
  PF_t04  Ö function_hereditary(çxé ¥ ì (image x))
  PF_t05  Ö Éxé pure_function x ä function x Ä ¥ ì (image x)
  PF_t06
    Ö Éxé
        pure_function x ä (Éyé y ù (field x) ä pure_function y)
  PF_t07  Ö pure_function §
  PF_t08  Ö Ñxé pure_function x
  PF_t09  Ö Éx yé (x = y) = (REP_PF x = REP_PF y)
  PF_t10  Ö pure_function x ä (REP_PF(ABS_PF x) = x)
  PF_t11  Ö Éxé ABS_PF(REP_PF x) = x
  PF_t12
    Ö Éx yé
        pure_function x ä
        (y ù (domain x) = (function_application x y) à ¥)
  PF_t13
    Ö Éx y zé
        function x Ä y ù (domain x) ä
        ((function_application x y = z) = (y ó z) ù x)
  PF_t14
    Ö Éx y zé
        pure_function x Ä y ù (domain x) ä
        ((function_application x y = z) = (y ó z) ù x)
  PF_t15
    Ö Éx yé
        pure_function x ä pure_function y ä func_extensional x y
  PF_t16
    Ö Éx yé
        pure_function x Ä pure_function y Ä y à ¥ ä
        pure_function(unit(x ó y))
  PF_t17  Ö pure_function ¥
  PF_t18
    Ö Éx yé
        pure_function x ä
        pure_function y ä
        pure_function(function_application x y)
  PF_t19  Ö Éxé pure_function(REP_PF x)
  PF_t20
    Ö Éx yé
        pure_function x Ä pure_function y ä
        (Ézé
          function_application x(REP_PF z) =
          function_application y(REP_PF z)) ä
        (x = y)
  PF_t21  Ö Éx yé (x = y) = (Ézé x ≤ z = y ≤ z)
  PF_t22  Ö Éxé ˝ ≤ x = ¥≤
  PF_t23
    Ö Éx y zé
        pure_function x Ä pure_function y ä
        pure_function(unit_map x y)
  PF_t24
    Ö Éx y zé åy ù (domain x) ä (function_application x y = ¥)
  PF_t25
    Ö Éx y zé
        pure_function x Ä pure_function y ä
        (function_application(unit_map x y)z = ((z = x) => y | ¥))
  PF_t26  Ö ¥≤ = ABS_PF ¥
  PF_t27  Ö Éx y zé (x ó≤ y) ≤ z = ((z = x) => y | ¥≤)
.DE
.KE
