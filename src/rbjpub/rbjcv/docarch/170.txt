.nr PS 11
.nr VS 14
.so /escher/usr2/projects/infra/msmacros/roff2.defs
.so /escher/usr2/projects/infra/msmacros/lroff2.defs
.nr P 1 Presentation Flag
.nr D 0 Document Flag
.LP
.TL
Development Methods for Secure Systems
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB
.ct D
.cx
.ct P
This document consists of the overheads for a presentation to
the refinement workshop on March 13 1990.
.cx
.AE
.ds LH \s-8\s+8
.ds CH \s-9\s-9170/\\n(PN\s+9\s+9
.ds RH \s-8\s+8
.ds LF \s-9DS/FMU/RBJ/170\s+9
.ds CF \s-2\s+2
.ds RF \s-9Issue 0.3 \*(DY Page \\n(PN\s+9
.ct P
.nr PS 22
.nr VS 26
.cx
.bp
.KS
.DS C
\fBPRIMARY CURRENT CONCERNS\fP






BROAD SPECTRUM SOFTWARE ENGINEERING



FULL FUNCTIONAL REQUIREMENTS



RIGOROUS PROOF



.DE
.KE
.KS
.DS C
\fBINTERESTS TO ENCOURAGE\fP


HIGH ASSURANCE APPLICATIONS


CRITICAL REQUIREMENTS ANALYSIS


PROPERTIES AS SPECIFICATIONS


FORMAL PROOFS OF CRITICAL REQUIREMENTS


\fBsubproblems\fP


Formalisation of correctness proofs


consistency of specifications


proof theory and tools

.DE
.KE
.KS
.DS C
\fBMORE EXOTIC ONES\fP








ULTRA HIGH ASSURANCE
(e.g. UKL9 and above)


.DE
.KE
.KS
.DS C

\fB


The OWR

must constrain information flow

from its `high' interface to its `low' interface

to less than 5 bits per second





(statement of requirements
\fP
or
\fB
policy
\fP
or
\fB
specification)\fP
.DE
.KE
.KS
.DS C





The OWR \fBdoes\fP

constrain information flow...






statement of \fIconformance\fP

\fIcorrectness\fP proposition

\fIcorrespondence\fP proposition
.DE
.KE
.KS
.DS C
\s+9\fB



FORMALISE



the



CORRECTNESS



PROPOSITION



\s-9\fP
.DE
.KE
.KS
.DS C
Such a proposition
would traditionally be analysed
as having \fB\s+2subject-predicate\s-2\fP form.


"\fIthe OWR\fP"
is the subject,

"\fIconstrains the information flow...\fP"
is the predicate


.DE
.LP
predicates are \fIformally\fP represented:
.RS

.IP \(bu
in the predicate calculus:
.RS
.IP
as \fIpredicates\fP!

.RE
.IP \(bu
in simple type theory:
.RS
.IP
as \fIpropositional functions\fP

.RE
.IP \(bu
in set theory:
.RS
.IP
as \fIsets\fP
.RE
.RE
.DE
.KE
.KS
.DS C
\s+9\fB







\fBPREDICATES




are




PROPERTIES\fP
\s-9\fP
.DE
.KE
.KS
.DS C
In a TYPED, CLASSICAL language

(e.g. Z or HOL)

a property (e.g. \fIsecure\fP) must be expressed
over some type (say \fIOWR\fP), then:

secure : ë OWR

or

secure : OWR ã bool


a system, \fIowr\fP,
purporting to have the property,
must have the \fBunderlying\fP type (\fIOWR\fP)


\fBThe specification has a type
distinct from that of the entities specified.\fP

secure: ë OWR
owr: OWR
.DE
.KE
.KS
.DS C






The correctness proposition:



Ö?	owr ù secure

or

Ö?	secure owr
.DE
.KE
.KS
.DS C





\fB

(critical requirements)
\s+9
SPECIFICATIONS



ARE
\s-9(should be?)\s+9



PROPERTIES
\s-9
(or sets if you like)
\fP

.DE
.KE
.KS
.DS C
\fB\s+9\s+6



ICL METHODS



FOR



SECURE SYSTEMS



DEVELOPMENT

\s-9\s-6\fP



presented by

Roger Bishop Jones
.DE
.KE
.KS
.DS C
\fBThe ICL Defence Systems
HIGH ASSURANCE TEAM\fP

Began as "FORMAL METHODS UNIT"
established in 1985 by Roger Stokes
.DE
.DS L
SLOGAN:
.DE
.DS C
working on real problems
with real tools
.DE
.DS L
CURRENT TEAM:
.DE
.DS C
\fBDr. Rob Arthan\fP
(tools)
\fBDr. Kevin Blackburn\fP
(proof technology and secure applications)
\fBAdrian Hammon\fP
(proof HCI and secure applications)
\fBDr. Barry Homer\fP
(security modelling)
\fBRoger Jones\fP
(leader, foundations)
\fBGeoff Scullard\fP
(hardware verification)
\fBRoger Stokes\fP
(methods)
.DE
.KE
.nr PS 24
.nr VS 28
.KS
.DS C
\s+4\fBBACKGROUND\fP\s-4
(Apologies for lack of Elegance)


UK/USA evaluation guidelines

intelligibility/fidelity/tractability

expressibility of correctness proposition

provability in HOL

consistency of specification

the problem of instantiation

requirement for `conventional' FTLS

reality/ideals
which reality?
.DE
.KE
.KS
.DS C
\s+4\fBOBJECTIVES\fP\s-4


To DEVELOP
\s+2\fBSECURE\fP\s-2 
SYSTEMS.


To achieve
`HIGH LEVELS of ASSURANCE'
that SYSTEMS developed ARE SECURE.


.DE
.LP
`LEVEL of ASSURANCE' is DEFINED in CESG evaluation guidelines.


.LP
Current focus is on \s+4UK LEVEL 6\s-4.


.KE
.nr PS 20
.nr VS 24
.KS
.DS C
\s+4\fBSTATEMENT of PROBLEM\fP\s-4


.IP (a)
Formalise Security Requirements

.IP (b)
Produce a formal description (specification) of a system meeting the security (and other) requirements.

.IP (c)
Produce a (formal machine checked) proof that the system specified meets the requirements stated.



.LP
In other words:

.IP (a)
Write Security Policy Model (SPM)

.IP (b)
Write Formal Top Level Specification (FTLS)

.IP (c)
Prove that the system described by the FTLS meets the requirements expressed in the SPM.

.DE
.KE
.KS
.DS C
\s+4\fBCONSTRAINTS on SOLUTION\fP\s-4


MODEL must
CAPTURE FLOW CONSTRAINTS

(because these are part of
the customers requirements)




the TARGET SYSTEM must be DETERMINISTIC




The FTLS must ultimately be
in the `conventional' style

(a collection of schemas describing
the operations of the system,
refinable by `standard' techniques)
.DE
.KE
.KS


.LP
\fBTHE METHOD PRESCRIBES:\fP



.IP 1
Form of Security Policy Model



.IP 2
Form of FTLS



.IP 3
How to interpret the FTLS in terms of the SPM



.IP 4
Form of Correctness Proposition asserting that the system described by the FTLS conforms to the policy prescribed in the SPM.
.LP
.KE
.KS
.DS C
\fBFORM of SECURITY POLICY MODEL\fP
.IP \(bu
Requirements are expressed in the Security Policy Model as a \fBPROPERTY\fP
over some suitable `base' type (e.g. AUTO).

.IP \(bu
The base type is typically a generic schema type, the components of which include:

.RS
.IP (a)
A complete BEHAVIOURAL MODEL of target system.
.IP
(e.g., \fItf\fP : IN â STATE ã STATE â OUT)

.IP (b)
`Abstraction' maps showing how some of the generic types may be interpreted in terms suitable for the expression of the policy.
.IP
(e.g. \fIfiles\fP : STATE ã (NAME ñ DATA),
\fIclass\fP :STATE ã (NAME ñ CLASS))

.IP (c)
Any OTHER INFORMATION necessary to express the security requirements which will vary from one target system to another.
.IP
(e.g. \fIdom\fP : CLASS ê CLASS)
.RE
.IP \(bu
The properties include information flow constraints and other requirements
 (secure : ë AUTO).
.LP
.DE
.KE
.bp
.KS
.DS C
\s+4\fBFORM of FTLS\fP\s-4



.DE
.IP (a)
A collection of schemas describing operations over some suitable STATE.


.IP (b)
The operations must be TOTAL and DETERMINISTIC


.IP (c)
They may be loosely specified.



.LP
An understanding of the distinction between NON-DETERMINISM and LOOSENESS (sometimes called UNDERSPECIFICATION) and of how to write LOOSE descriptions of DETERMINISTIC operations is essential.
.LP
See SPIVEY "UNDERSTANDING Z" Section 5.3.
.DE
.KE
.KS
.DS C
\fBINTERPRETATION by DIRECT CONSTRUCTION\fB


.DE
.IP \(bu
We need to construct an entity of some instance of `Base type' (AUTO) which corresponds to the system defined in the FTLS.

.LP
This involves:

.IP (a)
Coercing the behavioural description to a suitable type.
.IP
(an instance of \fIIN â STATE ã STATE â OUT\fP)

.IP (b)
Supplying interpretive maps for particular types used (abstraction maps).
.IP
(define \fIfiles\fP and \fIclass\fP)

.IP (c)
Supplying auxiliary information (e.g. dominance relation).
.IP
(define \fIdom\fP)

.IP (d)
Combining these into a schema binding.
.IP
(\fIsystem : AUTO[..] | ...\fP)
.LP
.DE
.KE
.KS
.DS C
\fBINDIRECT INTERPRETATION\fP

.DE
.LP
Interpretation may be done in stages.

.LP
In this case:


.RS
.IP
An entity of some other type (\fIsystem:SYSTEM\fP) is constructed from the FTLS in a manner similar to the above.

.IP
An interpretation map is defined showing how entities of type \fISYSTEM\fP may be interpreted as entities of type \fIAUTO\fP.

.IP
(\fIinterpret\fP: SYSTEM ã AUTO[...])
.RE


.LP
Further intermediate systems may be used if necessary, in which case the interpretation will occur through the composition of more than one interpretation map.
.KE
.KS
.DS C
\fBTHE CORRESPONDENCE PROPOSITION\fP

.DE
.LP
The proposition to be proven is the proposition that the entity defined in the FTLS when interpreted as an \fIAUTO\fP is \fIsecure\fP.




.DS C
interpret(system) ù secure
.DE
.KE
.KS
.DS C
\s+4\fBMETHODS of `REFINEMENT'\fP\s-4



By ADDING REQUIREMENTS



By INSTANTIATION
of security model



By STRUCTURAL DECOMPOSITION
of behavioural model
(maintaining separation of critical properties)



By INTERPRETATION
of target system model
in terms of security model



By `conventional' methods
from FTLS schemas down
.DE
.KE
