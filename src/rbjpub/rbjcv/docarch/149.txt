.nr PS 11
.nr VS 14
.so roff2.defs
.so lroff2.defs
.nr P 1 Presentation Flag
.nr D 0 Document Flag
.LP
.TL
Formal Derivation of Proof Rules
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB
.ct D
.cx
.ct P
.cx
.AE
.ds LH 
.ds CH 
.ds RH 
.ds LF \s-9DS/FMU/RBJ/149\s+9
.ds CF 
.ds RF \s-9Issue 0.1 Page \\n(PN\s+9
.nr PS 20
.nr VS 24
.bp
.KS
.DS C
\fBVDM-SL PROOF THEORY INVESTIGATIONS\fP


OBJECTIVES



CONSISTENCY, TERMINATION
and
PROOF THEORETIC STRENGTH



STAGES in
FORMAL DEVELOPMENT



DETAILS of
FORMAL THEORIES



CONCLUSIONS from
WORK TO DATE
.DE
.KE
.bp
.KS
.DS C
\fBOBJECTIVES\fP



To FACILITATE the USE OF VDM-SL
in developments involving
FORMAL MACHINE CHECKED PROOF
of
CRITICAL PROPERTIES




To INVESTIGATE the FEASIBILITY
of FORMAL DERIVATION of
PROOF RULES from SEMANTICS




To BROADEN APPLICABILITY
and CONTAIN COMPLEXITY
by DEFERRING SPECIALISATION
.DE
.KE
.bp
.KS
.DS C
\fBCONSISTENCY, TERMINATION
and
PROOF THEORETIC STRENGTH\fP





We are concerned to ensure the
LOGICAL CONSISTENCY of:



The LOGICAL FOUNDATIONS


User APPLICATION THEORIES




Unless we are assured of their consistency then
NO VALUE
can be attached to any proofs obtained.
.DE
.KE
.bp
.KS
.DS C
\fBAPPLICATION THEORIES\fP


Since CONSISTENCY of EXTENSIONS
will NOT be DECIDABLE


it will be NECESSARY to PROVIDE for
their CONSISTENCY to BE PROVABLE
WITHIN the logical SYSTEM



In order that this be possible as often as possible,
a logical system with
high "PROOF THEORETIC STRENGTH"
is needed.



Proof Theoretic Strength
∑
Cardinality of Universe

.DE
.KE
.bp
.KS
.DS C


\fBHIGH PROOF THEORETIC STRENGTH\fP


ä



more SPECIFICATIONS can be SHOWN CONSISTENT


more PROGRAMS can be SHOWN TO TERMINATE


PROOFS can be SHORTER




all of these follow from Goedel's theorems.
.DE
.KE
.bp
.KS
.DS C
\fBOBSERVATIONS on COMPLEXITY\fP
.DE
.DS L
Mike Gordon's HOL logic has:
.DE
.RS
.IP
7 clause abstract syntax
.IP
3 primitive type constructors (bool, ind, ã)
.IP
2 type inference rules
.IP
3 primitive constants (=, ä, á)
.IP
5 axioms
.IP
8 primitive inference rules
.RE

.LP
It is closely related to Church's simple theory of types.
.LP
YET, since its development in 1985, SEVERAL problems in the formulation
or implementation of this logic have been found which permit the derivation
of contradictions.
.DS C

VDM-SL will be MORE COMPLEX
by AT LEAST a FACTOR of TEN

HOW DO WE ENSURE that VDM-SL IS SUPPORTED
by SOUND PROOF DEVELOPMENT TOOLS?
.DE
.KE
.bp
.KS
.DS C
\fBHOW DO WE ENSURE that VDM-SL IS SUPPORTED
by SOUND PROOF DEVELOPMENT TOOLS?\fP


PROVIDE FORMAL SEMANTICS
in
CLASSICAL SET THEORY (ZFC)



ENSURE that
the UNIVERSE of VDM-SL
is
WELL POPULATED


MECHANICALLY DERIVE PROOF RULES
from
PROOF RULES for SET THEORY



FORMALISATION of SEMANTICS
and
DEVELOPMENT of PROOF THEORY
must be
CONCURRENT and CLOSELY COUPLED
.DE
.KE
.bp
.KS
.DS C
\fBESTABLISHING the
CONSISTENCY of FOUNDATION SYSTEMs\fP




To PROVE the CONSISTENCY of a system
it is necessary to work with a META-LOGIC which has
GREATER PROOF THEORETIC STRENGTH






Since
the CONSISTENCY of the META-LOGIC
may be questioned,
it is desirable to CHOSE a SYSTEM directly RELATED
TO well ESTABLISHED FOUNDATIONS

e.g. ZFC

.DE
.KE
.bp
.KS
.DS C
\fBSTAGES in FORMAL DEVELOPMENT\fP



.DE
.LP
.RS
.IP 1
formalise ZFC in HOL



.IP 2
change PRIMITIVES to FUNCTIONS



.IP 3
introduce POLYMORPHISM



.IP 4
introduce STRUCTURING



.IP 5
TYPES?
.RE
.DE
.KE
.bp
.KS
.DS C
\fBREPRESENTATIONS of TYPES(1)\fP



.DE
.LP
.IP 1
ZFC is AXIOMATISED over type ":SET" which is a new PRIMITIVE




.IP 2
PURE FUNCTIONS are type ":PPF", a subtype of ":SET"
.LP
.DS L


function_hereditary_DEF
  Ö function_hereditary p =
     (Éfé	function f Ä
      	 ¥÷ ì÷ (image f) Ä
       	(Éxé x ù÷ (field÷ f) ä p x) ä
       	p f)
pure_function_DEF
  Ö pure_function s = (Épé function_hereditary p ä p s)
.DE
.KE
.bp
.KS
.DS C
\fBREPRESENTATIONS of TYPES(2)\fP


.DE
.IP 3
POLYMORPHIC PURE FUNCTIONS are type ":PPF", and are represented
by objects of type ":PFãPF"






.IP 4
STRUCTURED POLYMORPHIC FUNCTIONS are type ":SPF", and are represented by `REGULAR' functions of type ":PPFãPPF"
.DS L
regular
  Ö regular ppfun = (Épfé Ñpfuné Éppfé
	REP_PPF(ppfun ppf)pf = pfun(REP_PPF ppf pf))
.DE
.KE
.bp
.KS
.DS C
\fBKEY PRIMITIVES\fP

.DE
.LP
.RS
.IP 1
ZFC
.IP
membership ù÷, separation ˜÷

.IP 2
PF
.IP
application ≤ , abstraction ¯≤

.IP 3
PPF
.IP
application ‘ , abstraction ¯‘,
.br
type-vars Tv‘,
.br
type-instantiation ”‘,
.br
type-env Te‘

.IP 4
SPF
.IP
application ’ , abstraction ¯’,
.br
type-vars Tv’, individual-vars Iv’,
.br
type-instantiation ”’, value-instantiation ””’,
.br
type-env Te’, value-env Ie’
.RE
.KE
.bp
.KS
.DS C
\fBTHE AXIOMS of ZERMELO FRAENKEL\fP


.DE
.LP
There are three main sorts of axiom:

.IP 1
LOGICAL axioms (including =)

.IP 2
axioms CHARACTERISING SETS

.IP
\s-2Extensionality and well foundedness.\s+2

.IP 3
axioms CHARACTERISING ABSTRACTION

.IP
\s-2The axiom of separation.\s+2

.IP 4
POPULATING axioms

.IP
\s-2i.e. axioms which assert the existence of various sets.\s+2


.LP
This broad pattern is followed by all the foundation systems which we discuss below.
.KE
.bp
.KS
.DS C
\fBHOL-ZFC PRIMITIVES\fP

.DE
.DS L
Types				":SET"

Constants:

Membership	ù÷	":SET ã (SET ã bool)"

Separation		˜÷	":SET ã
					((SET ã bool) ã SET)"

Empty set		§÷	":SET"
	
Power set		ë	":SET ã SET"

Pair constructor	pair	":SET ã (SET ã SET)"

Union		£÷	":SET ã SET"

Natural numbers	ˇ	":SET"

Choice function	˛	":SET ã SET"
.DE
.KE
.bp
.KS
.DS C
\fBHOL-ZFC DEFINED CONSTANTS\fP

.DE
.DS L
Unit set		unit	":SET ã SET"

Intersection		¢÷	":SET ã SET"

Inclusion		•÷	":SET ã (SET ã bool)"

Intersection		†÷	":SET ã (SET ã SET)"

Successor		suc	":SET ã SET"

Transitive		Trans	":SET ã bool"

Connected		Con	":SET ã bool"

Ordinal		On	":SET ã bool"

Successor		Sc	":SET ã bool"

Natural number	N	":SET ã bool"
.DE
.KE
.bp
.KS
.DS C
\fBHOL-ZFC AXIOMS\fP

.DE
.DS L
EXT  Ö Éx yé (Ézé z ù÷ x Ç z ù÷ y) ä (x = y)

ZF2  Ö ÉA z xé x ù÷ (˜÷ z A) Ç x ù÷ z Ä A x

ZF3  Ö §÷ = ˜÷ §÷(çx∞é F)

ZF4  Ö Éy xé x ù÷ (ë y) Ç x •÷ y

ZF5  Ö Éy z xé x ù÷ (pair y z) Ç (x = y) Å (x = z)

ZF6  Ö Éy xé x ù÷ (£÷ y) Ç (Ñzé z ù÷ y Ä x ù÷ z)

ZF7  Ö Éxé x à §÷ ä (Ñyé y ù÷ x Ä (y †÷ x = §÷))

ZF8  Ö Éx∞é x∞ ù÷ ˇ Ç N x∞

ZF9  Ö Éf ré (Éx y zé f x y Ä f x z ä (z = y)) ä
      (Ñwé Éyé y ù÷ w Ç (Ñxé x ù÷ r Ä f x y))

ZF10  Ö Éx∞é x∞ à §÷ ä (˛ x∞) ù÷ x∞
.DE
.KE
.bp
.KS
.DS C
\fBHOL-ZFC THEOREMS\fP
.DE
.DS L
ZF_thm19  Ö N §÷


ZF_thm20  Ö Éx∞é §÷ à (suc x∞)


ZF_thm22  Ö Éx∞é N x∞ ä N(suc x∞)


ZF_thm23  Ö Éx∞ x¨é (suc x∞ = suc x¨) ä (x∞ = x¨)


ZF_thm25
Ö ÉAé
    A §÷ Ä (Éxé N x Ä A x ä A(suc x)) ä
    (Éxé N x ä A x)
.DE
.KE
.bp
.KS
.DS C
\fBTHE THEORY of "PURE FUNCTIONS"\fP
.DE
.DS L
\fBTypes --\fP  ":PF"
    
\fBConstants --\fP

function_hereditary	":(SET ã bool) ã bool"
pure_function		":SET ã bool"
˝≤	":PF"		¥≤	":PF"		£≤	":PF ã PF"	
¯≤	":PF ã ((PF ã PF) ã PF)"	˙≤	":PF ã PF"
 
\fBCurried Infixes --\fP

≤	":PF ã (PF ã PF)"
ó≤	":PF ã (PF ã PF)"	     
ï≤	":PF ã (PF ã PF)"  

\fBDefinitions --\fP

function_hereditary_DEF
  Ö function_hereditary p =
     (Éfé	function f Ä
      	 ¥÷ ì÷ (image f) Ä
       	(Éxé x ù÷ (field÷ f) ä p x) ä
       	p f)
pure_function_DEF
  Ö pure_function s = (Épé function_hereditary p ä p s)
.DE
.KE
.bp
.KS
.DS C
\fBAXIOMS of PURE FUNCTION THEORY\fP


.DE
.LP
Of the three main sorts of axiom:

.IP 1
LOGICAL axioms (including =)

.IP
these remain UNCHANGED

.IP 2
axioms CHARACTERISING SETS

.IP
\s-2These are replaced by comparable axioms for PURE FUNCTIONS (extensionality, well foundedness)\s+2

.IP 3
axioms CHARACTERISING ABSTRACTION

.IP
\s-2The axiom of separation is replaced by an axiom of BETA REDUCTION\s+2

.IP 4
POPULATING axioms

.IP
\s-2These are changed in detail but play a similar role.\s+2
.KE
.bp
.KS
.DS C
\fBTHEOREMS concerning PURE FUNCTIONS\fP
.DE
.DS L
PF1  Ö Éx yé (x = y) Ç (Ézé x ≤ z = y ≤ z)
PF2  Ö Éd f zé (¯≤ d f) ≤ z =
      ((d ≤ z = ¥≤) => ¥≤ | f z)
PF3  Ö Éxé ˝≤ ≤ x = ¥≤
PF4 .Ö Éf zé (˙ f) ≤ z =
      (Égé
        ((f ≤ g = ¥≤) => 
         (z ≤ g = ¥≤) | 
         ((f ≤ g) ≤ (z ≤ g)) à ¥≤) => 
       T≤ | 
       ¥≤)
PF5  Ö Éx y zé (x ó≤ y) ≤ z = ((z = x) => y | ¥≤)
PF6  Ö Éx y zé (x ï≤ y) ≤ z =
      ((y ≤ z = ¥≤) => x ≤ z | y ≤ z)
PF7 .Ö Épé
      (Éqé (Éré ((fie q) ≤ r) à ¥≤ ä p r) ä p q) ä
      (Éqé p q)
PF11.Ö Éf gé
      (((£≤ f) ≤ g) à ¥≤ => 
       (Ñié
         (f ≤ i) à ¥≤ Ä (i ≤ g = (£≤ f) ≤ g)) | 
       (Éié (f ≤ i) à ¥≤ ä (i ≤ g = ¥≤)))
PF13  Ö å(¥≤ = T≤)
.DE
.KE
.bp
.KS
.DS L
The Theory ppf136
Types --  ":PPF"
     
Constants --

regular	":(PPF ã PPF) ã bool"
¯‘		":PPF ã ((PPF ã PPF) ã PPF)"
˝‘	":PPF"	¥‘	":PPF"
T‘	":PPF"	F‘	":PPF"
if‘ 	":PPF ã (PPF ã (PPF ã PPF))"
£‘	":PPF ã PPF"	˙‘	":PPF ã PPF"
Tv‘	":PPF ã PPF"	Te‘	":PPF" 
    
Curried Infixes --

‘	":PPF ã (PPF ã PPF)"
ó‘	":PPF ã (PPF ã PPF)"
ï‘	":PPF ã (PPF ã PPF)"
∂‘	":PPF ã (PPF ã PPF)"
”‘	":PPF ã (PPF ã PPF)" 
.DE
.KE
.bp
.KS
.DS C
\fBthe AXIOMATISATION of
POLYMORPHIC PURE FUNCTIONS\fP
.DE
.LP
Of the three main sorts of axiom:

.IP 1
LOGICAL axioms (including =)

.IP
\s-2The host logic (HOL) no longer supplies adequate machinery.
Equality and conditionals need to be redefined (if‘, ∂‘).\s+2

.IP 2
axioms CHARACTERISING FUNCTIONS

.IP
\s-2These are replaced by comparable axioms for POLYMORPHIC PURE FUNCTIONS (extensionality, well foundedness)\s+2

.IP 3
the axiom of BETA REDUCTION

.IP
\s-2A variant of BETA REDUCTION is introduced dependent on REGULARITY,
TYPE INSTANTIATION is introduced, supported by an analogous axiom.\s+2

.IP 4
POPULATING axioms

.IP
\s-2These are changed in detail but play a similar role.\s+2
.KE
.bp
.KS
.DS L   
Definitions --

regular
  Ö regular ppfun = (Épfé Ñpfuné Éppfé
	REP_PPF(ppfun ppf)pf = pfun(REP_PPF ppf pf))

Theorems --

PPF1   Ö Éx yé (x = y) Ç (Ézé x ‘ z = y ‘ z)

PPF2   Ö Éd mé regular m ä
      (Ézé	(¯‘ d m) ‘ z =
        		if‘ ((d ‘ z) ∂‘ ¥‘) ¥‘ (m z))

PPF3   Ö Épé ˝‘ ‘ p = ¥‘

PPF5   Ö Éx y zé (x ó‘ y) ‘ z = if‘ (z ∂‘ x) y ¥‘

PPF6   Ö Éx y zé (x ï‘ y) ‘ z =
			if‘((y ‘ z) ∂‘ ¥‘)(x ‘ z)(y ‘ z)

PPF13	Ö å(¥‘ = T‘)
.DE
.KE
.bp
.KS
.DS C
\fBthe AXIOMATISATION of
STRUCTURED POLYMORPHIC FUNCTIONS\fP
.DE
.LP
Of the three main sorts of axiom:
.IP 1
LOGICAL axioms (including =)

.IP
\s-2The host logic (HOL) no longer supplies adequate machinery.
Equality and conditionals need to be redefined (if’, ∂’), host language abstraction is now displaced.\s+2

.IP 2
axioms CHARACTERISING POLYMORPHIC FUNCTIONS

.IP
\s-2These are replaced by comparable axioms for STRUCTURED POLYMORPHIC FUNCTIONS (extensionality, well foundedness)\s+2

.IP 3
the axiom of BETA REDUCTION

.IP
\s-2The REGULARITY CLAUSE IN the axiom of BETA REDUCTION is ELIMINATED,
VALUE INSTANTIATION is introduced, supported by an analogous axiom.\s+2

.IP 4
POPULATING axioms
.IP
\s-2These are changed in detail but play a similar role.\s+2
.KE
.bp
.KS
.DS L
The Theory ppf137
Types --  ":SPF"     
Constants --

¯’		":SPF ã (SPF ã (SPF ã SPF))"
Iv’		":SPF ã SPF"
Ie’	":SPF"	Tv’ ":SPF ã SPF"	Te’ ":SPF"
˝’	":SPF"	¥’ ":SPF"		T’ ":SPF"
if’		":SPF ã (SPF ã (SPF ã SPF))"
£’		":SPF ã SPF"
˙’		":SPF ã SPF"

Curried Infixes --

’		":SPF ã (SPF ã SPF)"
””’		":SPF ã (SPF ã SPF)"
”’		":SPF ã (SPF ã SPF)"
ó’		":SPF ã (SPF ã SPF)"
ï’		":SPF ã (SPF ã SPF)"
∂’		":SPF ã (SPF ã SPF)"

Theorems --

SPF1		Ö Éx yé (x = y) Ç (Ézé x ’ z = y ’ z)
SPF13		Ö å(¥’ = T’)
.DE
.KE
.bp
.KS
.DS C
\fBCONCLUSIONS\fP



FORMAL DERIVATION of PROOF RULES


is


DESIRABLE

and

FEASIBLE

but

EXPENSIVE


(c300 terminal hours so far)
.DE
.KE
.bp
.KS
.DS C
\fBWHAT I WOULD DO DIFFERENT
IF I STARTED AGAIN FROM SCRATCH\fP


DIFFERENT formulation of SET THEORY

THEN

NOT PURE FUNCTIONS

but

PURE FUNCTIONS and `TYPES'
without ¥

this is mathematically nicer
and provides a staging post towards
PURE FUNCTORS and CATEGORIES
.DE
.KE
.bp
.KS
.DS C
.DE
.KE
