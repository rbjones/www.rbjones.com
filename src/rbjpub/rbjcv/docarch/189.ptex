=TEX
% TQtemplate.tex
%	From file `TQfulltemplate.tex',  %Z% %E% %I% %M%
\documentstyle[hol1,11pt,TQ]{article}
\newcommand{\Dontprint}[1]{}
\makeindex
\TPPproject{TECHNOLOGY PROJECTS}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Comments on the Z standard}  %% Mandatory field
\TPPref{DS/FMU/RBJ/189}  %% Mandatory field
\def\SCCSversion{%I%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{1989-07-01}  %% Mandatory field with sensible default, ie uses `\today'.
\TPPstatus{Informal}			%% Mandatory field
\TPPtype{Proposal}
\TPPclass{}
%\TPPkeywords{}
\TPPauthors{R B Jones & WIN01}
\TPPabstract{
This document contains comments on the current draft of the Z standard.}

\TPPdistribution{\parbox[t]{4.0in}{%
%	R.D.Arthan\\
%	K.Blackburn\\
%	A.J.Hammon\\
%	B.J.Homer\\
%	R.Stokes\\
%	G.T.Scullard
}}


\def\TPPheadcentre{Comments on Z standard}
\def\TPPheadcentreproject{TECHNOLOGY PROJECTS}


\begin{document}
\TPPsetsizes


\makeTPPfrontpage
\vfill
\newpage

\section{DOCUMENT CONTROL}

\subsection{Contents list}
 
\tableofcontents
%\listoftables
%\listoffigures

\subsection{Document History}
Issue: %I%
, Date: %DATE%%E%
, Status: Informal

This is the first externally issued draft.

\subsection{Approval Authority}
This document is not subject to formal approval.

\subsection{Changes Forecast}

No changes are forecast.
Further comments will be supplied in separate documents.

\subsection{References}
\bibliographystyle{fmu}
\bibliography{fmu}

\section{GENERAL}
\subsection{Scope}
\subsection{Introduction}



\section{COMMENTS ON ``Z BASE STANDARD''}

Roger,

Some commments on the Z Base Standard follow.  I have not commented
further on points you had marked in my copy of the paper.


p2 section 2:

I think the term `element' is rather overworked. Sometimes it means
`basic principle' (as here), sometimes it refers to the things that
live in sets as in section 2.1, and sometimes it means (syntactic)
construct as in section 4.

The opening paragraph gives one the unsettling impression that syntax
and semantics are about to be mixed up horribly and what follows tends
to bear this out.

What is `typed set theory'? On my best guess at what is meant here, Z
is syntactic sugar for it rather than an `extension' of it.

To be kind about this whole section, I can only assume that it is to be
taken as some rough notes for what will eventually appear.  As it is, it
is too imprecise to be of any use to anyone other than an expert (who
will be repelled by the lack of precision).  What appears to be
proposed is a description of the type system.  This could actually be
done much more concisely and clearly by discussing each of the type
constructors in an orderly fashion describing the syntax of the
constructor and then its informal semantics.

2.1: You remark that the disjointness of the basic types is neither
known nor expressible (and I agree). However, some of the later
discussion on bindings reads as if you can discover the type of a
variable from its value.

2.1.2: What's wrong with writing the maximal set which is coextensive
with a schema type using a horizontal schema with no predicate and with
maximal sets after the colons in the signature?

The sentences of the form `a ... type is composed from ... type(s)' are
leave me definitely confused as to whether they are about syntax or
semantics.

p3 2.3: Are `tuple brackets' the same as `parentheses'?

p6 3.4: The definition of the term `variable' is completely inadequate
to cope with the demands made of it in 3.5.

p6 Section 3: `This section introduces ... mathematical concepts ...
for defining the meaning of...'. Why is it nearly all about syntax
then?

p7 3.5: This seems very sketchy too me. It also seems quite bizarre and
pointless to attempt to define scope rules before defining the syntax
of the constructs they apply to. The basic concepts here are just too
vague to be of use. According to 3.4 a variable is `a name', and this
section reads as if scope is an attribute of variables but that just
doesn't work - scope has to be an attribute of declarations, the scope
of a declaration being the region of the specification in which that
declaration is in force.

Is paragraph 3 the clause which lets you use two
schemas-as-declarations which share a variable in a single declaration?
On the vague impression on what scope means given by paragraph 2, one
could read paragraph 3 as a peculiar constraint on what it means to
rebind a name in an inner declaration.

What is the `name of a schema'? Is a `schema name' the same thing?
Perhaps, I should ask what is a `schema'. Section 2.4 says `a schema S
denotes a set of bindings' which must, surely, imply that a schema is a
syntactic notion.  However, section 3.7 says that `a schema is a set of
bindings', which I have to read as a semantic concept.

What is an `identifier' or a `paragraph'?

p9 Section 4: It's a shame that they haven't gone to the same trouble
with formalising the context conditions as they have with the mapping
to abstract syntax.

p17 4.5.3: Is it permitted to instantiate the generic variable within
the axiom part of its definition? If this is allowed, it is very
peculiar.

p17 4.5.4: Surely the type of a generic is just a type with some
distinguished free variables. Is there a confusion between syntax and
semantics here?

p18 4.6.3: It is quite possible to read this as if schema names were
not the names of global variables (so that they could coincide with the
names of generics etc. according to the scope rules given for those
constructs).

p19 4.6.5: I take it that the second sentence is related to an
assumption I made in our type checker that there are no applied
instances of generic variables in which the generic actuals are not
supplied (either explicitly or implicitly).

p26 4.12.1/p34 4.17: I just don't understand why all the binary logical
operators aren't right associative like implication. It's semantically
irrelevant for conjunction and disjunction and iterated bi-implications
are just hard to understand either way. The advantage of right
associativity is that it means that the operands then naturally appear
in their original order if they are being processed in a tool.

p32 4.16: The clash between the schmea composition projection operators
and the library operators with the same names implies that parsing
cannot be context independent. Is it intended that it should be a
simple matter (not involving type inference) to determine during
parsing whether an expression is a schema expression or an ordinary
term?

p44 4.24: The superscription operator is a pain for tool support,
particularly as the superscripted operand can recursively involve
superscription.

p48 4.26: I think it's odd that the theta term is the only way of
writing a binding. One of the main reasons theta is found confusing is
that it can't be explained in terms of an explicit presentation of an
equivalent binding value. Anyone trying to give proof support for Z
will, I believe, feel the need to extend Z to include such a notation
(e.g. to give a means of showing that a schema is inhabited by
exhibiting a witness).

p53 4.30: I don't see why all the fixity options aren't available for
everything. It seems odd for example that unary minus has to be a
special case in the grammar rather than just a library operation which
is a `PreFun'.

That said, if my reading is correct then in the scope of say `forall
(\_x\_): P(X * Y)', `x' acts as `InRel' and, similarly, in the scope of
`forall (\_y\_):X -$>$ Y -$>$ Z', `y' acts as an `InFun' etc.  Is this
intended to apply just to global definitions or does it also apply to
local definitions? If a schema contains signature declarations like
these, is the special fixity intended to propagate into scopes where
the schema has been used as a declaration?  If it does apply to local
definitions, then quite a lot of type analysis needs to be done during
parsing in order to distinguish `InRel's from `InFun's etc. Might not
it be better to have separate fixity directives as a special form of
paragraph (after the style of Standard ML)?

pp??? : I couldn't find a subsection of section 4 about abbreviation
definitions although these do appear in the concrete syntax (but not I
think the abstract syntax).




\section{COMMENTS ON ``A Semantics for Z''}

A contents list and index is highly desirable.

\subsection{The World of Sets}
The translation of this from Z to ``first order set theory'' is desirable, however what is provided in this section is not a translation into ZF of the specification originally in \cite{spivey88}.

It is necessary to work with a metalanguage which is strictly stronger than Zermelo set theory (ZF will do, as will the effect of extending Z by a ``world of sets'' used in \cite{spivey88}).
As it stands this document simply uses `W' in section 2 without any previous mention of it at all.
W must be defined.

\subsection{Sets and membership}

The last sentence surely isn't true.
Most of the axioms in ZF are unproven claims about the existence of sets.

\subsection{Pair Sets}

Not necessarily a two-element set.
Delete ``two-element''.

\subsection{Natural Numbers}
I don't believe this definition of † is adequate.

\subsection{Axiom of Regularity}

The first sentence is false and should be deleted
(in a monotonic logic adding an axiom can never improve the consistency of a logic).

The reason for the axiom of regularity is to simplify certain arguments necessary in the subsequent development of the set theory. 


\subsection{Tuples and Products}
You are concrete about unordered pairs, abstract about ordered pairs, and then concrete about n-tuples for n$>$2.
How about a bit of consistency?

Last sentence contains ``more tan two''.

\subsection{Binary Relations}

I'm not sure I approve of your new notation for relational image, isn't this just going to make life more difficult for the reader?

\subsection{Functions}
Sentence 3, add ``partial''.

I suggest that you allow ``•'' to stand for relational overriding with the same definition.

\subsection{Sequences}

\begin{enumerate}
\item
A sequence does not order the elements of its domain.
\item
Why use a notation for sequences here which is different from the notation to be used in Z?
\item
I think it will be unnecessarily confusing to readers familiar with Z to treat † as the set of finite ordinals.
The document will be easier to understand things are done consistently throughout, this need not be confused with `meta-circularity'.
\end{enumerate}

\section{Types}

\begin{enumerate}
\item
`W' appears out of nowhere.
Can we have a definition of it?
\item
The definition of `Carrier' is a giant leap backwards in clarity.
Can we have the old one back?
\item
If you want to avoid parameterising the ``Carrier'' relation with the given sets then it is desirable to give some explanation of how this is to be acheived.
\end{enumerate}
\subsection{Generic Types}

This section is confused about whether it is talking syntax or semantics.
For (mono-)types you have first given the {\it abstract synatax} of the types, and then given the {\it semantics} by defining the carrier.
Surely the same approach should be adopted for the generic types.
First define the {\it abstract syntax} of a generic type, which will simply be a {\it TYPE} together with an ordered finite set (or sequence) of formal generic parameters (which should be a subset of the {\it givenT} occuring in the type).
Then you should define the carrier for a generic type, which could be a partial function from sequences of sets to elements in the carrier of the TYPE.
This structuring helps to restore your motivation for making the definition of ``Carrier'' parametric in an assignment of sets (in W) to given set names.

I don't say that the presentation adopted here is actually wrong, but it does drive a cart and horses through our intuitions about how a denotational semantics should be structured, and this makes it more difficult to assess whether the semantics does actually hang together or not.

The definition as given results in their being very many generic types which are pathological and could never be defined in a syntactically correct Z specification.

A further problem arises in the attempt to eliminate parameterisation of the {\it Carrier} relation.
This would have worked if it weren't for generics, since the interpretation of given set names could then have been regarded as fixed and unspecified.
However, the presence of generics prevents the interpretation of given set names from being fixed, since they are not syntactically distinct from formal generic parameters.

\section{Elements in Z}
\subsection{Generic Elements}

This continues a misguided approach.
There are too many {\it GEN\_ELEMS} containing many things which Z does not need.

There is also a typo in the definition of {\it t}, where {\it tt} appears instead of {\it t} at the defining position.

\section{The Meaning of Z}

I don't beleive it is necessary to talk about declarations being partial.

\subsection{Identifiers}

Last sentence shouldn't begin ``for each name''.

\subsection{Expressions}

It is more obvious here that the definition of {\it ELM} is unsatisfactory.

\end{document}


