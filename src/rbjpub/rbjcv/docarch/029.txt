.nh
.ft HB
.ce 100
.ps 24
.vs 30
CREATIVE FOUNDATIONS
FOR PROGRAM VERIFICATION
.sp 1.5i
.ps 22
.vs 100
introduction and motivation
philosophical background
a primitive formal system
why creative?
.bp
.ps 24
.vs 30
VERIFYING VERIFICATION SYSTEMS
.sp .5i
.nf
.ps 20
.vs 30
.ce 0
Problems:
	Proving correctness of implementation
	Establishing consistency of foundations
.sp
.ft HI
Could we attach any value to 
a proof within the same system?
.ft HB
.ps 24
							NO
.ps 20
.sp
Therefore, we must have an 
ULTIMATE FORMAL FOUNDATION
which is not itself formally verified.

How do we maximise confidence in such
an "ultimate formal foundation"?

*	make it simple
*	make it "transparent to intuitions"
*	give it prolonged theoretical scrutiny
	and practical exposure
.bp
.ps 24
.vs 28
A FORMALISATION OF
THE CREATIVE THEORY
.ce 0
.sp
.nf
.ps 20
.vs 30
.ft HI
|| abstract syntax
.ft HB
.vs 30
.ps 14
term ::=  K  |  S  |  term $Ap term
.vs 17

.ps 20
.vs 30
.ft HI
|| auxiliary definitions
.ft HB
.vs 30
.ps 14
|| We define the type \f(HIproforma\fP, and the operation \f(HIst\fP which 
.vs 17
|| substitutes a \f(HIterm\fP into a \f(HIproforma\fP yielding a \f(HIterm\fP.

proforma ::=  M  |  T term  |  proforma $Pap proforma

st :: proforma -> term -> term

st M u 		= u
st (T t) u		= t
st (p $Pap q) u	= (st p u) $Ap (st q u)

.ps 20
.ft HI
|| signature
.ft HB
.vs 30
.ps 14
abstype theorem
.vs 17
with	kaxiom	:: theorem
	krule		:: (theorem, proforma, term, term)		-> theorem
	srule		:: (theorem, proforma, term, term, term)	-> theorem

theorem		== term

.ps 20
.ft HI
|| axiom
.ft HB
.vs 30
.ps 14
kaxiom		= K
.vs 17

.ps 20
.ft HI
|| inference rules
.ft HB
.vs 30
.ps 14
krule (th,p,u,v)		= st p ((K $Ap u) $Ap v),
.vs 17
						th = st p u


srule (th,p,u,v,w)	= st p (((S $Ap u) $Ap v) $Ap w),
						th = st p (( u $Ap w) $Ap (v $Ap w))

.bp
.ps 24
.vs 28
PURE COMBINATORY LOGIC
.ce 0
.sp
.nf
.ps 20
.ft HI
|| abstract syntax
.ft HB
.vs 30
.ps 14
term ::=  K  |  S  |  term $Ap term
.vs 17
.ps 20
.br
.ft HI
.vs 30

|| interpreting combinators

.ft HB
.ps 14
.vs 17
.fi
Each combinator represents a (partial) function.
"$Ap" represents function application.
.sp
K and S are primitive functions defined as follows:
.nf

((K $Ap u) $Ap v) = u

(((S $Ap u) $Ap v) $Ap w) = ((u $Ap v) $Ap (u $Ap w))

.nf
.vs 17
.ps 20
.ft HI
|| representing computable functions
.ft HB
.vs 30
.ps 14

.vs 17
.fi
By chosing suitable terms in the pure combinatory logic
we can represent the natural numbers as combinators.
Under such an interpretation combinators may be interpreted as partial
computable functions over the natural numbers.
It transpires that this formalism is computationally universal,
i.e. every partial computable function over the natural numbers 
is represented by some combinator.
It follows that, again by the use of suitable encodings,
all the (partial) computable functions over combinators are also
representable.
(note that the identity function is not a suitable encoding)


.nf
.vs 17
.ps 20
.ft HI
|| representing partial characteristic functions
.ft HB
.vs 30
.ps 14

.vs 17
.fi
By chosing suitable representatives for the truth values 
partial characteristic functions over encoded integers, or 
over encoded combinators may be represented.
The combinator representing a partial characteristic function
is one which when applied to the combinator representing some
object in the domain will yield "True" if and only if the object
is in the set of which the first combinator represents a partial
characteristic function.
