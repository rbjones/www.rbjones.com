.nr PS 11
.nr VS 14
.so /usr/local/rbj/keys/roff.defs
.nr P 1 Presentation Flag
.nr D 0 Document Flag
.LP
.TL
Proving Properties of Secure Systems
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB
.ct D
This paper reviews progress on the development of formal proofs of
properties of secure systems.
This work has been undertaken by ICL Defence Systems in the course
of design studies under contract to CESG.
The paper highlights some of the benefits which have already
been obtained from this activity.
.cx
.ct P
This document consists of the overheads for a presentation on formal
proof of properties of secure systems.
.cx
.AE
.ds LH \s-8Formal Proofs of Security Properties\s+8
.ds CH \s-2\s+2
.ds RH \s-8\*(DY\s+8
.ds LF \s-8DTC/RBJ/050\s+8
.ds CF \s-2\s+2
.ds RF \s-8Issue 0.1 Page \\n(PN\s+8
.ct P
.nr PS 20
.nr VS 24
.cx
.KS
.NH
INTRODUCTION
.DS C



CURRENT STATUS of WORK



SUMMARY of BENEFITS to date



PLAN for PROOF



EXPECTED FUTURE BENEFITS
.DE
.KE
.KS
.NH
CURRENT STATUS of WORK
.DS C



first TRANSLATION COMPLETED
size 250Kb = 10*`arithmetic`




METHODOLOGY well ESTABLISHED
(except for schema calculus)




SUPPORTING INFRASTRUCTURE in place




PROBLEMS: Performance & Resilience
.DE
.KE
.KS
.NH
SUMMARY of BENEFITS to date
.DS C


ERRORS revealed by TYPE CHECKING



some CONSISTENCY CHECKS



INSIGHT into Z
SEMANTICS and PROOF THEORY



experience HANDS ON with
THEOREM PROVING TOOLS



INFRASTRUCTURE for
LOW REPEAT COST
.DE
.KE
.KS
.NH 2
Z SEMANTICS and PROOF THEORY


.LP
Are empty types legal?
e.g.:
.sd INT_PAIR
left, right :INT
.sb
left > right \*e right > left
.se
.LP
If not, how do we know that our schemas are legal?
.LP
If so, what is the status of declarations using empty types?
e.g.:
.sv
ip:INT_PAIR
.sw
.LP
Can we then assert:
.sv
\*o?	ip.left > ip.right \*e ip.right > ip.left
.sw
.LP
?
.KE
.KS
.LP
There is a solution which provides a consistent proof theory for Z,
and which translates into HOL.
.LP
We interpret schemas with non-empty bodies in the following way:
.sv
INT_PAIR =
	{[left,right:INT] | left > right \*e right > left}
	\(cu {\(*mp:[left,right:INT] | left > right \*e right > left}
.sw
.LP
Inference rules relating to schema types must be qualified.
.sv
\*o	(\*kx:[left,right:INT].left > right \*e right > left)
	\(rh \*jip:INT_PAIR.
		ip.left > ip.right \*e ip.right > ip.left
.sw
.KE
.KS
.NH
PLAN for PROOF
.DS C


ONCE ONLY developments

sum
partial functions
lists
labelled products
disjoint unions
schemas



SECURITY PROOF

top level, by induction over lists
lower levels not yet considered



STRATEGY

backward search
.DE
.KE
.KS
.NH
EXPECTED FUTURE BENEFITS
.DS C


MORE of the SAME



FORMAL PROOFS of PROPERTIES!

PRACTICAL Theorem Proving EXPERIENCE



CONFIDENCE of CONSISTENCY

CONFIDENCE of SUFFICIENCY

CONFIDENCE of CORRECTNESS of DESIGN



REUSABLE ABSTRACT THEORIES of SECURITY



IMPROVED SKILLS BASE for CODE VERIFICATION



Improved UNDERSTANDING of REASONING about Z
.DE
.KE

