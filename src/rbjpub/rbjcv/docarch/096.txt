.nr PS 11
.nr VS 14
.so /usr/local/rbj/keys/roff.defs
.nr P 1 Presentation Flag
.nr D 0 Document Flag
.LP
.TL
Reflexive Foundations for Computer Science
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB
.ct D
.cx
.ct P
.cx
.AE
.ds LH \s-8Reflexive Foundations for Computer Science\s+8
.ds CH \s-2\s+2
.ds RH \s-8\*(DY\s+8
.ds LF \s-8DTC/RBJ/096\s+8
.ds CF \s-2\s+2
.ds RF \s-8Issue 0.1 Page \\n(PN\s+8
.nr PS 20
.nr VS 24
.bp
.KS
.DS C
\fBREFLEXIVE FOUNDATIONS\fP
for
\fBCOMPUTER SCIENCE\fP
.DE
.nr PS 18
.nr VS 20
.DS C
\fBFOUNDATION SYSTEMS\fP
	The Analytic
	Logic & Sets
	Paradoxes
	Resolution
	Well Foundedness

\fBREFLECTION\fP
	What is Reflexiveness?
	The Lambda Calculus
	Denotational Semantics
	Abstraction
	Metareflection

\fBREFLECTION in CLASSICAL FOUNDATIONS\fP
	Functions as Graphs
	Self Application
	Functions as Rules
	Syntactic models in Set Theory

\fBREFLEXIVE FOUNDATIONS\fP
	Existing Systems
	Recursion Theory
	The Creative Theory
	The Semantics of Quantification
	Proof Theory
.DE
.KE
.nr PS 20
.nr VS 24
.KS
.DS C
\fBTHE ANALYTIC\fP

HUME (1739)

(An Enquiry Concerning Human Understanding"
Section IV part I)


.DE
.LP
All the objects of human reason or enquiry may be divided into two kinds,
to wit, "\fBRelations of Ideas\fP" and "\fBMatters of Fact\fP".

.LP
Of the \fIfirst\fP kind are the sciences of \fBGeometry,
Algebra and Arithmetic\fP,
and in short, every affirmation which is either intuitively or
demonstratively certain.

.LP
\fBMatters of fact\fP, which are the \fIsecond\fP objects of human reason,
are not ascertained in the same manner, nor is our evidence of their
truth, however great, of a like nature with the forgoing.
.KE
.bp
.DS C
\fBINFORMAL, SET THEORETIC, FOUNDATIONS\fP

.DE
.LP
Set theory provides a means of deriving a very large body of mathematics
from two principles:
.DS C


EXTENSIONALITY

.DE
.LP
Two sets are equal if and only if they have exactly the same members:
.DS C
\*js,t. s=t \*h (\*jx. x\(mos \*h x\(mot)



ABSTRACTION

.DE
.LP
For every propositional function P, there is a set containing just
those elements for which P is true:
.DS C

\*kx. \*jy. y\(mox \*h P(y)

.DE
.LP
This set is denoted by the expression {y | P(y)}.
.bp
.DS C
\fBRUSSELL's PARADOX\fP


.DE
.LP
Consider the set R = {x | x\*ix}.
.LP
We have:
.DS C

R \(mo R \(rh R \*i R

.DE
.LP
and:
.DS C

R \*i R \(rh \(no R \*i R \(rh R \(mo R

.DE
.LP
revealing a contradiction in these very simple ideas.
.bp
.DS C
\fBTHE CUMULATIVE HIERARCHY\fP
of
\fBSETS\fP
.DE
.LP
Sets are considered to be formed from the empty set in some particular
order using a small repertoire of set forming operations,
viz:
.DS L
Pair			{a,b}
Power set		\*m a
Separation		{x:A | P}
Union		\(cu a
Replacement
.DE
.LP
A set may only contain sets previously formed.
.LP
Hence, the axiom of WELL FOUNDATION.
.DS C

\fBTYPE THEORY\fP

.DE
.LP
A Type Universe is formed from the primitive types \fIind\fP and \fIbool\fP,
by repeated application of the function space type constructor \(->.
.DS L
type ::= ind | bool | type \(-> type
.DE
.LP
All terms are typed, and variables range over the values in just one type.
.KS
.DS C
\fBFOUNDATION SYSTEMS\fP

.DE
.LP
Formal systems sufficient for  the development of mathematics without the
introduction of any further axioms or rules.
(definitions suffice)

.LP
They offer:
.DS C


SAFETY


and


SUFFICIENCY
.DE
.KE
.KS
.DS C
\fBWHAT IS REFLEXIVENESS?\fP



SELF APPLICATION of FUNCTIONS




A UNIVERSE U such that U \(mo U




TYPE of TYPES, \fItype\fP such that \fBtype:type\fP




REASONING, WITHIN a FORMAL SYSTEM,
about ITSELF


.DE
.KE
.bp
.DS C
\fBFUNCTIONS AS GRAPHS\fP
.DE
.DS L
In set theory a \fBfunction\fP \fIf\fP defined

		f x = exp

is normally represented by the \fBset\fP:

		{(x,y) | y = exp}

where (x,y) = {{x}, {x,y}}

Consequently:

		dom f \(ib \(cu\(cu f
.DE
.DS C

\fBWell Foundedness

+

Functions as Graphs

\(rh

No Self-Application\fP
.DE
.bp
.DS C
\fBFUNCTIONS as RULES\fP
.DE
.LP
We chose some language and assign a meaning to the terms
of the language as operations over the same language.
The most obvious example is the partial recursive functions over
natural numbers, which can be encoded as natural numbers.
.DS C
{} : \*r \(-> (\*r \*(be \*r)
.DE
.LP
Alternatively, a partition of the terms of some language may be defined
as the coarsest partition consistent with certain reduction rules.
This is the technique used in the lambda-calculus and in combinatory
logic.
.DS C
conv : term \(-> term \(-> bool
.DE


.bp
.DS C
\fBRECURSION THEORY and FORMAL SYSTEMS\fP

.DE
.LP
A class of problems is \fBdecidable\fP (recursive) if there exists an
algorithm for computing the answer to the problems which always terminates.
.LP
A class of problems is \fBsemi-decidable\fP (r.e.) if there exists an
algorithm for computing the answer to the problems which terminates if
the answer to the problem is positive.
.LP
For finitary formal systems:
.RS
.IP
The set of theorems is r.e.
.IP
Every \fIformally representable\fP set is r.e.
.RE
.LP
For first order languages:
.DS C
every consistent theory has
a \fBfinite\fP or \fBcountable\fP model
.DE
.LP
For foundation systems:
.RS
.IP
All consistent formalisations of arithmetic are incomplete.
.IP
Only a countable number of sets can be described in first order set theory.
.RE
.bp
.DS C
\fBTHE LAMBDA CALCULUS
and
COMBINATORY LOGIC\fP
.DE
.DS L

K u v = u

S u v w = (u w) (v w)

K = \(*lu v.u

S = \(*lu v w.(u w)(v w)


term	::=	variable			|
		term term			|
		\(*l variable . term

comb	::=	K | S | comb comb


\(*lx.x = I = S K K

S K K x = (K x)(K x) = x 
.DE
.bp
.DS C
\fBDOMAIN EQUATIONS\fP
.DE
.DS L
e.g.
.DE
.DS C

\fBV = N + V \(-> V\fP
.DE
.LP
This has NO SET THEORETIC SOLUTION because:
.RS
.IP
requires self-application

.IP
cardinality problems
.RE
.DS C

SOLUTION


Abandon "functions as graphs"

settle for 'isomorphism`

V \o`=~` N + V \(-> V

and chose a smaller function space
.DE
.bp
.DS C
\fBMETAREFLECTION\fP
.DE
.DS C

ML and PROOF DEVELOPMENT SYSTEMS

.DE
.LP
LCF, LCF-LSM, HOL, NUPRL are all proof development systems written
in the functional language ML.
Primitive axioms and rules of inference are embodied
in an abstract data type defining the theorems of the logic.
Derived inference rules may then be programmed in ML and their
soundness is guaranteed by the type checker.
.DS C

Using a METALOGIC

.DE
.LP
If the metalanguage were a logic with a usable executable sublanguage,
then the logic could be used to prove the soundness of derived rules
enabling primitives steps to be omitted from proofs.
.LP
.DS C

Suppose OBJECT-language = META-language?
.DE
.bp
.DS C
HOW TO DEVELOP
a
REFLEXIVE FOUNDATION SYSTEM

.DE
.IP 1
Choose a programming language
.br
(preferably a neat one)

.IP 2
Define the semantics of the language
.br
(maybe operationally)

.IP 3
Add restricted quantification

.IP 4
Worry about consistency

.IP 5
Pick up the proof rules from a classical foundation system

.bp
.DS C
\fB'SIMPLE` MODELS\fP

Pure Combinatory Logic


.DE
.KE

