<?xml version="1.0"?>
<!DOCTYPE ProofPower SYSTEM "pp-symbol.ent">
<xldoc xmlns="http://www.x-logic.org/xmlns/draft/xld"
       xmlns:xhtml="http://www.w3.org/TR/xhtml1/strict"
       id="$Id: gst-thlists.xml,v 1.1 2002/12/24 16:02:49 rbj Exp $"
       name="gst-thlists"
       title="The theory of lists in GST"
       description="Definitions and theorems concerning lists in GST."
       keywords="x-logic xml logic proofpower gst hol set theory lists"
       class="con"
       root="../../../"
       path="rbjpub/pp/gst/"
       up="../index.html"
       rbjhome="../../rbj.htm"
       maintitle="mnt">

<section title="Overview">
<abstract>
This document introduces definitions and derives results relating to the theory of lists in galactic set theory.
</abstract>
<secbody>
<sbcol>
<secref title="Introduction"/>
<secref title="Lists"/>
</sbcol>
<sbcol>
<secref title="Proof Context"/>
<subsec title="Listing of Theory gst-lists" href="gst-lists.html" />
</sbcol>
</secbody>
</section>

<ft lang="xl-ign" rest="">
set_flag("pp_show_HOL_types", true);
set_flag("pp_show_HOL_types", false);
</ft>

<section title="Introduction">
<abstract>
A new "gst-lists" theory is created as a child of "gst-fun".
Probably 
This is really a placeholder, it is probably that lists will end up a special case of a more general theory of inductively defined types.
</abstract>
<secbody>
<sbcol>
<subsec title="Motivation">
Can't remember why I started this, but its hard to imagine getting far without it.
</subsec>
</sbcol>
<sbcol>
<subsec title="The Theory gst-lists">
The new theory is first created, together with a proof context which we will build up as we develop the theory.
<ft lang="xl-sml" rest="">
open_theory "gst-fun";
force_new_theory "gst-lists";
force_new_pc "gst-lists";
merge_pcs ["xl_cs_&exist;_conv"] "gst-lists";
set_merge_pcs ["basic_hol", "gst-ax", "gst-fun", "gst-lists"];
</ft>
</subsec>
</sbcol>
</secbody>
</section>

<section title="Lists">
<abstract>
Though we could do n-ary tuples for n>2, lists are better.
</abstract>
<secbody>
<sbcol>
<subsec title="Introduction">
Working in an untyped set theory in higher order logic, some of the things already available as typed constructions have to be reworked in this untyped universe of sets.
In higher order logic arbitrary tuples are available as typed constructions by iterating the typed ordered pair constructor, and lists are separately available.
Both are desirable because the tuples are of fixed length determined by their type, but can have components of distinct types, while lists are of arbitrary length but must be of uniform type.
In the set theory things work our differently.
Lists are themselves more easily constructed (and this can be done using the ordered pair constructor) and are not restrained by a type system (within the set theory).
Ordered tuples are less useful in this context and are probably superfluous if lists are available. 
</subsec>
<subsec title="Cons and nil">
We can use the ordered pair constructor and the empty set for the list constructor and the empty list, but, just in case we want to differentiate between pairs and lists in the proof automation I will give them new names.
<holconst><holsig>
nil : GS
</holsig>
<holpred>
nil = &empty;<sub>g</sub>
</holpred>
</holconst>
<holconst><holsig>
 cons : GS &rarr; GS &rarr; GS
</holsig>
<holpred>
&forall;h t&bull; cons h t = h &mapsto;<sub>g</sub> t
</holpred>
</holconst>
</subsec>
</sbcol>
<sbcol>
<subsec title="The List Constructor">
We can borrow a bit of the special syntax for lists in HOL by providing a list (set) constructor which takes a HOL list (of sets) as its argument.
<holconst><holsig>
 list : GS LIST &rarr; GS
</holsig>
<holpred>
&forall;h t&bull;
	list [] = nil
	&and; list (Cons h t) = cons h (list t)
</holpred>
</holconst>
</subsec>
<subsec title="Destructors">
Having adopted new names for existing constructors we now do the same for the destructors.
<holconst><holsig>
head tail: GS &rarr; GS
</holsig>
<holpred>
head = fst
&and; tail = snd
</holpred>
</holconst>
To which we add a numeric selector.
<holconst><holsig>
 nth : &nat; &rarr; GS &rarr; GS
</holsig>
<holpred>
&forall;n l&bull; nth 0 l = head l
&and; nth (n+1) l = nth n (tail l) 
</holpred>
</holconst>
</subsec>
</sbcol>
</secbody>
</section>

<section title="Proof Context">
<abstract>
In this section I will create a decent proof context for lists, maybe.
</abstract>
<secbody>
<sbcol>
</sbcol>
<sbcol>
<subsec title="Proof Context">
<ft lang="xl-sml" rest="">
commit_pc "gst-lists";
</ft>
</subsec>
</sbcol>
</secbody>
</section>

</xldoc>






