
=TEX
\def\rbjidtDFdoc{$$Id: t032.doc,v 1.1 2009/09/16 09:46:49 rbj Exp $$}

This document has not really been started yet.

Here are some notes on what it might contain.

For the purposes of this analytic history the single most important concern is what Leibniz contributed to out understanding of the concept of logical truth.
For this we consider primarily the most fundamental parts of his metaphysics, which we do partly through the perspective of Bertrand Russell \cite{russellPL}, whose own philosophy of Logical Atomism was influenced by Leibniz and will be considered later.

Leibniz contributed also to our ideas about the applications of logic, through his ``universal characteristic'' and ``calculus ratiocinator''.

\section{Leibniz On Identity}

=SML
open_theory "misc2";
force_new_theory "leibniz01";
set_pc "misc2";
=TEX

In higher order logic Leibniz's identity of indiscernables is a trivial principle.

Its formulation is:

=GFT
	µx y· (µP· P(x) ¤ P(y)) ´ x = y
=TEX

Here is a long-winded transcript of a ProofPower proof session:

=SML
set_goal([], ¬µx y· (µP· P(x) ¤ P(y)) ´ x = y®);
=GFT ProofPower output
(* *** Goal "" *** *)

(* ?ô *)  ¬µ x y· (µ P· P x ¤ P y) ´ x = y®
=TEX

Strip the goal.

=SML
a (REPEAT strip_tac);
=GFT ProofPower output
(* *** Goal "" *** *)

(*  1 *)  ¬µ P· P x ¤ P y®

(* ?ô *)  ¬x = y®
=TEX

Instantiate the assumption using the predicate
=INLINEFT
¬$= y®
=TEX
.
\footnote{This is the predicate ``equal to y'', or $¬Ìx. y = x®$}:
=SML
a (spec_asm_tac ¬µ P· P x ¤ P y® ¬$= y®);
=GFT ProofPower output
(* *** Goal "" *** *)

(*  2 *)  ¬µ P· P x ¤ P y®
(*  1 *)  ¬y = x®

(* ?ô *)  ¬x = y®
=TEX

The instantiation yields:
=GFT
	¬y = x ¤ y = y®
	¤ ¬(y = x ´ y = y) ± (y = y ´ y = x)®
	¤ ¬(³y = x ² y = y) ± (y = x ² ³y = y)®
	¤ ¬(³y = x ² T) ± (y = x ² F)®
	¤ ¬(y = x)®
=TEX
of which the last is the new assumption shown above.

Rewrite the conclusion with the assumptions (giving $¬x = x®$ which is automatically discharged).

=SML
a (asm_rewrite_tac[]);
=GFT ProofPower output
Tactic produced 0 subgoals:
Current and main goal achieved
=TEX

Save the theorem.
=SML
val Ûleibniz_identityÝ = save_pop_thm "leibniz_identity";
=GFT ProofPower output
Now 0 goals on the main goal stack
val leibniz_identity = ô µ x y· (µ P· P x ¤ P y) ´ x = y : THM
=TEX

So, in this context, that indiscernibles are identical is an elementary consequence of the fact that for every entity `e' there is a predicate `equal to e' which is satisfied only by e.

Leibniz intended by his principle something more substantial, which is harder to capture.