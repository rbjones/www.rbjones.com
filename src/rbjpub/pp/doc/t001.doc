=IGN
$Id: t001.doc,v 1.8 2009/03/31 17:52:57 rbj Exp $
=TEX
\documentclass[11pt,a4paper]{article}
\usepackage{latexsym}
\usepackage{ProofPower}
\ftlinepenalty=9999
\usepackage{A4}

\def\ExpName{\mbox{{\sf exp}}}
\def\Exp#1{\ExpName(#1)}

\tabstop=0.4in
\newcommand{\ignore}[1]{}

\makeindex
\title{Abstract Semantics}
\author{Roger Bishop Jones}
\makeindex
\author{R.B.Jones\\ rbj01@rbjones.com}
\date{\ }

\usepackage[unicode,pdftex]{hyperref}
\hypersetup{pdfauthor={Roger Bishop Jones}}
\hypersetup{colorlinks=true, urlcolor=black, citecolor=black, filecolor=black, linkcolor=black}

\begin{document}
\begin{titlepage}
\maketitle
\begin{abstract}
Some generic formal models of abstract semantics.
\end{abstract}
\vfill

\begin{centering}
{\footnotesize

Created 2004/07/15

Last Change $ $Date: 2009/03/31 17:52:57 $ $

\href{http://www.rbjones.com/rbjpub/pp/doc/t001.pdf}
{http://www.rbjones.com/rbjpub/pp/doc/t001.pdf}

$ $Id: t001.doc,v 1.8 2009/03/31 17:52:57 rbj Exp $ $

\copyright\ Roger Bishop Jones; Licenced under Gnu LGPL

}%footnotesize
\end{centering}

\thispagestyle{empty}
\end{titlepage}
\newpage
\addtocounter{page}{1}
%\section{DOCUMENT CONTROL}
%\subsection{Contents list}
\tableofcontents
%\newpage
%\subsection{Document cross references}

\subsection*{To Do}
\begin{itemize}

\item
Everything.

\end{itemize}

{\raggedright
\bibliographystyle{fmu}
\bibliography{rbj,fmu}
} %\raggedright

\newpage
\section{INTRODUCTION}

To model the fundamental notion of ``logical truth'', we consider various ways in which the semantics of languages can be formally defined.
There are many ways of doing this.
The choice of how to render the semantics may be part of the process of defining a language or class of languages.
Definitions of logical truth are then specific to classes of languages which have the same kind of formal semantics.




\section{Bare-Boned Truth-Conditions}\label{Bare-Boned Truth-Conditions}

\ignore{
\subsection{Technical Prelude}

First of all, we must give the the ML commands to  introduce the new theory ``analytic'' as a child of the theory ``hol''.

=SML
open_theory "misc2";
force_new_theory "t001a";
set_merge_pcs["misc21"];
=TEX
}%ignore


\subsection{Types}

The following ``primitive'' types are introduced:

=SML
new_type("S",0);  (* sentences *) 
new_type("C",0);  (* contexts *)
new_type("W",0);  (* possible worlds *)
new_type("P",0);  (* propositions *)
=TEX

\subsection{The Semantics}

The semantics of our language comes in two parts.
A semantic map which delivers propositions, the meanings of sentences in context,
and a propositional evaluation map, which extracts truth conditions from a proposition.

¹HOLCONST
Ü ÛsmÝ : S ¸ C ­ P
÷üüüüüü
Ü T
°

¹HOLCONST
Ü ÛpemÝ : P ¸ W ­ TTV
÷üüüüüü
Ü T
°

Note that $TTV$ is a type consisting of three `truth' values, whose names are: $pTrue$, $pFalse$ and $pU$.

\subsection{Necessity}

A proposition is `necessarily t' if it takes truth value `t' in every possible world.

¹HOLCONST
Ü ÛnecessarilyÝ : TTV ­ P ­ BOOL
÷üüüüüü
Ü µt:TTV; p:P· necessarily t p ¤ µw:W· pem(p, w) = t
°

A proposition is {\it necessary} (simpliciter) if it is {\it necessarily t} for some truth value {\it t}.

¹HOLCONST
Ü ÛnecessaryÝ : P ­ BOOL
÷üüüüüü
Ü µp:P· necessary p ¤ ¶t· necessarily t p
°

¹HOLCONST
Ü ÛcontingentÝ : P ­ BOOL
÷üüüüüü
Ü µp:P· contingent p ¤ ¶w1 w2· ³ pem(p, w1) = pem(p, w2)
°

\subsection{True in Virtue of Meaning}

A common definition of ``analytic'' is as `true in virtue of meaning', so we will now try to formalise that idea. 
If the truth value of a sentence can be ascertained from its meaning only, i.e. without taking into account any `extra-linguistic fact' (in Quine's words), i.e. without knowing anything about what possible world is actual.
This can only be known if it takes the same truth value in every possible world.

This can be generalised to an arbitrary truth value.

Therefore we define:

=SML
declare_infix (300, "by_meaning");
=TEX

¹HOLCONST
Ü $Ûby_meaningÝ : TTV ­ (S ¸ C) ­ BOOL
÷üüüüüü
Ü µt:TTV; s:S; c:C· t by_meaning (s, c) ¤ µp· pem (sm(s, c), p) = t
°

\subsection{Expresses a True Proposition}

My preferred definition of analyticity is that a sentence is analytic if it expresses a true proposition.
Again we generalise to an arbitrary truth value.
I'll make this infix as well.

=SML
declare_infix (300, "analytic");
=TEX

¹HOLCONST
Ü $ÛanalyticÝ : TTV ­ (S ¸ C) ­ BOOL
÷üüüüüü
Ü µt:TTV; s:S; c:C· t analytic (s, c) ¤ necessarily t (sm(s, c))
°

Now we prove that these two conception of analyticity are the same.

The proof is trivial, exanding the relevant definitions yields a universally quantified identity equation (apart from the names of the bound variables).
In the following proof script, the necessary rewriting is broken into two stages to show the identity.

=SML
set_goal([], ¬µt s c· t analytic (s,c) ¤ t by_meaning (s, c)®);
a (pure_rewrite_tac (map get_spec [¬$analytic®, ¬$by_meaning®, ¬necessarily®]));
=GFT
(* *** Goal "" *** *)

(* ?ô *)  ¬µ t s c· (µ w· pem (sm (s, c), w) = t) = (µ p· pem (sm (s, c), p) = t)®
=SML
a (rewrite_tac[]);
val analyticity_lemma1 = save_pop_thm "analyticity_lemma1";
=TEX

\subsection{Kant's Definition}

Kant defined analyticty only for "subject predicate" sentences, and some have therefore supposed this to be less general than more recent formulations.
However, asssuming only that the notion of analyticity is to be preserved by logical equivalence we can show that Kant's definition is equivalent to the preceding ones.

There is an awkwardness in generalising this notion to three truth values, so I will do it only for the one.

We will first define predicate inclusion.

=SML
declare_infix (300, "contains");
=TEX

¹HOLCONST
Ü $ÛcontainsÝ : ('a ­ BOOL) ­ ('a ­ BOOL) ­ BOOL
÷üüüüüü
Ü µP Q· P contains Q ¤ µx· Q x ´ P x
°

$P contains Q$ is a way of writing a subject predicate assertion in which the subject is $Q$ and the predicate is $P$.

Now we show that every judgement is equivalent to one in "subject predicate" form:

=GFT
kantian_lemma =
	ô µ SS· ¶ P Q· SS ¤ P contains Q
=TEX

=SML
set_goal([], ¬µSS· ¶P Q· SS ¤ P contains Q®);
a (strip_tac THEN ¶_tac ¬Ìx· SS® THEN ¶_tac ¬Ìx· T®);
a (rewrite_tac [get_spec ¬$contains®]);
val kantian_lemma =  save_pop_thm "kantian_lemma";
=TEX

This lemma may be applied generally, thus:

=SML
val î_gt_trans = µ_elim ¬µx y z:î· x > y ± y > z ´ x > z® kantian_lemma;
=TEX
yields:
=GFT
val î_gt_trans =
   ô ¶ P Q· (µ x y z· x > y ± y > z ´ x > z) ¤ P contains Q
=TEX


{\let\Section\section
\newcounter{ThyNum}
\def\section#1{\Section{#1}
\addtocounter{ThyNum}{1}\label{Theory\arabic{ThyNum}}}
\include{t001a.th}
}  %\let

\twocolumn[\section{INDEX}\label{index}]
{\small\printindex}

\end{document}
