=TEX
\def\rbjidtDGdoc{$$Id: t030.doc,v 1.1 2009/06/27 19:48:39 rbj Exp $$}

\section{The Tractatus}

I will begin by attempting to present a formal model of (aspects of) Wittgenstein's Tractatus\cite{wittgenstein1921} in a structure similar to his own.
Since I am working in a formal context in which constants must be defined (or otherwise introduced) before use, this is likely to prove awkward.
My politicy is to fix that by moving the introduction of constants forward as necessary and retaining
a section structure similar to Witgenstein's, albeit with some things appearing in it earlier than they do in Wittgenstein.
I will use forward references to indicate which section they appear in Wittgenstein.

=SML
open_theory "rbjmisc";
force_new_theory "tract01";
=TEX

\subsection{The World}

Wittgenstein says that a world consists of facts rather than things, that it is all the facts, that these tell us both what is the case and what is not the case, that they are ``in logical space'' and that they are logically independent.

I take this to be analogous to atomic propositions, the requirement that we know both what is and is not the case is satisfied if we have all the true atomic proposition, without any negated propositions, and this also best meets the requirement for logical independence.
We do not know here what a fact is so the information we have here is best caputured by a type constructor or a function (depending on whether we think the facts will be a type or a set).

I will assume that it will be a type (this can probably be arranged).
WIttgenstein, has implicitly alluded to possible worlds in 1.21 (though is not necessarily `ontologically committed'), and we might think of the type {\it (F)WORLD} being the type of all possibile worlds whose facts have type {\it F}.

=SML
declare_type_abbrev("WORLD", ["'a"], ”'a ð®);
=TEX

The world is then, something of type ”(F)WORLD®, which I will refrain from introducing until we know more about what a fact is.

\subsection{States of Affairs}

A state of affairs is some combination of objects.

=SML
new_type("OBJECT", 0);
=TEX

It must therefore involve a collection of objects possibly with some information about how they are combined (allowing that the same set of objects might be combined in more that one way).

Because we later find other kinds of object which have similar structure to states of affairs, we will use the same type constructor in each case, applying the constructor to different types as appropriate.

In order to give structure to a collection we must first distinguish the elements of the collection and then supply some recipe for 

=SML
declare_type_abbrev("CONSTRUCTION", ["'a", "'b", "'c"], ”('a ­ 'b + ONE) ¸'c®);
=TEX

In the above definition, a {\it CONSTRUCTION}, is a type constructor of which the first type parameter is a type of indexes or tags, the the second a type of things.
This represents collections of objects which are indexed rather than an unstructured, allowing the same object to be used more than once, and allowing that an object be supplied for inclusion in the structure in some specific place.
The final type is the form of construction which tells us all about its structure apart from from what it is constructed, including information telling where in the structure the parts appear using index values or tags to indicate which object appears in each place.

This is a generalisation of the idea of atomic proposition which generalises the finite and linear structure of language.

\subsection{Thoughts and Propositions}

The things which stand for objects in propositions are names.

=SML
new_type("NAME", 0);
=TEX

\subsection{Propositions as Truth Functions}

\subsection{The General Form of a Proposition}

\section{Russell's Logical Atomism}

\section{Emil Post on Propositional Logic}

