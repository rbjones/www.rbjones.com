=TEX
\def\rbjidtADJdoc{$$Id: t039.doc,v 1.4 2010/08/05 12:04:21 rbj Exp $$}

\section{Equivalence Relations}

=SML
open_theory "rbjmisc";
force_new_theory "equiv";
force_new_pc €"'equiv"›;
merge_pcs ["'prove_∂_¥_conv", "'savedthm_cs_∂_proof"] "'equiv";
set_merge_pcs ["rbjmisc", "'equiv"];
=TEX

=SML
declare_infix(230, "¶");
declare_infix(230, "¶âl");
declare_infix(230, "¶âr");
=TEX

It will be convenient to name an uncurried version of \emph{QuotientSet}:

πHOLCONST
‹ €EquivClasses› : ('a SET ∏ ('a ≠ 'a ≠ BOOL)) ≠ ('a SET SET)
˜¸¸¸¸¸¸
‹ EquivClasses = Uncurry QuotientSet
∞

=GFT
€EquivClasses_thm› =
   Ù EquivClasses (X, $¶) = {A|∂ x∑ x ç X ± A = EquivClass (X, $¶) x}

€EquivClasses_thm1› =
   Ù µ r∑ EquivClasses r = {A|∂ x∑ x ç Fst r ± A = EquivClass r x}
=TEX
\ignore{
=SML
push_pc "hol";

val EquivClasses_def = get_spec ¨EquivClassesÆ;

set_goal([], ¨µ(X, $¶)∑ EquivClasses (X, $¶) = {A|∂ x∑ x ç X ± A = EquivClass (X, $¶) x}Æ);
a (REPEAT strip_tac THEN rewrite_tac [quotient_set_def, EquivClasses_def]);
val EquivClasses_thm = save_pop_thm "EquivClasses_thm";

set_goal([], ¨µr∑ EquivClasses r = {A|∂ x∑ x ç Fst r ± A = EquivClass r x}Æ);
a (REPEAT µ_tac THEN split_pair_rewrite_tac [¨rÆ] [EquivClasses_thm]);
a (rewrite_tac[]);
val EquivClasses_thm1 = save_pop_thm "EquivClasses_thm1";
=TEX
}%ignore

=GFT
€EquivClasses_sub_thm› =
   Ù µ (D, $¶)∑ Equiv (D, $¶) ¥ (µ l∑ l ç EquivClasses (D, $¶) ¥ l Ä D)

€EquivClasses_sub_thm1› =
   Ù µ r∑ Equiv r ¥ (µ l∑ l ç EquivClasses r ¥ l Ä Fst r)
=TEX

\ignore{
=SML
set_goal([], ¨µ(D, $¶)∑ Equiv(D, $¶) ¥ µl∑ l ç EquivClasses (D, $¶) ¥ l Ä DÆ);
a (PC_T "hol1" (rewrite_tac [EquivClasses_thm, get_spec ¨EquivClassÆ] THEN REPEAT strip_tac));
a (all_asm_fc_tac[]);
val EquivClasses_sub_thm = save_pop_thm "EquivClasses_sub_thm";

set_goal([], ¨µr∑ Equiv r ¥ µl∑ l ç EquivClasses r ¥ l Ä Fst rÆ);
a (REPEAT µ_tac THEN split_pair_rewrite_tac [¨rÆ][]);
a (REPEAT strip_tac THEN all_asm_fc_tac [EquivClasses_sub_thm]);
a (asm_rewrite_tac[]);
val EquivClasses_sub_thm1 = save_pop_thm "EquivClasses_sub_thm1";
=TEX
}%ignore

\subsection{Products of Equivalence Relations}\label{PER}

I am providing an alternative way of lifting operators from some type to equivalence classes over the type.
The treatment of dyadic operators, which in {\Product} have to be curried if they are to be used infix, is done by uncurrying and then lifting as if a monadic function over the cartesian product.

This will lift to the product equivalence classes so we need a treatment of products of equivalence relations.

=GFT
€Equiv_RelProd_thm› =
   Ù µ (L, $¶âl) (R, $¶âr)∑
	Equiv (L, $¶âl) ± Equiv (R, $¶âr) ¥ Equiv ((L, $¶âl) RelProd (R, $¶âr))
=TEX

\ignore{
=SML
push_pc "hol1";

set_goal([], ¨µ(L, $¶âl) (R, $¶âr)∑ Equiv(L, $¶âl) ± Equiv(R, $¶âr) ¥ Equiv ((L, $¶âl) RelProd (R, $¶âr))Æ);
a (REPEAT strip_tac THEN fc_tac [equiv_def]);
a (split_pair_rewrite_tac [¨(L, $¶âl) RelProd (R, $¶âr)Æ] [equiv_def]);
a (rewrite_tac[] THEN REPEAT strip_tac);
a (all_fc_tac [Refl_RelProd_thm]);
a (all_fc_tac [Sym_RelProd_thm]);
a (all_fc_tac [Trans_RelProd_thm]);
val Equiv_RelProd_thm = save_pop_thm "Equiv_RelProd_thm";

pop_pc();
=TEX
}%ignore

\ignore{
=IGN
add_pc_thms "'rbjmisc" (map get_spec [] @ []);
set_merge_pcs ["basic_hol", "'sets_alg", "'Ø", "'rbjmisc"];
=TEX
}%ignore

=GFT
€EquivClass_RelProd_thm› =
   Ù µ (L, $¶âl) (R, $¶âr)∑ Equiv (L, $¶âl) ± Equiv (R, $¶âr)
         ¥ (µ xl xr yl yr∑ xl ç L ± xr ç R ± yl ç L ± yr ç R
             ¥ ((xl, xr) ç EquivClass ((L, $¶âl) RelProd (R, $¶âr)) (yl, yr)
               § xl ç EquivClass (L, $¶âl) yl
                 ± xr ç EquivClass (R, $¶âr) yr))
=TEX
=GFT
€EquivClass_RelProd_thm1› =
   Ù µ (L, $¶âl) (R, $¶âr)∑ Equiv (L, $¶âl) ± Equiv (R, $¶âr)
         ¥ (µ l r∑ l ç L ± r ç R
             ¥ EquivClass ((L, $¶âl) RelProd (R, $¶âr)) (l, r)
                = (EquivClass (L, $¶âl) l ∏ EquivClass (R, $¶âr) r))
=TEX

\ignore{
=SML
set_goal([], ¨µ(L, $¶âl) (R, $¶âr)∑ Equiv(L, $¶âl) ± Equiv(R, $¶âr) ¥ µxl xr yl yr∑ yl ç L ± yr ç R ¥ ((xl, xr) ç EquivClass ((L, $¶âl) RelProd (R, $¶âr)) (yl, yr)
	§ xl ç EquivClass (L, $¶âl) yl ± xr ç EquivClass (R, $¶âr) yr)Æ);
a (REPEAT µ_tac THEN strip_tac THEN rewrite_tac [RelProd_def, get_spec ¨EquivClassÆ] THEN REPEAT strip_tac
	THEN asm_rewrite_tac [rel_ç_in_clauses]);
val EquivClass_RelProd_thm = save_pop_thm "EquivClass_RelProd_thm";

set_goal([], ¨µ(L, $¶âl) (R, $¶âr)∑ Equiv(L, $¶âl) ± Equiv(R, $¶âr)
	¥ µl r∑ l ç L ± r ç R ¥ EquivClass ((L, $¶âl) RelProd (R, $¶âr)) (l, r) = ((EquivClass (L, $¶âl) l) ∏ (EquivClass (R, $¶âr) r))Æ);
a (REPEAT strip_tac
	THEN rewrite_tac [sets_ext_clauses]
	THEN strip_tac
	THEN split_pair_rewrite_tac [¨xÆ] [rel_ç_in_clauses]
	THEN REPEAT strip_tac
	THEN_TRY all_fc_tac [EquivClass_RelProd_thm]);
a (all_ufc_§_rewrite_tac [EquivClass_RelProd_thm] THEN contr_tac);
val EquivClass_RelProd_thm1 = save_pop_thm "EquivClass_RelProd_thm1";
=TEX
}%ignore

=GFT
€EquivClasses_RelProd_thm› =
   Ù µ (L, $¶âl) (R, $¶âr)∑ Equiv (L, $¶âl) ± Equiv (R, $¶âr) ¥ (µ l r∑
		(l ∏ r) ç EquivClasses ((L, $¶âl) RelProd (R, $¶âr))
		§ l ç EquivClasses (L, $¶âl) ± r ç EquivClasses (R, $¶âr))
=TEX
=GFT
€EquivClasses_RelProd_thm1› =
   Ù µ (L, $¶âl) (R, $¶âr)∑ Equiv (L, $¶âl) ± Equiv (R, $¶âr) ¥ (µ x∑
		x ç EquivClasses ((L, $¶âl) RelProd (R, $¶âr))
             § (∂ l r∑ x = (l ∏ r)
                 ± l ç EquivClasses (L, $¶âl)
                 ± r ç EquivClasses (R, $¶âr)))
=TEX
=GFT
€EquivClasses_RelProd_thm2› =
   Ù µ (L, $¶âl) (R, $¶âr)∑ Equiv (L, $¶âl) ± Equiv (R, $¶âr)
         ¥ EquivClasses ((L, $¶âl) RelProd (R, $¶âr))
           = EquivClasses (L, $¶âl) ∏âD EquivClasses (R, $¶âr)
=TEX

\ignore{
=SML
set_goal([], ¨µ(L, $¶âl) (R, $¶âr)∑ Equiv(L, $¶âl) ± Equiv(R, $¶âr) ¥ µl r∑ (l ∏ r) ç EquivClasses ((L, $¶âl) RelProd (R, $¶âr))
	         § l ç EquivClasses (L, $¶âl) ± r ç EquivClasses (R, $¶âr)Æ);
a (split_pair_rewrite_tac [¨(L, $¶âl) RelProd (R, $¶âr)Æ][EquivClasses_thm] THEN REPEAT_N 9 strip_tac);
a (rewrite_tac [ç_in_clauses]);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (DROP_NTH_ASM_T 2 ante_tac THEN rewrite_tac [RelProd_projections_thm]);
a (split_pair_rewrite_tac [¨xÆ][rel_ç_in_clauses] THEN strip_tac);
a (∂_tac ¨Fst xÆ THEN asm_rewrite_tac[]);
a (all_fc_tac [equiv_class_ç_thm]);
a (DROP_NTH_ASM_T 5 ante_tac);
a (split_pair_rewrite_tac [¨xÆ][]);
a (ALL_UFC_T rewrite_tac [EquivClass_RelProd_thm1]);
a (STRIP_T (asm_tac o eq_sym_rule) THEN all_fc_tac [cp_eq_thm1]);
a (asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (DROP_NTH_ASM_T 2 ante_tac THEN rewrite_tac [RelProd_projections_thm]);
a (split_pair_rewrite_tac [¨xÆ][rel_ç_in_clauses] THEN strip_tac);
a (∂_tac ¨Snd xÆ THEN asm_rewrite_tac[]);
a (all_fc_tac [equiv_class_ç_thm]);
a (DROP_NTH_ASM_T 5 ante_tac);
a (split_pair_rewrite_tac [¨xÆ][]);
a (ALL_UFC_T rewrite_tac [EquivClass_RelProd_thm1]);
a (STRIP_T (asm_tac o eq_sym_rule) THEN all_fc_tac [cp_eq_thm1]);
a (asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a (∂_tac ¨(x,x')Æ THEN asm_rewrite_tac[RelProd_projections_thm, rel_ç_in_clauses]);
a (ALL_FC_T rewrite_tac [EquivClass_RelProd_thm1]);
val EquivClasses_RelProd_thm = save_pop_thm "EquivClasses_RelProd_thm";

set_goal([], ¨µ(L, $¶âl) (R, $¶âr)∑ Equiv(L, $¶âl) ± Equiv(R, $¶âr) ¥ µx∑ x ç EquivClasses ((L, $¶âl) RelProd (R, $¶âr))
	         § ∂l r∑ x = (l ∏ r) ± l ç EquivClasses (L, $¶âl) ± r ç EquivClasses (R, $¶âr)Æ);
a (split_pair_rewrite_tac [¨(L, $¶âl) RelProd (R, $¶âr)Æ][EquivClasses_thm] THEN REPEAT_N 9 strip_tac);
a (rewrite_tac [ç_in_clauses]);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (DROP_NTH_ASM_T 2 ante_tac THEN rewrite_tac [RelProd_projections_thm]);
a (split_pair_rewrite_tac [¨x'Æ][rel_ç_in_clauses] THEN strip_tac);
a (∂_tac ¨EquivClass (L, $¶âl) (Fst x')Æ THEN ∂_tac ¨EquivClass (R, $¶âr) (Snd x')Æ THEN asm_rewrite_tac[]);
a (all_fc_tac [equiv_class_ç_thm]);
a (DROP_NTH_ASM_T 5 ante_tac);
a (split_pair_rewrite_tac [¨x'Æ][]);
a (ALL_UFC_T rewrite_tac [EquivClass_RelProd_thm1]);
a (STRIP_T (asm_tac o eq_sym_rule) THEN all_fc_tac [cp_eq_thm1]);
a (REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a (∂_tac ¨Fst x'Æ THEN asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a (∂_tac ¨Snd x'Æ THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (∂_tac ¨x', x''Æ THEN asm_rewrite_tac[RelProd_projections_thm]);
a (rewrite_tac [rel_ç_in_clauses] THEN REPEAT strip_tac);
a (ALL_UFC_T rewrite_tac [EquivClass_RelProd_thm1]);
val EquivClasses_RelProd_thm1 = save_pop_thm "EquivClasses_RelProd_thm1";

set_goal([], ¨µ(L, $¶âl) (R, $¶âr)∑ Equiv(L, $¶âl) ± Equiv(R, $¶âr) ¥ EquivClasses ((L, $¶âl) RelProd (R, $¶âr))
	         = (EquivClasses (L, $¶âl) ∏âD EquivClasses (R, $¶âr))Æ);
a (REPEAT strip_tac THEN rewrite_tac [sets_ext_clauses, ∏âD_ext_thm]);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (all_fc_tac [EquivClasses_RelProd_thm1]);
a (∂_tac ¨lÆ THEN ∂_tac ¨rÆ THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (all_ufc_§_rewrite_tac [EquivClasses_RelProd_thm1]);
a (∂_tac ¨leqÆ THEN ∂_tac ¨reqÆ THEN asm_rewrite_tac[sets_ext_clauses]);
val EquivClasses_RelProd_thm2 = save_pop_thm "EquivClasses_RelProd_thm2";
=TEX
}%ignore

=GFT
=TEX

\ignore{
=IGN
val QuotientClasses_RelProd_thm2 = rewrite_rule [EquivClasses_def, RelProd_projections_thm] EquivClasses_RelProd_thm2;

set_goal([])

=SML
pop_pc();
=TEX
}%ignore

\subsection{Powers of Equivalence Relations}

=GFT
€RelPower_Equiv_thm› =
   Ù µ (D, $¶) is∑ Equiv (D, $¶) ¥ Equiv (RelPower (D, $¶) is)
=TEX

\ignore{
=SML
set_goal([], ¨µ(D, $¶) is∑ Equiv(D, $¶) ¥ Equiv(RelPower (D, $¶) is)Æ);
a (REPEAT µ_tac THEN split_pair_rewrite_tac [¨RelPower (D, $¶) isÆ] [equiv_def] THEN strip_tac);
a (rewrite_tac [pair_clauses]);
a (all_fc_tac [RelPower_Trans_thm, RelPower_Sym_thm, RelPower_Refl_thm]
	THEN asm_rewrite_tac[]);
val RelPower_Equiv_thm = save_pop_thm "RelPower_Equiv_thm";

=IGN
set_goal([], ¨µ(D, $¶) is∑ Equiv(D, $¶) ¥ µf∑ (µi∑ i ç is ¥ f i ç D) 
	¥ EquivClass (RelPower (D, $¶) is) f = {g | µi∑ i ç is ¥ g i ç (EquivClass (D, $¶) (f i))}Æ);
a (REPEAT µ_tac THEN rewrite_tac [RelPower_def]);
=TEX
}%ignore

\subsection{Lifting Operators to Quotient Types}

The conditions for a function to be liftable from a type to a quotient of that type are now expressed.
This will be possible of the function ``respects'' the equivalence relations which determine the relevant quotient types.

The definition give here differs from {\it Respects} in theory {\it equiv\_rel} in expressing conditions for lifting both on the domain and the codomain relative to possibly distinct equivalence relation, and therefore requires that if two elements of the domain are equivalent under one relationship then the results of the function on these two elements will be equivalent under the other relationship.

=SML
declare_infix(200, "Respects1");
declare_infix(230, "¶âd");
declare_infix(230, "¶âc");
declare_infix(230, "¶âe");
declare_infix(230, "¶âf");
=TEX

πHOLCONST
‹ €$Respects1› : ('a ≠ 'b) ≠ (('a SET ∏ ('a ≠ 'a ≠ BOOL)) ∏ ('b SET ∏ ('b ≠ 'b ≠ BOOL))) ≠ BOOL
˜¸¸¸¸¸¸
‹ µ f $¶âc $¶âd C D∑ (f Respects1 ((D, $¶âd), (C, $¶âc)))
	§ µx y∑x ç D ± y ç D ± x ¶âd y ¥ f x ç C ± f y ç C ± f x ¶âc f y
∞

=GFT
€Respects1_Respects_thm› =
   Ù µ f $¶âd C D∑ f Respects1 ((D, $¶âd), Universe, $=) § (f Respects $¶âd) D 

€Respects1_Refines_thm› =
   Ù µ f $¶âd =âc $¶âe =âf D C∑
	f Respects1 ((D, $¶âd), C, $¶âc)
           ± ($¶âe Refines $¶âd) D
           ± ($¶âc Refines $¶âf) C
         ¥ f Respects1 ((D, $¶âe), C, $¶âf)
=TEX
=GFT
€eq_Refines_thm› =
   Ù µ $¶âd D∑ Equiv (D, $¶âd) ¥ ($= Refines $¶âd) D

€constant_img_thm1› =
   Ù µ f A a c∑ a ç A ± (µ x∑ x ç A ¥ f x = c)
	¥ (≈ y∑ ∂ x∑ x ç A ± y = f x) = c
=TEX

\ignore{
=SML
set_goal([], ¨µ f $¶âd D∑ (f Respects1 ((D, $¶âd), (Universe, $=))) § (f Respects $¶âd) DÆ);
a (REPEAT µ_tac THEN rewrite_tac (map get_spec [¨$Respects1Æ, ¨$RespectsÆ]) THEN REPEAT strip_tac
	THEN all_asm_ufc_tac[]);
val Respects1_Respects_thm = save_pop_thm "Respects1_Respects_thm";

set_goal([], ¨µ f $¶âd $=âc $¶âe $=âf D C∑ (f Respects1 ((D, $¶âd), (C, $¶âc))) ± ($¶âe Refines $¶âd) D ± ($¶âc Refines $¶âf) C
	¥ (f Respects1 ((D, $¶âe), (C, $¶âf)))Æ);
a (REPEAT µ_tac THEN rewrite_tac (map get_spec [¨$Respects1Æ, ¨$RefinesÆ]) THEN REPEAT strip_tac
	THEN all_asm_ufc_tac[] THEN REPEAT (all_asm_ufc_tac[]));
val Respects1_Refines_thm = save_pop_thm "Respects1_Refines_thm";

set_goal([], ¨µ $¶âd D∑ Equiv (D, $¶âd) ¥ ($= Refines $¶âd) DÆ);
a (REPEAT µ_tac THEN rewrite_tac (map get_spec [¨$RefinesÆ, ¨$EquivÆ, ¨$ReflÆ])
	THEN REPEAT strip_tac
	THEN REPEAT (all_asm_ufc_tac[])
	THEN asm_rewrite_tac[]);
val eq_Refines_thm = save_pop_thm "eq_Refines_thm";

set_goal([], ¨
	µf A a c∑
		a ç A ± (µx∑x ç A ¥ f x = c)
	¥	(≈y∑ ∂x∑ x ç A ± y = f x) = c
Æ);
a(REPEAT strip_tac);
a(≈_tac ¨≈ y∑ ∂ x∑ x ç A ± y = f xÆ);
(* *** Goal "1" *** *)
a(∂_tac¨cÆ THEN ∂_tac¨aÆ THEN REPEAT strip_tac);
a (asm_fc_tac[] THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (LEMMA_T ¨c = f xÆ asm_rewrite_thm_tac);
a (ASM_FC_T rewrite_tac []);
val €constant_img_thm1› = save_pop_thm "constant_img_thm1";
=TEX
}%ignore

The following operator lifts a function over a pair of equivalence relations respected by the function.
This definition allows that they domain and codomains are of different type, and will provide the basis for lifting monadic and dyadic operators in a single sorted theory.

=SML
declare_infix(200, "LiftOver");
=TEX

πHOLCONST
‹ €$LiftOver› : ('a ≠ 'b)
‹	≠ (('a SET ∏ ('a ≠ 'a ≠ BOOL)) ∏ ('b SET ∏ ('b ≠ 'b ≠ BOOL)))
‹	≠ ('a SET ≠ 'b SET)
˜¸¸¸¸¸¸
‹ µ f (D, $¶âd) (C, $¶âc)∑ (f LiftOver ((D, $¶âd), (C, $¶âc)))
‹	= Ãx∑ ≈y∑ ∂z∑ z ç x ± y = EquivClass (C, $¶âc) (f z)
∞

=GFT
€LiftOver_thm› =
   Ù µ f (D, $¶âd) (C, $¶âc) de ce∑
	     Equiv (D, $¶âd)
           ± Equiv (C, $¶âc)
           ± f Respects1 ((D, $¶âd), C, $¶âc)
           ± de ç D / $¶âd
           ± ce ç C / $¶âc
         ¥ ((f LiftOver ((D, $¶âd), C, $¶âc)) de = ce
           § (∂ d c∑ d ç D
               ± EquivClass (D, $¶âd) d = de
               ± EquivClass (C, $¶âc) c = ce
               ± c = f d))
=TEX

\ignore{
=SML
val Respects1_def= get_spec ¨$Respects1Æ;
val LiftOver_def= get_spec ¨$LiftOverÆ;

set_goal([], ¨
	µf (D, $¶âd) (C, $¶âc) de ce∑
		Equiv(D, $¶âd) ± Equiv(C, $¶âc)
	±	(f Respects1 ((D, $¶âd), (C, $¶âc)))
	±	de ç (D / $¶âd) ± ce ç (C / $¶âc)
	¥	((f LiftOver ((D, $¶âd), (C, $¶âc))) de = ce
		§ ∂d c∑ d ç D ± EquivClass (D, $¶âd) d = de ± EquivClass (C, $¶âc) c = ce
			± c = f d)
Æ);
a(rewrite_tac[Respects1_def, LiftOver_def] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a (all_fc_tac [list_µ_elim [¨DÆ,¨$¶âdÆ] quotient_map_onto_thm]);
a (∂_tac ¨xÆ THEN ∂_tac ¨f xÆ THEN_TRY asm_rewrite_tac[]);
a (SYM_ASMS_T rewrite_tac);
a (≈_tac ¨(≈ y∑ ∂ z∑ z ç de ± y = EquivClass (C, $¶âc) (f z))Æ);
(* *** Goal "1.1" *** *)
a (lemma_tac ¨x ç deÆ THEN1 (all_fc_tac [equiv_class_ç_thm] THEN asm_rewrite_tac[]));
a (∂_tac ¨EquivClass (C, $¶âc) (f x)Æ THEN ∂_tac  ¨xÆ THEN_TRY asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a (asm_rewrite_tac[]);
a (lemma_tac ¨z ç DÆ THEN1 all_fc_tac [all_µ_intro quotient_ç_thm]);
a (lemma_tac ¨x ¶âd zÆ);
(* *** Goal "1.2.1" *** *)
a (DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[get_spec ¨EquivClassÆ]);
(* *** Goal "1.2.2" *** *)
a (all_asm_fc_tac[]);
a (all_ufc_§_tac[equiv_class_eq_thm]);
(* *** Goal "2" *** *)
a (≈_tac ¨(≈ y∑ ∂ z∑ z ç de ± y = EquivClass (C, $¶âc) (f z))Æ);
(* *** Goal "2.1" *** *)
a (∂_tac ¨EquivClass (C, $¶âc) (f d)Æ THEN ∂_tac  ¨dÆ THEN_TRY asm_rewrite_tac[]);
a (SYM_ASMS_T rewrite_tac);
a (all_fc_tac[equiv_class_ç_thm]);
(* *** Goal "2.2" *** *)
a (asm_rewrite_tac[]);
a (lemma_tac ¨z ç DÆ THEN1 all_fc_tac [all_µ_intro quotient_ç_thm]);
a (lemma_tac ¨d ¶âd zÆ);
(* *** Goal "2.2.1" *** *)
a (DROP_NTH_ASM_T 3 ante_tac THEN SYM_ASMS_T rewrite_tac);
a (rewrite_tac[get_spec ¨EquivClassÆ]);
a (REPEAT strip_tac);
(* *** Goal "2.2.2" *** *)
a (all_asm_fc_tac[]);
a (LEMMA_T ¨ce = EquivClass (C, $¶âc) (f d)Æ rewrite_thm_tac THEN1 SYM_ASMS_T rewrite_tac);
a (ALL_UFC_§_T (rewrite_tac) [equiv_class_eq_thm]);
a (all_fc_tac [equiv_def]);
a (all_fc_tac [sym_def]);
val LiftOver_thm = save_pop_thm "LiftOver_thm";
=TEX
}%ignore

\subsection{Lifting Monadic Operators}

=SML
declare_infix(200, "MonOpRespects");
=TEX

πHOLCONST
‹ €$MonOpRespects› : ('a ≠ 'a) ≠ ('a SET ∏ ('a ≠ 'a ≠ BOOL)) ≠ BOOL
˜¸¸¸¸¸¸
‹ µ f eq∑ f MonOpRespects eq § f Respects1 (eq, eq)
∞

=GFT
€MonOpRespects_thm› =
   Ù µ f C $¶∑ f MonOpRespects (C, $¶) § (µ x y∑ x ç C ± y ç C ± x ¶ y ¥ f x ç C ± f y ç C ± f x ¶ f y)
=TEX

\ignore{
=SML
set_goal([], ¨µ f C $¶∑ f MonOpRespects (C, $¶) § µx y∑x ç C ± y ç C ± x ¶ y ¥ f x ç C ± f y ç C ± f x ¶ f yÆ);
a (REPEAT µ_tac THEN rewrite_tac [get_spec ¨$MonOpRespectsÆ, get_spec ¨$Respects1Æ]);
val MonOpRespects_thm = save_pop_thm "MonOpRespects_thm";
=TEX
}%ignore

The following operator lifts a monadic operator over an equivalence relations respected by the operator.

=SML
declare_infix(210, "MonOpLift");
=TEX

πHOLCONST
‹ €$MonOpLift› : ('a ≠ 'a)
‹	≠ ('a SET ∏ ('a ≠ 'a ≠ BOOL))
‹	≠ ('a SET ≠ 'a SET)
˜¸¸¸¸¸¸
‹ µ f (D, $¶âd)∑ f MonOpLift (D, $¶âd) = f LiftOver ((D, $¶âd), (D, $¶âd))
∞
=GFT
€MonOpLift_thm› =
   Ù µ f (D, $¶âd) de ce
     ∑ Equiv (D, $¶âd)
           ± f Respects1 ((D, $¶âd), D, $¶âd)
           ± de ç D / $¶âd
           ± ce ç D / $¶âd
         ¥ ((f MonOpLift (D, $¶âd)) de = ce
           § (∂ d c∑ d ç D
               ± EquivClass (D, $¶âd) d = de
               ± EquivClass (D, $¶âd) c = ce
               ± c = f d))
=TEX

\ignore{
=SML
val MonOpRespects_def= get_spec ¨$MonOpRespectsÆ;
val MonOpLift_def= get_spec ¨$MonOpLiftÆ;

push_pc "hol";

set_goal([], ¨
	µf (D, $¶âd) de ce∑
		Equiv(D, $¶âd)
	±	(f MonOpRespects (D, $¶âd))
	±	de ç (D / $¶âd) ± ce ç (D / $¶âd)
	¥	((f MonOpLift (D, $¶âd)) de = ce
		§ ∂d c∑ d ç D ± EquivClass (D, $¶âd) d = de ± EquivClass (D, $¶âd) c = ce
			± c = f d)
Æ);
a(rewrite_tac[MonOpLift_def, MonOpRespects_def] THEN REPEAT_N 7 strip_tac);
a (ALL_UFC_§_T (rewrite_tac) [LiftOver_thm]);
val MonOpLift_thm = save_pop_thm "MonOpLift_thm";
=TEX
}%ignore

\subsection{Lifting Dyadic Operators}

=SML
declare_infix(200, "DyOpRespects");
=TEX

πHOLCONST
‹ €$DyOpRespects› : ('a ≠ 'a ≠ 'a) ≠ ('a SET ∏ ('a ≠ 'a ≠ BOOL)) ≠ BOOL
˜¸¸¸¸¸¸
‹ µ f eq∑ f DyOpRespects eq § (Uncurry f) Respects1 (eq RelProd eq, eq)
∞

=GFT
€DyOpRespects_thm› =
   Ù µ f C $¶∑ f DyOpRespects (C, $¶)
         § (µ x1 y1 x2 y2∑ x1 ç C ± y1 ç C ± x2 ç C ± y2 ç C ± x1 ¶ x2 ± y1 ¶ y2
             ¥ f x1 y1 ç C ± f x2 y2 ç C ± f x1 y1 ¶ f x2 y2)
=TEX

\ignore{
=SML
set_goal([], ¨µ f C $¶∑ f DyOpRespects (C, $¶) § µx1 y1 x2 y2∑ x1 ç C ± y1 ç C ± x2 ç C ± y2 ç C ± x1 ¶ x2 ± y1 ¶ y2 ¥ f x1 y1 ç C ± f x2 y2 ç C ± f x1 y1 ¶ f x2 y2Æ);
a (REPEAT µ_tac THEN rewrite_tac [get_spec ¨$DyOpRespectsÆ, get_spec ¨$Respects1Æ, get_spec ¨UncurryÆ, get_spec ¨$RelProdÆ]);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (lemma_tac ¨(x1,y1) ç (C ∏ C) ± (x2,y2) ç (C ∏ C)Æ THEN1 asm_rewrite_tac[get_spec ¨$∏Æ]);
a (LIST_SPEC_NTH_ASM_T 9 [¨x1,y1Æ, ¨x2,y2Æ] (strip_asm_tac o (rewrite_rule[])));
(* *** Goal "2" *** *)
a (lemma_tac ¨(x1,y1) ç (C ∏ C) ± (x2,y2) ç (C ∏ C)Æ THEN1 asm_rewrite_tac[get_spec ¨$∏Æ]);
a (LIST_SPEC_NTH_ASM_T 9 [¨x1,y1Æ, ¨x2,y2Æ] (strip_asm_tac o (rewrite_rule[])));
(* *** Goal "3" *** *)
a (lemma_tac ¨(x1,y1) ç (C ∏ C) ± (x2,y2) ç (C ∏ C)Æ THEN1 asm_rewrite_tac[get_spec ¨$∏Æ]);
a (LIST_SPEC_NTH_ASM_T 9 [¨x1,y1Æ, ¨x2,y2Æ] (strip_asm_tac o (rewrite_rule[])));
(* *** Goal "4" *** *)
a (all_asm_ufc_tac[]);
(* *** Goal "5" *** *)
a (all_asm_ufc_tac[]);
(* *** Goal "6" *** *)
a (all_asm_ufc_tac[]);
val DyOpRespects_thm = save_pop_thm "DyOpRespects_thm";
=TEX
}%ignore

The following operator lifts a dyadic operator over an equivalence relations respected by the operator.

=SML
declare_infix(210, "DyOpLift");
=TEX

πHOLCONST
‹ €$DyOpLift› : ('a ≠ 'a ≠ 'a)
‹	≠ ('a SET ∏ ('a ≠ 'a ≠ BOOL))
‹	≠ ('a SET ≠ 'a SET ≠ 'a SET)
˜¸¸¸¸¸¸
‹ µ f (D, $¶âd)∑ f DyOpLift (D, $¶âd)
‹	= Ãx y∑((Uncurry f) LiftOver ((D, $¶âd) RelProd (D, $¶âd), (D, $¶âd))) (x ∏ y)
∞

=GFT
€DyOpLift_thm› =
   Ù µ f (D, $¶âd) l r c
     ∑ Equiv (D, $¶âd)
           ± f DyOpRespects (D, $¶âd)
           ± l ç D / $¶âd
           ± r ç D / $¶âd
           ± c ç D / $¶âd
         ¥ ((f DyOpLift (D, $¶âd)) l r = c
           § (∂ le re ce
           ∑ le ç D
               ± re ç D
               ± EquivClass (D, $¶âd) le = l
               ± EquivClass (D, $¶âd) re = r
               ± EquivClass (D, $¶âd) ce = c
               ± ce = f le re))
=TEX

\ignore{
=SML

push_pc "hol";

val DyOpRespects_def= get_spec ¨$DyOpRespectsÆ;
val DyOpLift_def= get_spec ¨$DyOpLiftÆ;

set_goal([], ¨
	µf (D, $¶âd) l r c∑
		Equiv(D, $¶âd)
	±	(f DyOpRespects (D, $¶âd))
	±	l ç (D / $¶âd) ± r ç (D / $¶âd) ± c ç (D / $¶âd)
	¥	((f DyOpLift (D, $¶âd)) l r = c
		§ ∂le re ce∑ le ç D ± re ç D ± EquivClass (D, $¶âd) le = l ± EquivClass (D, $¶âd) re = r ± EquivClass (D, $¶âd) ce = c
			± ce = f le re)
Æ);
a (rewrite_tac[DyOpLift_def, DyOpRespects_def] THEN REPEAT_N 8 strip_tac);
a (all_fc_tac [Equiv_RelProd_thm]);
a (lemma_tac ¨∂(D2, eD2)∑ (D, $¶âd) RelProd (D, $¶âd) = (D2, eD2)Æ THEN1 (∂_tac ¨(D, $¶âd) RelProd (D, $¶âd)Æ THEN rewrite_tac[]));
a (DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[] THEN strip_tac);
a (DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[] THEN strip_tac);
a (GET_NTH_ASM_T 3 (strip_asm_tac o (rewrite_rule [pair_clauses, RelProd_projections_thm]) o (eq_sym_rule)));
a (lemma_tac ¨(l ∏ r) ç  EquivClasses (D2, eD2)Æ);
(* *** Goal "1" *** *)
a (SYM_ASMS_T rewrite_tac);
a (all_ufc_§_rewrite_tac [EquivClasses_RelProd_thm]);
a (asm_rewrite_tac [EquivClasses_def]);
(* *** Goal "2" *** *)
a (POP_ASM_T (strip_asm_tac o (rewrite_rule [EquivClasses_def])));
a (all_fc_tac [quotient_map_onto_thm]);
a (ALL_UFC_§_T (rewrite_tac) [LiftOver_thm]);
a (REPEAT strip_tac);
(* *** Goal "2.1" *** *)
a (∂_tac ¨Fst dÆ THEN ∂_tac ¨Snd dÆ THEN ∂_tac ¨c'Æ THEN asm_rewrite_tac[]);
a (DROP_ASM_T ¨d ç D2Æ ante_tac THEN asm_rewrite_tac[]);
a (split_pair_rewrite_tac [¨dÆ][rel_ç_in_clauses]);
a (strip_tac THEN asm_rewrite_tac[]);
a (SYM_ASMS_T rewrite_tac);
a (DROP_NTH_ASM_T 5 ante_tac);
a (split_pair_rewrite_tac [¨dÆ] [eq_sym_rule (asm_rule  ¨(D, $¶âd) RelProd (D, $¶âd) = (D2, eD2)Æ)]);
a (ALL_FC_T rewrite_tac [EquivClass_RelProd_thm1]);
a (all_fc_tac [equiv_class_ç_thm]);
a (strip_tac);
a (all_ufc_§_tac [cp_eq_thm1]);
a (contr_tac);
(* *** Goal "2.2" *** *)
a (∂_tac ¨le,reÆ THEN ∂_tac ¨ceÆ THEN rewrite_tac[]);
a (rewrite_tac [asm_rule ¨D2 = (D ∏ D)Æ, rel_ç_in_clauses]);
a (REPEAT strip_tac);
a (SYM_ASMS_T rewrite_tac);
a (ALL_FC_T rewrite_tac [EquivClass_RelProd_thm1]);
val DyOpLift_thm = save_pop_thm "DyOpLift_thm";
=TEX
}%ignore

The following relation defines the relationship between a function which has been obtained by ``lifting'' a function over equvalence relations and the original.

=SML
declare_infix(200, "Lifts");
=TEX

πHOLCONST
‹ $€Lifts› : ('a SET ≠ 'b SET)
‹		≠	(('a SET ∏ ('a ≠ 'a ≠ BOOL))
‹			∏ ('a ≠ 'b)
‹			∏ ('b SET ∏ ('b ≠ 'b ≠ BOOL)))
‹		≠ BOOL
˜¸¸¸¸¸¸
‹ µ f D C ($¶âd, g, $¶âc)∑ f Lifts ((D, $¶âd), g, (C, $¶âc))
‹		§ (µx y∑ x ç (D / $¶âd) ± y ç x ¥ g y ç f x)
∞

=GFT

=TEX

\ignore{
=SML
set_goal([], ¨µf D C $¶âd $¶âc∑ g Respects1 ((D, $¶âd), (C, $¶âc)) ¥ ∂f∑ f Lifts ((D, $¶âd), g, (C, $¶âc))Æ);
a (REPEAT µ_tac THEN rewrite_tac (map get_spec [¨$Respects1Æ, ¨$LiftsÆ, ¨$QuotientSetÆ, ¨EquivClassÆ]) THEN REPEAT strip_tac);
a (∂_tac ¨(Ãe∑ EquivClass (C, $¶âc) (g e))õ-Æ);
a (REPEAT µ_tac THEN rewrite_tac (map get_spec [¨$Respects1Æ, ¨$LiftsÆ, ¨$QuotientSetÆ, ¨EquivClassÆ]) THEN REPEAT strip_tac);
a (rewrite_tac (map get_spec [¨$õ-Æ]));
a (lemma_tac ¨∂w∑{y|∂ x'∑ x' ç x ± y = EquivClass (C, $¶âc) (g x')} = {w}Æ THEN_TRY asm_rewrite_tac[get_spec ¨ContentsÆ]);
a (rewrite_tac (map get_spec [¨EquivClassÆ]));
a (var_elim_asm_tac ¨x = {y|y ç D ± x' ¶âd y}Æ);
a (all_asm_ufc_tac[]);
a (rewrite_tac (map get_spec [¨ContentsÆ]));
=TEX
}%ignore


\section{Universal Algebra}

=SML
open_theory "equiv";
force_new_theory "unalg";
force_new_pc €"'unalg"›;
merge_pcs ["'prove_∂_¥_conv", "'savedthm_cs_∂_proof"] "'unalg";
set_merge_pcs ["rbjmisc", "'unalg"];
=TEX

To make the operators fairly general within the constrainst imposed by the HOL type system we will have operators as functions over indexed sets of values.

The following labelled product is used as a general notion of ``structure'' independent of signature.
Of course any particular algebra will have a definite signature.

A signature is a string indexed set of arities, where an arity is a natural number.

=SML
declare_type_abbrev ("SIG", [], î(STRING, Ó) IXÆ);
=TEX

The operators over the algebra are represented by functions from indexed sets of operands to a single result value.
In this case we pack the arguments into a total function and ignore the values which do not correspond to the signature.
The signature (i.e. the arity of each operator) is explicit in this structure, otherwise the range of significance of the operators would not be known.

πHOLLABPROD €STRUCT›¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	€SCar›		: 'a SET;
‹	€SOps›		: (STRING, (Ó ∏ ((Ó ≠ 'a) ≠ 'a)))IX
∞¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸

πHOLCONST
‹ €Arityâu› : ('a) STRUCT ≠ STRING ≠ Ó
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µA n∑ Arityâu A n = Fst (ValueOf (SOps A n)) 
∞

=GFT
€Arityâu_lemma› =
	Ù µ d l n∑ Arityâu (MkSTRUCT d (IxPack l)) n = Fst (ValueOf (IxPack l n))
=TEX

\ignore{
=SML
val SOps_def = get_spec ¨SOpsÆ;
val Arityâu_def = get_spec ¨ArityâuÆ;

set_goal([], ¨µd l n∑ Arityâu(MkSTRUCT d (IxPack l)) n = Fst (ValueOf (IxPack l n))Æ);
a (rewrite_tac [Arityâu_def, SOps_def]);
val Arityâu_lemma = save_pop_thm "Arityâu_lemma";
=TEX
}%ignore

πHOLCONST
‹ €Oper› : ('a) STRUCT ≠ STRING ≠ ((Ó ≠ 'a) ≠ 'a)
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µA n∑ Oper A n = Snd (ValueOf (SOps A n)) 
∞

=GFT
€Oper_lemma› =
	Ù µ d l n∑ Oper (MkSTRUCT d (IxPack l)) n = Snd (ValueOf (IxPack l n))
=TEX

\ignore{
=SML
val Oper_def = get_spec ¨OperÆ;

set_goal([], ¨µd l n∑ Oper(MkSTRUCT d (IxPack l)) n = Snd (ValueOf (IxPack l n))Æ);
a (rewrite_tac [Oper_def, SOps_def]);
val Oper_lemma = save_pop_thm "Oper_lemma";
=TEX
}%ignore

\ignore{
=SML
add_pc_thms "'unalg" (map get_spec [] @ [Arityâu_lemma, Oper_lemma]);
set_merge_pcs ["rbjmisc", "'unalg"];
=TEX
}%ignore


The following function extracts the signature from a structure.

πHOLCONST
‹ €Sig› : ('a) STRUCT ≠ SIG
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µs∑ Sig s = IxCompIx (SOps s) (Ãx∑ Value (Fst x)) 
∞

=GFT
€IxDom_Sig_thm› =
	Ù µ S∑ IxDom (Sig S) = IxDom (SOps S)

€ç_IxDom_Sig_thm› =
	Ù µ S x∑ x ç IxDom (Sig S) § x ç IxDom (SOps S)
=TEX

\ignore{
=SML
val SOps_def = get_spec ¨SOpsÆ;
val IxCompIx_def = get_spec ¨$IxCompIxÆ;
val Sig_def = get_spec ¨SigÆ;

set_goal ([], ¨µS∑ IxDom (Sig S) = IxDom (SOps S)Æ);
a (strip_tac THEN rewrite_tac[Sig_def, IxCompIx_def, IxDom_def, sets_ext_clauses]
	THEN REPEAT strip_tac THEN_TRY asm_rewrite_tac[]);
a (swap_nth_asm_concl_tac 1 THEN asm_rewrite_tac[]);
val IxDom_Sig_thm = save_pop_thm "IxDom_Sig_thm";

set_goal ([], ¨µS x∑ x ç IxDom (Sig S) § x ç IxDom (SOps S)Æ);
a (strip_tac THEN rewrite_tac[Sig_def, IxCompIx_def, IxDom_def, sets_ext_clauses]
	THEN REPEAT strip_tac THEN_TRY asm_rewrite_tac[]);
a (swap_nth_asm_concl_tac 1 THEN asm_rewrite_tac[]);
val ç_IxDom_Sig_thm = save_pop_thm "ç_IxDom_Sig_thm";
=TEX
}%ignore

πHOLCONST
‹ €Arityâi› : SIG ≠ STRING ≠ Ó
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µA n∑ Arityâi A n = ValueOf (A n) 
∞

=GFT
€sig_arity_lemma› =
	Ù µ A n∑ n ç IxDom (Sig A) ¥ Arityâi (Sig A) n = Arityâu A n
=TEX

\ignore{
=SML
val Arityâi_def = get_spec ¨ArityâiÆ;

set_goal([], ¨µA n∑ n ç IxDom (Sig A) ¥ Arityâi (Sig A) n = Arityâu A nÆ);
a (REPEAT µ_tac THEN rewrite_tac[Arityâi_def, Arityâu_def, Sig_def, IxCompIx_def, IxDom_def]
	THEN cond_cases_tac ¨SOps A n = UndefinedÆ);
val sig_arity_lemma = save_pop_thm "sig_arity_lemma";
=TEX
}%ignore


\emph{IxInc} (aliased as $√$) is inclusion of indexed sets, and suffices for signature inclusion.

=GFT
€IxDom_Sig_SOps_thm› =
	Ù µ A∑ IxDom (Sig A) = IxDom (SOps A)

€SigInc_IxDom_Ä_thm› =
	Ù µ A B∑ Sig A √ Sig B ¥ IxDom (Sig A) Ä IxDom (Sig B)

€SigInc_IxDom_Sops_Ä_thm› =
	Ù µ A B∑ Sig A √ Sig B ¥ IxDom (SOps A) Ä IxDom (SOps B)

€SigInc_Arityâi_thm› =
	Ù µ A B n∑ Sig A √ Sig B ± n ç IxDom (Sig A)
         ¥ Arityâi (Sig A) n = Arityâi (Sig B) n

€SigInc_Arityâu_thm› =
	Ù µ A B n∑ Sig A √ Sig B ± n ç IxDom (Sig A)
	¥ Arityâu A n = Arityâu B n
=TEX

\ignore{
=SML
set_goal([], ¨µA∑ IxDom (Sig A) = IxDom (SOps A)Æ);
a (REPEAT µ_tac THEN rewrite_tac[Sig_def, IxDom_def, sets_ext_clauses, IxCompIx_def] THEN strip_tac);
a (cond_cases_tac ¨SOps A x = UndefinedÆ);
val IxDom_Sig_SOps_thm = save_pop_thm "IxDom_Sig_SOps_thm";

set_goal([], ¨µA B∑ Sig A √ Sig B ¥ IxDom (Sig A) Ä IxDom (Sig B)Æ);
a (REPEAT µ_tac THEN rewrite_tac[IxInc_def, IxDom_def]);
a (PC_T "hol1" (REPEAT strip_tac) THEN asm_fc_tac[] THEN asm_rewrite_tac[]);
val SigInc_IxDom_Ä_thm = save_pop_thm "SigInc_IxDom_Ä_thm";

set_goal([], ¨µA B∑ Sig A √ Sig B ¥ IxDom (SOps A) Ä IxDom (SOps B)Æ);
a (REPEAT strip_tac THEN fc_tac[SigInc_IxDom_Ä_thm]);
a (asm_rewrite_tac [map_eq_sym_rule IxDom_Sig_SOps_thm]);
val SigInc_IxDom_Sops_Ä_thm = save_pop_thm "SigInc_IxDom_Sops_Ä_thm";

set_goal([], ¨µA B n∑ Sig A √ Sig B ± n ç IxDom (Sig A) ¥ Arityâi (Sig A) n = Arityâi (Sig B) nÆ);
a (REPEAT strip_tac THEN rewrite_tac[Arityâi_def]);
a (all_fc_tac [√_IxVal_thm]);
a (POP_ASM_T ante_tac THEN rewrite_tac [IxVal_def] THEN STRIP_T rewrite_thm_tac);
val SigInc_Arityâi_thm = save_pop_thm "SigInc_Arityâi_thm";

set_goal([], ¨µA B n∑ Sig A √ Sig B ± n ç IxDom (Sig A) ¥ Arityâu A n = Arityâu B nÆ);
a (REPEAT strip_tac THEN all_asm_fc_tac [SigInc_Arityâi_thm]);
a (all_asm_fc_tac [sig_arity_lemma, IxDom_√_thm]);
a (all_asm_fc_tac [sig_arity_lemma]);
a (SYM_ASMS_T rewrite_tac);
val SigInc_Arityâu_thm = save_pop_thm "SigInc_Arityâu_thm";
=TEX
}%ignore

This is probably too crude, it would probably be better to ignore the irrelevant behaviour of the operators (i.e. values off sig or out of domain).

πHOLCONST
‹ €StructInc› : ('a) STRUCT ≠ ('a) STRUCT ≠ BOOL
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µs t∑ StructInc s t § SCar s = SCar t ± IxInc (SOps s) (SOps t) 
∞

=SML
declare_alias("√", ¨StructIncÆ);
=TEX

There is a general requirement on structures that the operators are closed on the domain of the structure.

πHOLCONST
‹ €ClosedOp› : 'a SET ≠ (Ó ∏ ((Ó ≠ 'a) ≠ 'a)) ≠ BOOL
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µs p∑ ClosedOp s p = µf∑ (µi∑ i < Fst p ¥ f i ç s) ¥ Snd p f ç s
∞

πHOLCONST
‹ €ClosedStruct› : ('a) STRUCT ≠ BOOL
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µs∑ ClosedStruct s § µp∑ p ç IxRan (SOps s) ¥ ClosedOp (SCar s) p
∞

\subsection{Packing Functions}

The form of the operators is not idea for talking about the structures, so we define some functions which will make more convenient forms readily obtainable.

There are two things we need to be able to do.
The first is to convert 0-ary 1-ary and 2-ary operations in their usual convenient representation to the representation in which the arguments are collected into an indexed set.
The second is to collect the operators into a name-indexed set.

Note that the two kinds of indexed set are represented differently (not that they are different in kind).

πHOLCONST
‹ €PackIx› : ('a ∏ 'b)LIST ≠ ('a, 'b)IX
˜¸¸¸¸¸¸¸¸¸¸¸
‹         	PackIx [] = (Ãis∑ Undefined)
‹ ± µh t∑	PackIx (Cons h t) = Ãis∑
			if Fst h = is then Value (Snd h) else PackIx t is
∞

πHOLCONST
‹ €pack0op› : 'a ≠ (Ó ∏ ((Ó ≠ 'a) ≠ 'a))
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µc∑ pack0op c = (0, Ãis∑ c)
∞

πHOLCONST
‹ €pack1op› : ('a ≠ 'a) ≠ (Ó ∏ ((Ó ≠ 'a) ≠ 'a))
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µf∑ pack1op f = (1, Ãis∑ f (is 0))
∞

πHOLCONST
‹ €pack2op› : ('a ≠ 'a ≠ 'a) ≠ (Ó ∏ ((Ó ≠ 'a) ≠ 'a))
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µf∑ pack2op f = (2, Ãis∑ f (is 0) (is 1))
∞

=GFT
€fst_packop_lemma› =
	Ù (µ k∑ Fst (pack0op k) = 0)
	± (µ k∑ Fst (pack1op k) = 1)
	± (µ k∑ Fst (pack2op k) = 2)
=TEX

\ignore{

=SML
val pack0op_def = get_spec ¨pack0opÆ;
val pack1op_def = get_spec ¨pack1opÆ;
val pack2op_def = get_spec ¨pack2opÆ;
val IxPack_def = get_spec ¨IxPackÆ;

set_goal([], ¨(µk∑ Fst (pack0op k) = 0)
		± (µk∑ Fst (pack1op k) = 1)
		± (µk∑ Fst (pack2op k) = 2)Æ);
a (rewrite_tac[pack0op_def, pack1op_def, pack2op_def]);
val fst_packop_lemma = save_pop_thm "fst_packop_lemma";

add_pc_thms "'unalg" [fst_packop_lemma];
set_merge_pcs ["rbjmisc", "'unalg"];
=TEX
}%ignore

\subsection{Homomorphisms}

Now we can define the notion of homomorphism.

First we define the requirement on the homomorphism to map the domain of the source into the domain of the target.

πHOLCONST
‹ €FunClosed› : ('b)STRUCT  ∏ ('b ≠ 'c) ∏ ('c) STRUCT ≠ BOOL
˜¸¸¸¸¸¸
‹ µ A f B∑ FunClosed (A, f, B) § µ x∑ x ç SCar A ¥ f x ç SCar B
∞

=GFT
€FunClosed_trans_thm› = Ù µ A f B g C∑
	FunClosed (A, f, B) ± FunClosed (B, g, C) ¥ FunClosed (A, g o f, C)

€FunClosed_FunImage_thm› =
	Ù µ A f B∑ FunClosed (A, f, B) § FunImage f (SCar A) Ä SCar B
=TEX

\ignore{
=SML
val FunClosed_def = get_spec ¨FunClosedÆ;

set_goal([], ¨µ A f B g C∑ FunClosed (A, f, B) ± FunClosed (B, g, C) ¥ FunClosed (A, g o f, C)Æ);
a (REPEAT µ_tac THEN rewrite_tac [FunClosed_def] THEN REPEAT strip_tac THEN REPEAT (all_asm_ufc_tac[]));
val FunClosed_trans_thm = save_pop_thm "FunClosed_trans_thm";

set_goal([], ¨µ A f B∑ FunClosed (A, f, B) § FunImage f (SCar A) Ä (SCar B)Æ);
a (REPEAT µ_tac THEN rewrite_tac [FunClosed_def, FunImage_def, sets_ext_clauses] THEN REPEAT strip_tac THEN REPEAT (all_asm_ufc_tac[]));
(* *** Goal "1" *** *)
a (SYM_ASMS_T rewrite_tac);
(* *** Goal "2" *** *)
a (spec_nth_asm_tac 2 ¨f xÆ);
a (spec_nth_asm_tac 1 ¨xÆ);
val FunClosed_FunImage_thm = save_pop_thm "FunClosed_FunImage_thm";
=TEX
}%ignore

Then the requirement that the function respects an operator

πHOLCONST
‹ €OpRespect› : ('b SET ∏ ('b ≠ 'c) ∏ Ó) ≠ ((Ó ≠ 'b) ≠ 'b) ≠ ((Ó ≠ 'c) ≠ 'c) ≠ BOOL
˜¸¸¸¸¸¸
‹ µ D f n op1 op2∑ OpRespect (D, f, n) op1 op2 §
‹	µg∑ FunImage g {i | i < n} Ä D ¥ f (op1 g) = op2 (Ãx∑ f (g x))
∞

=GFT
€OpRespect_pack0op_lemma› =
   Ù µ D f d c∑ OpRespect (D, f, 0) (Snd (pack0op d)) (Snd (pack0op c)) § f d = c

€OpRespect_pack1op_lemma› =
	Ù µ D f d c∑ OpRespect (D, f, 1) (Snd (pack1op d)) (Snd (pack1op c))
         § (µ x∑ x ç D ¥ f (d x) = c (f x))

€OpRespect_pack2op_lemma› =
	Ù µ D f $*âd $*âc∑ OpRespect (D, f, 2) (Snd (pack2op $*âd)) (Snd (pack2op $*âc))
         § (µ x y∑ x ç D ± y ç D ¥ f (x *âd y) = f x *âc f y)
=TEX

=SML
declare_infix (200, "*âd");
declare_infix (200, "*âc");
=TEX

\ignore{
=SML
val OpRespect_def = get_spec ¨OpRespectÆ;

set_goal([], ¨µD f d c∑ OpRespect (D, f, 0) (Snd (pack0op d)) (Snd (pack0op c)) § f d = cÆ);
a (REPEAT µ_tac);
a (rewrite_tac [OpRespect_def, pack0op_def, sets_ext_clauses, ç_in_clauses, FunImage_def]);
val OpRespect_pack0op_lemma = save_pop_thm "OpRespect_pack0op_lemma";

set_goal([], ¨µD f d c∑ OpRespect (D, f, 1) (Snd (pack1op d)) (Snd (pack1op c))
	§ µx∑ x ç D ¥ f (d x) = c (f x)Æ);
a (REPEAT µ_tac);
a (rewrite_tac [OpRespect_def, pack1op_def, sets_ext_clauses, ç_in_clauses, FunImage_def]);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (spec_nth_asm_tac 2 ¨Ãn:Ó∑xÆ);
(* *** Goal "1.1" *** *)
a (DROP_ASM_T ¨a < 1Æ (strip_asm_tac o less_cases_rule) THEN all_var_elim_asm_tac);
a (DROP_NTH_ASM_T 2 (strip_asm_tac o (rewrite_rule[])) THEN all_var_elim_asm_tac);
(* *** Goal "1.2" *** *)
a (POP_ASM_T ante_tac THEN rewrite_tac[]);
(* *** Goal "2" *** *)
a (spec_nth_asm_tac 1 ¨g 0Æ);
(* *** Goal "2.1" *** *)
a (spec_nth_asm_tac 1 ¨0Æ);
(* *** Goal "2.2" *** *)
a (all_asm_fc_tac[]);
val OpRespect_pack1op_lemma = save_pop_thm "OpRespect_pack1op_lemma";

set_goal([], ¨µD f $*âd $*âc∑ OpRespect (D, f, 2) (Snd (pack2op $*âd)) (Snd (pack2op $*âc))
	§ µx y∑ x ç D ± y ç D ¥ f (x *âd y) = (f x) *âc (f y)Æ);
a (REPEAT µ_tac);
a (rewrite_tac [OpRespect_def, pack2op_def, sets_ext_clauses, ç_in_clauses, FunImage_def]);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (spec_nth_asm_tac 3 ¨Ãn∑ if n=0 then x else yÆ);
(* *** Goal "1.1" *** *)
a (DROP_ASM_T ¨a < 2Æ (strip_asm_tac o less_cases_rule) THEN all_var_elim_asm_tac);
(* *** Goal "1.1.1" *** *)
a (DROP_NTH_ASM_T 2 (strip_asm_tac o (rewrite_rule[])) THEN all_var_elim_asm_tac);
(* *** Goal "1.1.2" *** *)
a (DROP_NTH_ASM_T 2 (strip_asm_tac o (rewrite_rule[])) THEN all_var_elim_asm_tac);
(* *** Goal "1.2" *** *)
a (POP_ASM_T ante_tac THEN rewrite_tac[]);
(* *** Goal "2" *** *)
a (spec_nth_asm_tac 1 ¨g 0Æ);
(* *** Goal "2.1" *** *)
a (spec_nth_asm_tac 1 ¨0Æ);
a (POP_ASM_T ante_tac THEN PC_T1 "lin_arith" rewrite_tac[]);
(* *** Goal "2.2" *** *)
a (spec_nth_asm_tac 2 ¨g 1Æ);
(* *** Goal "2.2.1" *** *)
a (spec_nth_asm_tac 1 ¨1Æ);
a (POP_ASM_T ante_tac THEN PC_T1 "lin_arith" rewrite_tac[]);
(* *** Goal "2.2.2" *** *)
a (all_asm_fc_tac[]);
val OpRespect_pack2op_lemma = save_pop_thm "OpRespect_pack2op_lemma";

add_pc_thms "'unalg" [OpRespect_pack0op_lemma, OpRespect_pack1op_lemma, OpRespect_pack2op_lemma];
set_merge_pcs ["rbjmisc", "'unalg"];
=TEX
}%ignore


πHOLCONST
‹ €HomOp› : ('b)STRUCT ∏ ('b ≠ 'c) ∏ ('c) STRUCT ≠ STRING ≠ BOOL
˜¸¸¸¸¸¸
‹ µ A s B f∑ HomOp (A, f, B) s §
‹	OpRespect (SCar A, f, Arityâu A s) (Oper A s) (Oper B s)
∞

and the requirement that the function respects all the operators in the signature of the domain.

πHOLCONST
‹ €HomOps› : ('b)STRUCT  ∏ ('b ≠ 'c) ∏ ('c) STRUCT ≠ BOOL
˜¸¸¸¸¸¸
‹ µ A B f∑ HomOps (A, f, B) § µs∑ s ç IxDom (SOps A) ¥ HomOp (A, f, B) s
∞

=GFT
€HomOps_o_thm› =
	Ù µ A f B g C∑ HomOps (A, f, B)
		± Sig A √ Sig B ± FunClosed (A, f, B)
		± HomOps (B, g, C)
	¥ HomOps (A, g o f, C)
=TEX

\ignore{
=SML
val HomOp_def = get_spec ¨HomOpÆ;
val HomOps_def = get_spec ¨HomOpsÆ;

set_goal([], ¨µ A f B g C∑ HomOps (A, f, B) ± Sig A √ Sig B ± FunClosed (A, f, B) ± HomOps (B, g, C) ¥ HomOps (A, g o f, C)Æ);
a (REPEAT µ_tac THEN rewrite_tac [OpRespect_def, HomOp_def, HomOps_def] THEN REPEAT strip_tac);
a (all_fc_tac [FunClosed_trans_thm] THEN REPEAT strip_tac);
a (ALL_ASM_FC_T rewrite_tac []);
a (rule_nth_asm_tac 2 (rewrite_rule[map_eq_sym_rule IxDom_Sig_thm]));
a (all_asm_fc_tac [IxDom_√_thm]);
a (rule_nth_asm_tac 1 (rewrite_rule[IxDom_Sig_thm]));
a (lemma_tac ¨FunImage (f o g') {i|i < Arityâu B s} Ä SCar BÆ);
(* *** Goal "1" *** *)
a (ALL_FC_T (MAP_EVERY (rewrite_thm_tac o eq_sym_rule)) [SigInc_Arityâu_thm]);
a (rewrite_tac [FunImage_o_thm]);
a (all_fc_tac [FunImage_mono_thm]);
a (all_fc_tac [FunClosed_FunImage_thm]);
a (all_ufc_tac [Ä_trans_thm]);
(* *** Goal "2" *** *)
a (ALL_ASM_FC_T (rewrite_tac o (map(rewrite_rule[
			prove_rule [get_spec ¨$o:(('a≠'c)≠(('b≠'a)≠('b≠'c)))Æ, ext_thm] ¨(f o g') = (Ã x∑ f (g' x))Æ
			]))) []);
val HomOps_o_thm = save_pop_thm "HomOps_o_thm";
=TEX
}%ignore

πHOLCONST
‹ €AlgHom› : ('b)STRUCT  ∏ ('b ≠ 'c) ∏ ('c) STRUCT ≠ BOOL
˜¸¸¸¸¸¸
‹ µ A f B∑ AlgHom (A, f, B) §
‹	Sig A √ Sig B ± FunClosed (A, f, B) ± HomOps (A, f, B)
∞

=GFT
€AlgHom_o_thm› =
	Ù µ A f B g C∑ AlgHom (A, f, B) ± AlgHom (B, g, C) ¥ AlgHom (A, g o f, C)
=TEX

\ignore{
=SML
val AlgHom_def = get_spec ¨AlgHomÆ;

set_goal([], ¨µ A f B g C∑ AlgHom (A, f, B) ± AlgHom (B, g, C) ¥ AlgHom (A, g o f, C)Æ);
a (REPEAT µ_tac THEN rewrite_tac [AlgHom_def] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a (all_fc_tac [IxInc_trans_thm]);
(* *** Goal "2" *** *)
a (all_fc_tac [FunClosed_trans_thm]);
(* *** Goal "3" *** *)
a (all_fc_tac [HomOps_o_thm]);
val AlgHom_o_thm = save_pop_thm "AlgHom_o_thm";

=IGN
set_goal([], ¨µ A f B g C∑ HomOps (MkSTRUCT D (IxPack [("a", pack0op c);("b", pack0op d)]), f, B)Æ);
a (rewrite_tac [HomOps_def, HomOp_def, SOps_def]);
a (REPEAT strip_tac THEN asm_rewrite_tac []);
	THEN asm_rewrite_tac[Oper_def, SOps_def, Arityâu_def]);
=TEX
}%ignore

\subsection{Quotients}

Given an equivalence relation which is respected by the operators in an algebra, a quotient algebra can be obtained whose objects are equivalence classes and whose operators are the operators of the original algebra lifted to operate on the equivalence classes.

The following function effects the lifing of an operator.

πHOLCONST
‹ €LiftUniOp› :  (('b)SET ∏ ('b ≠ 'b ≠ BOOL))
‹ 				≠ (Ó ∏ ((Ó ≠ 'b) ≠ 'b))
‹				≠ (Ó ∏ ((Ó ≠ 'b SET) ≠ 'b SET))
˜¸¸¸¸¸¸
‹ µ a op r∑ LiftUniOp r (a, op) = (a, Ãf∑ (op LiftOver (RelPower r {x:Ó | x < a}, r))
‹							{g | µi∑ g i ç f i})
∞

The quotient operation can then be defined as follows:


πHOLCONST
‹ €AlgQuotient› : ('b)STRUCT  ≠ (('b)SET ∏ ('b ≠ 'b ≠ BOOL)) ≠ ('b SET) STRUCT
˜¸¸¸¸¸¸
‹ µ A r∑ AlgQuotient A r = MkSTRUCT ( (SCar A)) (IxComp (SOps A) (LiftUniOp r))
∞


\subsection{Algebraic Equations}

Algebraic equations in an algebra are preserved under homomorphism.

To prove this general claim we must first define the concept of an algebraic equation, which will be done inductively.
We need to be able to talk about the same algebraic equation over two distinct algebras so the notion will be parameterised by an algebra.

We will represent an expression over an algebra by a function from a valuation of variables to a value.
We generate the expressions for a specific ``signature''.
The signature is just a triple giving the number of 0-ary, 1-ary and 2-ary operations in the algebra.

=SML
declare_type_abbrev("EXPR", ["'a"], î('a) STRUCT ≠ ((Ó ≠ 'a) ≠ 'a)Æ);
=TEX

There is no syntax in this account of polynomials, so the list is a list of the values of the variables.

An equation is a pair of polynomials.

To define the set of polynomials we first define the ways in which new polynomials can be constucted from a set already to hand.
This is by the use of any of the operations in the algebra, and the operation involved is functional composition.

πHOLCONST
‹ €VExpr› : Ó ≠ 'a EXPR
˜¸¸¸¸¸¸
‹ µn∑ VExpr n = Ãa va∑ va n
∞

πHOLCONST
‹ €VExprs› : Ó ≠ 'a EXPR SET
˜¸¸¸¸¸¸
‹ µn∑ VExprs n = {p | ∂m∑ m < n ± p = VExpr m}
∞

πHOLCONST
‹ €CExprs› : SIG ≠ 'a EXPR SET ≠ 'a EXPR SET
˜¸¸¸¸¸¸
‹ µsig es∑ CExprs sig es = {e | ∂name arity am∑
‹		name ç IxDom sig ± sig name = Value arity
‹	±	(µi∑ i < arity ¥ am i ç es)
‹	±	e = Ãstruct va∑  (Snd (ValueOf (SOps struct name))) (Ãi∑ am i struct va)}
∞

Now we define closure under the above operators.

πHOLCONST
‹ €ExprClosed› : SIG ≠ 'a EXPR SET ≠ BOOL
˜¸¸¸¸¸¸
‹ µs es∑ ExprClosed s es § CExprs s es Ä es
∞

πHOLCONST
‹ €Exprs› : SIG ≠ Ó ≠ 'a EXPR SET
˜¸¸¸¸¸¸
‹ µs n∑ Exprs s n = •{ps | ExprClosed s ps ± VExprs n Ä ps}
∞

\ignore{

\subsection{Quotient Algebras}

 πHOLCONST
‹ €QuotientStruct› : ('b, 'a) STRUCT ≠ ('b ≠ 'b ≠ BOOL) ≠ ('b SET, 'a) ALG
 ˜¸¸¸¸¸¸
‹ µ A $¶âd∑ QuotientStruct A $¶âd = 
‹	let (C, ops) = ≈(C, ops)∑ (MkSTRUCT C ops = A)
‹	in let D = (C, $¶âd)
‹	in MkSTRUCT (EquivClasses D) (Map (Ãop∑ op MonOpLift D) mops) 
 ∞

}%ignore


\ignore{
=SML
commit_pc "'unalg";

force_new_pc "€unalg›";
merge_pcs ["rbjmisc", "'unalg"] "unalg";
commit_pc "unalg";

force_new_pc "€unalg1›";
merge_pcs ["rbjmisc1", "'unalg"] "unalg1";
commit_pc "unalg1";
=TEX
}%ignore


\section{Lattices (I)}

The beginnings of a theory of lattices.
This version was done before the work on Univesal Algebra, and will be discarded if the later version conformant with that theory is found satisfactory.

=SML
set_merge_pcs ["hol", "'rbjmisc"] ;
=TEX

\subsection{Signature and Defining Property}

We will represent a lattice as a triple comprising a carrier set and two-argument join and meet functions.

πHOLLABPROD €LAT›¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	€CarâL›			: 'a SET;
‹	€JoinâL›			: 'a ≠ 'a ≠ 'a;
‹	€MeetâL›		: 'a ≠ 'a ≠ 'a
∞¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸

We will use L and M as variables for lattices and the following infixity declarations will be useful as names for the corresponding operations.

=SML
declare_infix (235, "≤âL");
declare_infix (235, "≤âM");
declare_infix (240, "±âL");
declare_infix (240, "±âM");
=TEX

πHOLCONST
‹ €IsLattice› : 'a LAT ≠ BOOL
˜¸¸¸¸¸¸
‹ µ L∑	IsLattice L § µ C $≤âL $±âL∑ MkLAT C $≤âL $±âL = L ¥ 
‹       (µx y∑ x ç C ± y ç C ¥
		x ≤âL y ç C ± x ±âL y ç C
	±	x ≤âL y = y ≤âL x ± x ±âL y = y ±âL x
	±	x ±âL (x ≤âL y) = x ± x ≤âL (x ±âL y) = x
        ± (µz∑ z ç C
		¥	(x ≤âL y) ≤âL z = x ≤âL (y ≤âL z)
		±	(x ±âL y) ±âL z = x ±âL (y ±âL z)))
∞

\subsection{Elementary Theorems}

=GFT
€±âL_idempot_thm› =
   Ù µ L
     ∑ IsLattice L ¥ (µ C $≤âL $±âL∑ MkLAT C $≤âL $±âL = L
        ¥ (µ x∑ x ç C ¥ x ±âL x = x))

€±âL_idempot_thm› =
   Ù µ L∑ IsLattice L ¥ (µ C $≤âL $±âL∑ MkLAT C $≤âL $±âL = L
	¥ (µ x∑ x ç C ¥ x ≤âL x = x))
=TEX

\ignore{
=SML
val lattice_def = get_spec ¨IsLatticeÆ;

set_goal([], ¨µL∑ IsLattice L ¥ µ C $≤âL $±âL∑ MkLAT C $≤âL $±âL = L ¥
	µx∑ x ç C ¥ x ±âL x = xÆ);
a (REPEAT strip_tac);
a (lemma_tac ¨x ±âL x ç CÆ THEN1 all_ufc_tac [lattice_def]);
a (lemma_tac ¨x ±âL (x ≤âL x ±âL x) = xÆ THEN1 all_ufc_tac [lattice_def]);
a (lemma_tac ¨x ≤âL x ±âL x = xÆ THEN1 all_ufc_tac [lattice_def]);
a (DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
val ±âL_idempot_thm = save_pop_thm "±âL_idempot_thm";

set_goal([], ¨µL∑ IsLattice L ¥ µ C $≤âL $±âL∑ MkLAT C $≤âL $±âL = L ¥
	µx∑ x ç C ¥ x ≤âL x = xÆ);
a (REPEAT_N 8 strip_tac);
a (lemma_tac ¨x ≤âL x ç CÆ THEN1 all_ufc_tac [lattice_def]);
a (lemma_tac ¨x ≤âL (x ±âL (x ≤âL x)) = xÆ THEN1 all_ufc_tac [lattice_def]);
a (lemma_tac ¨x ±âL (x ≤âL x) = xÆ THEN1 all_ufc_tac [lattice_def]);
a (DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
val ≤âL_idempot_thm = save_pop_thm "≤âL_idempot_thm";

=TEX
}%ignore

\subsection{Quotient Lattices}

The quotient of a lattice with respect to some equivalence relation over its elements is defined as follows:

πHOLCONST
‹ €QuotientLattice› : 'a LAT ≠ ('a ≠ 'a ≠ BOOL) ≠ 'a SET LAT
˜¸¸¸¸¸¸
‹ µ L $¶âd∑ QuotientLattice L $¶âd =
‹	let D = (CarâL L, $¶âd)
‹	in let $≤âL = (JoinâL L) DyOpLift D and $±âL = (MeetâL L) DyOpLift D
‹	   in MkLAT (EquivClasses D) $≤âL $±âL
∞

=SML
declare_alias ("/", ¨QuotientLatticeÆ);
=TEX

-GFT
=TEX

\ignore{
=IGN
val QuotientLattice_def = get_spec ¨QuotientLatticeÆ;

set_goal([], ¨µL $¶âd∑ IsLattice L ± Equiv (CarâL L, $¶âd) ¥ IsLattice (L / $¶âd)Æ);
a (REPEAT µ_tac THEN rewrite_tac [lattice_def, QuotientLattice_def, let_def] THEN REPEAT strip_tac);
=TEX
}%ignore

\subsection{Lattice Orders}


=SML
declare_infix (210, "ºâL");
declare_infix (210, "ºâM");
=TEX

The ordering on the lattice is derived from the operations as follows,

πHOLCONST
‹ €LeLat› : 'a LAT ≠ 'a ≠ 'a ≠ BOOL
˜¸¸¸¸¸¸
‹ µ L:'a LAT∑ LeLat L = Ãx y∑  µ$≤âL∑ $≤âL = JoinâL L ¥ x ≤âL y = y
∞

=GFT
=TEX

\ignore{
=IGN
set_goal([],¨µL∑ IsLattice L ¥ PartialOrder (CarâL L, LeLat L)Æ);
a ((rewrite_tac (map get_spec [¨PartialOrderÆ, ¨TransÆ, ¨AntisymÆ, ¨LeLatÆ])));
a ((REPEAT strip_tac));
a (asm_fc_tac[]);
a (MAP_EVERY (fn x => ∂_tac x THEN strip_tac) [¨CÆ, ¨$≤âLÆ, ¨$±âLÆ]);
a (asm_rewrite_tac[]);

=TEX
}%ignore

\section{Lattices}

=SML
open_theory "unalg";
force_new_theory "lattice";
force_new_pc €"'lattice"›;
merge_pcs ["'prove_∂_¥_conv", "'savedthm_cs_∂_proof"] "'lattice";
set_merge_pcs ["unalg", "'lattice"];
=TEX

The beginnings of a theory of lattices.
This version was done using Universal Algebra, the previous version will be discarded if this version conformant with the approach to universal algebra is found satisfactory.

=SML
set_merge_pcs ["unalg", "'lattice"] ;
=TEX

\subsection{Signature and Defining Property}

We will use the general structure type \emph{STRUCT} to represent lattice structures.

πHOLCONST
‹ €LatSig› : SIG
˜¸¸¸¸¸¸
‹ LatSig = PackIx [("≤âL" , 2); ("≤âL" , 2)]
∞

We will use L and M as variables for lattices and the following infixity declarations will be useful as names for the corresponding operations.

πHOLCONST
‹ €MkLat› : 'a SET ≠ ('a ≠ 'a ≠ 'a) ≠ ('a ≠ 'a ≠ 'a) ≠ ('a) STRUCT
˜¸¸¸¸¸¸
‹ µd j m∑ MkLat d j m = MkSTRUCT d (IxPack [("≤âL" , pack2op j); ("±âL" , pack2op m)])
∞

=SML
declare_infix (235, "≤âL");
declare_infix (235, "≤âM");
declare_infix (240, "±âL");
declare_infix (240, "±âM");
=TEX


πHOLCONST
‹ €IsLat› : ('a) STRUCT ≠ BOOL
˜¸¸¸¸¸¸
‹ µ L∑	IsLat L § µ C $≤âL $±âL∑ StructInc (MkLat C $≤âL $±âL) L ¥ 
‹       (µx y∑ x ç C ± y ç C ¥
		x ≤âL y ç C ± x ±âL y ç C
	±	x ≤âL y = y ≤âL x ± x ±âL y = y ±âL x
	±	x ±âL (x ≤âL y) = x ± x ≤âL (x ±âL y) = x
        ± (µz∑ z ç C
		¥	(x ≤âL y) ≤âL z = x ≤âL (y ≤âL z)
		±	(x ±âL y) ±âL z = x ±âL (y ±âL z)))
∞

\subsection{Elementary Theorems}

=GFT
€±âL_idempot_thm› =
   Ù µ L∑ IsLat L ¥ (µ C $≤âL $±âL∑ MkLat C $≤âL $±âL √ L
	¥ (µ x∑ x ç C ¥ x ±âL x = x))

€≤âL_idempot_thm› =
   Ù µ L∑ IsLat L ¥ (µ C $≤âL $±âL∑ MkLat C $≤âL $±âL √ L
	¥ (µ x∑ x ç C ¥ x ≤âL x = x))
=TEX

\ignore{
=SML
val MkLat_def = get_spec ¨MkLatÆ;
val IsLat_def = get_spec ¨IsLatÆ;
val LatSig_def = get_spec ¨LatSigÆ;

set_goal([], ¨µL∑ IsLat L ¥ µ C $≤âL $±âL∑ StructInc (MkLat C $≤âL $±âL) L ¥
	µx∑ x ç C ¥ x ±âL x = xÆ);
a (REPEAT strip_tac);
a (lemma_tac ¨x ±âL x ç CÆ THEN1 all_ufc_tac [IsLat_def]);
a (lemma_tac ¨x ±âL (x ≤âL x ±âL x) = xÆ THEN1 all_ufc_tac [IsLat_def]);
a (lemma_tac ¨x ≤âL x ±âL x = xÆ THEN1 all_ufc_tac [IsLat_def]);
a (DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
val ±âL_idempot_thm1 = save_pop_thm "±âL_idempot_thm1";

set_goal([], ¨µL∑ IsLat L ¥ µ C $≤âL $±âL∑ StructInc (MkLat C $≤âL $±âL) L ¥
	µx∑ x ç C ¥ x ≤âL x = xÆ);
a (REPEAT_N 8 strip_tac);
a (lemma_tac ¨x ≤âL x ç CÆ THEN1 all_ufc_tac [IsLat_def]);
a (lemma_tac ¨x ≤âL (x ±âL (x ≤âL x)) = xÆ THEN1 all_ufc_tac [IsLat_def]);
a (lemma_tac ¨x ±âL (x ≤âL x) = xÆ THEN1 all_ufc_tac [IsLat_def]);
a (DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
val ≤âL_idempot_thm1 = save_pop_thm "≤âL_idempot_thm1";
=TEX
}%ignore

\subsection{Homomorphisms}

I am hoping that results from Univeral Algebra will not prove difficult to instantiate to Lattice theory.

Let us define a Lattice homomorphism as a homomorphism whose source is a lattice.

πHOLCONST
‹ €LatHom› : (('a) STRUCT ∏ ('a ≠ 'b) ∏ 'b STRUCT) ≠ BOOL
˜¸¸¸¸¸¸
‹ µ A f B∑ LatHom (A, f, B) § AlgHom (A, f, B) ± Sig A = LatSig
∞

=GFT
€LatHom_o_thm› =
	Ù µ A f B g C∑ LatHom (A, f, B) ± AlgHom (B, g, C) ¥ LatHom (A, g o f, C)

€Latt_HomOps_lemma› =
	Ù µ C $≤âL $±âL f D $≤âM $±âM∑ HomOps (MkLat C $≤âL $±âL, f, MkLat D $≤âM $±âM)
         § (µ x y∑ x ç C ± y ç C ¥ f (x ±âL y) = f x ±âM f y)
           ± (µ x y∑ x ç C ± y ç C ¥ f (x ≤âL y) = f x ≤âM f y)
=TEX

\ignore{
=SML
val LatHom_def = get_spec ¨LatHomÆ;


set_goal([], ¨µA f B g C∑ LatHom (A,f,B) ± AlgHom (B,g,C) ¥ LatHom (A, g o f, C)Æ);
a (REPEAT µ_tac THEN rewrite_tac [LatHom_def] THEN REPEAT strip_tac THEN all_fc_tac [AlgHom_o_thm]);
val LatHom_o_thm = save_pop_thm "LatHom_o_thm";

set_goal([], ¨µ C $≤âL $±âL f D $≤âM $±âM∑ HomOps (MkLat C $≤âL $±âL, f, MkLat D $≤âM $±âM) §
		(µ x y∑ x ç C ± y ç C ¥ f (x ±âL y) = f x ±âM f y)
	±	(µ x y∑ x ç C ± y ç C ¥ f (x ≤âL y) = f x ≤âM f y)
Æ);
a (REPEAT µ_tac THEN rewrite_tac [HomOps_def, MkLat_def, SOps_def]);
a (REPEAT ç_disp_¥_tac);
a (rewrite_tac[HomOp_def, SOps_def]);
a (REPEAT strip_tac THEN all_asm_fc_tac[]);
val Latt_HomOps_lemma = save_pop_thm "Latt_HomOps_lemma";
=IGN
set_goal([], ¨µA f B∑ LatHom (A,f,B) § Sig A √ Sig B ± Sig A = LatSig ± FunClosed (A, f, B) ± HomOps (A, f, B)Æ);
a (rewrite_tac [LatHom_def, AlgHom_def] THEN REPEAT strip_tac);

set_goal([], ¨µA f B∑ LatHom (A,f,B) § Sig A √ Sig B ± Sig A = LatSig ± FunClosed (A, f, B)
	± (µ C $≤âL $±âL D $≤âM $±âM∑ MkLat C $≤âL $±âL √ A ± MkLat D $≤âM $±âM √ B
		¥ µl r∑ l ç C ± r ç C ¥ f(l ≤âL r) = (f l) ≤âM (f r)
			± f(l ±âL r) = (f l) ±âM (f r))Æ);
a (REPEAT µ_tac THEN rewrite_tac [LatHom_def, LatSig_def, IsLat_def, AlgHom_def, FunClosed_def, HomOps_def, MkLat_def]);
a (REPEAT strip_tac THEN_TRY all_asm_fc_tac[]);
val LatHom_o_thm = save_pop_thm "LatHom_o_thm";

=TEX
}%ignore

\ignore{
=SML
commit_pc "'lattice";

force_new_pc "€lattice›";
merge_pcs ["unalg", "'lattice"] "lattice";
commit_pc "lattice";

force_new_pc "€lattice1›";
merge_pcs ["unalg1", "'lattice"] "lattice1";
commit_pc "lattice1";
=TEX
}%ignore

\section{Conclusions}
