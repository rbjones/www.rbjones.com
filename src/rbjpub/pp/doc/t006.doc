=IGN
$Id: t006.doc,v 1.24 2010/04/27 08:57:17 rbj Exp $
=TEX
\documentclass[11pt,a4paper]{article}
\usepackage{latexsym}
\usepackage{ProofPower}
\ftlinepenalty=9999
\tabstop=0.25in
\usepackage{A4}

\def\Hide#1{\relax}
\newcommand{\ignore}[1]{}

\title{Miscellanea}
\author{Roger Bishop Jones}
\date{\ }

\usepackage[unicode,pdftex]{hyperref}
\hypersetup{pdfauthor={Roger Bishop Jones}}
\hypersetup{colorlinks=true, urlcolor=black, citecolor=black, filecolor=black, linkcolor=black}

\makeindex
\begin{document}
\vfill
\maketitle
\begin{abstract}
This document contains things used by my other theories which do not particularly belong in them.
Definitions or theorems which arguably belong in a theory already produced by someone else.
\end{abstract}
\vfill
\begin{centering}
{\footnotesize

Date Created 2004/07/15

Last Changed $ $Date: 2010/04/27 08:57:17 $ $

\href{http://www.rbjones.com/rbjpub/pp/doc/t006.pdf}
{http://www.rbjones.com/rbjpub/pp/doc/t006.pdf}

$ $Id: t006.doc,v 1.24 2010/04/27 08:57:17 rbj Exp $ $

\copyright\ Roger Bishop Jones; Licenced under Gnu LGPL

}%footnotesize
\end{centering}

\newpage

{\setcounter{tocdepth}{4}
\parskip=0pt\tableofcontents}

%%%%

{\raggedright
\bibliographystyle{fmu}
\bibliography{rbj,fmu}
} %\raggedright

\section{The Theory rbjmisc}

For context and motivation see \cite{rbjt000}.

All the theorems are placed in the one temporary location, which therefore must have as ancestors all the theories which are being extended.

There is one section in this document, following this one, for each theory to which an addition is being made so new parents may be added in those sections, or new proof contexts used.

=SML
open PreConsisProof;
=TEX

=SML
open_theory "cache'rbjhol";
force_new_theory "rbjmisc";
new_parent "analysis";
force_new_pc €"'rbjmisc"›;
merge_pcs ["'prove_∂_¥_conv", "'savedthm_cs_∂_proof"] "'rbjmisc";
set_merge_pcs ["basic_hol1", "'sets_alg", "'Ø", "'rbjmisc"];
open UnifyForwardChain; open RbjTactics1;
=TEX

\ignore{
 πHOLLABPROD EIGHTTUPLE¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	aaaa bbbb cccc dddd eeee ffff gggg hhhh: 'a
 ∞¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
}%ignore

\section{Combinators}

πHOLCONST
‹ $€CombC›: ('a ≠ 'b ≠ 'c) ≠ ('b ≠ 'a ≠ 'c)
˜¸¸¸¸¸¸
‹ µf∑ CombC f = Ãx y∑ f y x 
∞

=GFT
€combc_thm› = Ù µ f x y∑ CombC f x y = f y x
=TEX

\ignore{
=SML
set_goal([], ¨µf x y∑ CombC f x y = f y xÆ);
a (rewrite_tac [get_spec ¨CombCÆ]);
val combc_thm = save_pop_thm "combc_thm";
=TEX
}%ignore


\ignore{
=SML
add_pc_thms "'rbjmisc" (map get_spec [] @ [combc_thm]);
set_merge_pcs ["basic_hol1", "'sets_alg", "'Ø", "'rbjmisc"];
=TEX
}%ignore

\section{Predicate Calculus}

There is probably a better way of doing this (or a better thing to be doing).

In some circumstances $µ\_±\_out\_lemma$ can be used to avoid or postpone a case split.

=GFT
€µ_»_lemma› =
	Ù µ p∑ $µ p § (µ x∑ p x)

€µ_±_out_lemma› =
	Ù µ p q∑ $µ p ± $µ q § (µ x∑ p x ± q x)
=TEX

\ignore{
=SML
set_goal([], ¨µp:'a ≠ BOOL∑ $µ p § $µ Ãx∑ p xÆ);
a (REPEAT strip_tac);
a (POP_ASM_T (rewrite_thm_tac o (rewrite_rule []) o (once_rewrite_rule [map_eq_sym_rule »_axiom])));
a (once_rewrite_tac [map_eq_sym_rule »_axiom]);
a (asm_rewrite_tac[]);
val µ_»_lemma = save_pop_thm "µ_»_lemma";

set_goal([], ¨µp q:'a ≠ BOOL∑ $µ p ± $µ q § $µ Ãx∑ p x ± q xÆ);
a (REPEAT strip_tac);
a (GET_ASM_T ¨$µ pÆ (rewrite_thm_tac o (once_rewrite_rule [µ_»_lemma])));
a (GET_ASM_T ¨$µ qÆ (rewrite_thm_tac o (once_rewrite_rule [µ_»_lemma])));
a (once_rewrite_tac [µ_»_lemma]);
a (asm_rewrite_tac[]);
a (once_rewrite_tac [µ_»_lemma]);
a (asm_rewrite_tac[]);
val µ_±_out_lemma = save_pop_thm "µ_±_out_lemma";
=TEX
}%ignore

\section{Type Definition Lemmas}

\subsubsection{ManyOne}

The relations used in replacement must be ``ManyOne'' relations, otherwise the image may be larger than the domain, and Russell's paradox would reappear.

πHOLCONST
‹ €ManyOne› : ('a ≠ 'b ≠ BOOL) ≠ BOOL
˜
‹ µr∑ ManyOne r § µx y z∑ r x y ± r x z ¥ y = z
∞


=GFT
type_lemmas_thm2 =
   Ù µ pred
     ∑ (∂ f∑ TypeDefn pred f)
         ¥ (∂ abs rep
         ∑ (µ a∑ abs (rep a) = a)
             ± (µ r∑ pred r § rep (abs r) = r)
             ± OneOne rep)

type_defn_lemma1 =
   Ù µ f g∑ (µ x∑ f (g x) = x) ¥ (µ x y∑ g x = g y ¥ x = y)

type_defn_lemma2 =
   Ù µ p f g
     ∑ (µ x∑ p x ¥ f (g x) = x) ¥ (µ x y∑ p x ± p y ¥ g x = g y ¥ x = y)

type_defn_lemma3 =
   Ù (∂ f∑ TypeDefn (Ã x∑ T) f)
       ¥ (∂ abs rep∑ (µ a∑ abs (rep a) = a) ± (µ r∑ rep (abs r) = r))

oneone_contrapos_lemma =
	Ù OneOne f ¥ (µ x y∑ ≥ x = y ¥ ≥ f x = f y)
=TEX


\ignore{
=SML
set_goal([], ¨µ pred
     ∑ (∂ f: 'a ≠ 'b∑ TypeDefn pred f)
         ¥ (∂ abs (rep: 'a ≠ 'b)
         ∑ (µ a∑ abs (rep a) = a) ± (µ r∑ pred r § rep (abs r) = r)
	± OneOne rep)Æ);
a (REPEAT strip_tac THEN fc_tac [type_lemmas_thm]);
a (∂_tac ¨absÆ THEN ∂_tac ¨repÆ
	THEN asm_rewrite_tac[get_spec ¨OneOneÆ]
	THEN REPEAT strip_tac);
a (LEMMA_T ¨abs (rep x1) = abs(rep x2)Æ
	(rewrite_thm_tac o (rewrite_rule[asm_rule ¨µ a∑ abs (rep a) = aÆ]))
	THEN1 rewrite_tac[asm_rule ¨rep x1 = rep x2Æ]);
val type_lemmas_thm2 = save_pop_thm "type_lemmas_thm2";

set_goal([], ¨µf g∑ (µx∑f(g(x)) = x) ¥ (µx y∑ g x = g y ¥ x = y)Æ);
a (REPEAT strip_tac);
a (LEMMA_T ¨f(g(x)) = f(g(y))Æ ante_tac THEN1 rewrite_tac[asm_rule ¨g x = g yÆ]
	THEN asm_rewrite_tac[]);
val type_defn_lemma1 = save_pop_thm "type_defn_lemma1";

set_goal([], ¨µp f g∑ (µx∑ p x ¥ f(g(x)) = x) ¥ (µx y∑ p x ± p y ¥ g x = g y ¥ x = y)Æ);
a (REPEAT strip_tac);
a (LEMMA_T ¨f(g(x)) = f(g(y))Æ ante_tac THEN1 rewrite_tac[asm_rule ¨g x = g yÆ]);
a (LEMMA_T ¨f (g x) = xÆ rewrite_thm_tac THEN1 asm_fc_tac[]);
a (LEMMA_T ¨f (g y) = yÆ rewrite_thm_tac THEN1 asm_fc_tac[]);
val type_defn_lemma2 = save_pop_thm "type_defn_lemma2";

set_goal([], ¨(∂ f: 'a ≠ 'b∑ TypeDefn (Ãx∑T) f)
         ¥ ∂ abs (rep: 'a ≠ 'b)∑
	(µ a∑ abs (rep a) = a) ± (µ r∑ rep (abs r) = r)Æ);
a (REPEAT strip_tac);
a (fc_tac [type_lemmas_thm2]);
a (DROP_NTH_ASM_T 2 (asm_tac o (rewrite_rule[])));
a (∂_tac ¨absÆ THEN ∂_tac ¨repÆ THEN asm_rewrite_tac[]);
val type_defn_lemma3 = save_pop_thm "type_defn_lemma3";

set_goal([], ¨µf∑ OneOne f ¥ µx y∑ ≥ x = y ¥ ≥ f x = f yÆ);
a (strip_tac THEN rewrite_tac [get_spec ¨OneOneÆ] THEN contr_tac);
a (asm_fc_tac[]);
val oneone_contrapos_lemma = save_pop_thm "oneone_contrapos_lemma";
=TEX
}%ignore

\section{Sets}

\subsection{Pairwise Disjointness}

Here is a definition of ``Pairwise disjoint''.

πHOLCONST
‹ $€PDisj›: 'a  SET SET ≠ BOOL
˜¸¸¸¸¸¸
‹ µss∑ PDisj ss § ≥ ∂t u∑ {t; u} Ä ss ± ≥ t = u ± ≥ t ° u = {} 
∞

\subsection{Transitivity of Inclusion}

=GFT
€Ä_trans_thm› = Ù µ A B C∑ A Ä B ± B Ä C ¥ A Ä C
=TEX

\ignore{
=SML
val Ä_trans_thm = save_thm ("Ä_trans_thm", pc_rule1 "hol1" prove_rule []
	¨µA B C∑ A Ä B ± B Ä C ¥ A Ä CÆ);
=TEX
}%ignore

\subsection{Singleton Subsets}

=GFT
€singleton_subset_lemma› =
   Ù µ x v∑ {x} Ä V § x ç V
=TEX

\ignore{
=SML
set_goal ([], ¨µV x∑ {x} Ä V § x ç VÆ);
a (PC_T1 "hol1" prove_tac[]);
val singleton_subset_lemma = save_pop_thm "singleton_subset_lemma";
=TEX
}%ignore

\subsection{Image of a Set under a Function}

πHOLCONST
‹ €FunImage›: ('a ≠ 'b) ≠ 'a SET ≠ 'b SET
˜¸¸¸¸¸¸
‹ µf A∑ FunImage f A = {b | ∂a∑ a ç A ± f a = b}
∞

\subsection{Set Displays}

The following are introduced to facilitate reasoning about sets of truth values below.

=GFT
€insert_com_thm› = 
	Ù µ x y z∑ Insert x (Insert y z) = Insert y (Insert x z)

€insert_twice_thm› =
	Ù µ x y∑ Insert x (Insert x y) = Insert x y
=TEX

\ignore{
=SML
set_goal([], ¨µx y z∑ Insert x (Insert y z) = Insert y (Insert x z)Æ);
a (rewrite_tac [sets_ext_clauses, get_spec ¨InsertÆ] THEN REPEAT strip_tac);
val insert_com_thm = save_pop_thm "insert_com_thm";

set_goal([], ¨µx y∑ Insert x (Insert x y) = (Insert x y)Æ);
a (rewrite_tac [sets_ext_clauses, get_spec ¨InsertÆ] THEN REPEAT strip_tac);
val insert_twice_thm = save_pop_thm "insert_twice_thm";
=TEX
}%ignore

\ignore{
=SML
add_pc_thms "'rbjmisc" (map get_spec [] @ [singleton_subset_lemma, insert_twice_thm]);
set_merge_pcs ["basic_hol1", "'sets_alg", "'Ø", "'rbjmisc"];
=TEX
}%ignore

\subsection{NESET - A Type of Non-Empty Sets}

=SML
new_type_defn (["NESET"], "NESET", ["'a"],
	tac_proof (([], ¨∂x:'a ∑ (Ãy∑ ∂z∑ z ç y) xÆ),
	∂_tac ¨{≈x:'a∑T}Æ THEN rewrite_tac [] THEN ∂_tac ¨≈x:'a∑TÆ THEN rewrite_tac[]) );
=TEX

\ignore{
=SML
set_goal([], ¨∂(NeSet: 'a  ≠ 'a NESET) (PeSet : 'a NESET ≠ 'a )∑
	(µx∑ ∂y∑ y ç PeSet x)
	± (µx y∑ x = y § µz∑ z ç PeSet x § z ç PeSet y)
	± (µx y∑ x ç y ¥ PeSet (NeSet y) = y)
	± (µy∑ NeSet (PeSet y) = y)Æ);
a (strip_asm_tac (get_defn "-" "NESET"));
a (fc_tac [type_lemmas_thm2]);
a (lemma_tac ¨µ r z∑ z ç r ¥ rep (abs r) = rÆ
	THEN1 (REPEAT strip_tac));
(* *** Goal "1" *** *)
a (spec_nth_asm_tac 3 ¨rÆ
		THEN_TRY asm_fc_tac[]
		THEN (DROP_NTH_ASM_T 2 ante_tac)
		THEN rewrite_tac[] THEN strip_tac THEN asm_fc_tac[]);
(* *** Goal "2" *** *)
a (∂_tac ¨absÆ THEN ∂_tac ¨repÆ THEN asm_rewrite_tac [] THEN REPEAT strip_tac
	THEN_TRY all_var_elim_asm_tac THEN asm_fc_tac[] THEN_TRY asm_rewrite_tac[]);
(* *** Goal "2.1" *** *)
a (lemma_tac ¨rep(abs(rep x)) = rep xÆ
	THEN1 asm_rewrite_tac[]);
a (spec_nth_asm_tac 4 ¨rep xÆ);
a (POP_ASM_T ante_tac THEN rewrite_tac[]);
(* *** Goal "2.2" *** *)
a (fc_tac [get_spec ¨OneOneÆ]);
a (POP_ASM_T (strip_asm_tac o (rewrite_rule [])));
a (lemma_tac ¨rep x = rep yÆ THEN1 fc_tac [map_eq_sym_rule sets_ext_clauses]);
a (asm_fc_tac[]);
save_cs_∂_thm (pop_thm());
=TEX
}%ignore

πHOLCONST
‹ €NeSet› : 'a  ≠ 'a NESET;
‹ €PeSet› : 'a NESET ≠ 'a 
˜¸¸¸¸¸¸¸¸¸¸¸
‹	  (µx∑ ∂y∑ y ç PeSet x)
‹	± (µx y∑ x = y § µz∑ z ç PeSet x § z ç PeSet y)
‹	± (µx y∑ x ç y ¥ PeSet (NeSet y) = y)
‹	± (µy∑ NeSet (PeSet y) = y)
∞

=GFT
€NeSet_ne_thm› =
	Ù µ x∑ ∂ y∑ y ç PeSet x
€NeSet_ext_thm› =
	Ù µ x y∑ x = y § (µ z∑ z ç PeSet x § z ç PeSet y)
€NeSet_fc_thm› =
	Ù µ x y∑ x ç y ¥ PeSet (NeSet y) = y
€NeSet_PeSet_thm› =
	Ù µ y∑ NeSet (PeSet y) = y
=TEX

\ignore{
=SML
val [NeSet_ne_thm, NeSet_ext_thm, NeSet_fc_thm, NeSet_PeSet_thm] = strip_±_rule (get_spec ¨NeSetÆ);
=TEX
}%ignore

=GFT
€PeSet_Insert_thm› =
	Ù µ x y∑ PeSet (NeSet (Insert x y)) = Insert x y
=TEX

\ignore{
=SML
set_goal([], ¨µx y∑ PeSet(NeSet(Insert x y)) = (Insert x y)Æ);
a (REPEAT strip_tac);
a (bc_tac [list_µ_elim [¨xÆ, ¨Insert x yÆ] NeSet_fc_thm]);
a (rewrite_tac [get_spec ¨InsertÆ]);
val PeSet_Insert_thm = save_pop_thm "PeSet_Insert_thm";
=TEX
}%ignore

πHOLCONST
‹ €MemOf› : 'a NESET ≠ 'a
˜¸¸¸¸¸¸¸¸¸¸¸
‹	µx∑ MemOf x = ≈y∑ y ç PeSet x 
∞

=GFT
€MemOf_memof_thm› =
	Ù µ x∑ MemOf x ç PeSet x
€MemOf_NeSet_unit_thm› =
	Ù µ x∑ MemOf (NeSet {x}) = x
=TEX

\ignore{
=SML
set_goal([], ¨µx∑ MemOf x ç PeSet xÆ);
a (µ_tac THEN rewrite_tac [get_spec ¨MemOfÆ]);
a (≈_tac ¨≈ y∑ y ç PeSet xÆ);
a (rewrite_tac [NeSet_ne_thm]);
val MemOf_memof_thm = save_pop_thm "MemOf_memof_thm";

val MemOf_NeSet_unit_thm = save_thm ("MemOf_NeSet_unit_thm",
	all_µ_intro (rewrite_rule [PeSet_Insert_thm] (µ_elim ¨NeSet {x}Æ MemOf_memof_thm)));
=TEX
}%ignore

\section{Lists}

\subsection{List Membership}

=SML
declare_infix(300, "çâL");
=TEX

πHOLCONST
‹ $€çâL›: 'a ≠ 'a  LIST ≠ BOOL
˜¸¸¸¸¸¸
‹ µ a b al∑ (a çâL [] § F)
‹	± (a çâL (Cons b al) § a = b ≤ a çâL al)
∞

\subsection{Quantification}

πHOLCONST
‹ €µâL›: BOOL LIST ≠ BOOL
˜¸¸¸¸¸¸
‹ µ bl∑ µâL bl = Fold $± bl T
∞

πHOLCONST
‹ €∂âL›: BOOL LIST ≠ BOOL
˜¸¸¸¸¸¸
‹ µ bl∑ ∂âL bl = Fold $≤ bl F
∞

\subsection{Mapping Constructors}

The idea here is to facilitate the construction of a list of objects of some kind (typically a HOL labelled product), given a curried constructor and lists of the operands.
We will need a different one for each arity of constructor, so I will use a numeric suffix.

πHOLCONST
‹ €MapCfâ2›: ('a ≠ 'b ≠ 'c) ≠ 'a LIST ≠ 'b LIST ≠ 'c LIST
˜¸¸¸¸¸¸
‹ µ cf al bl∑  MapCfâ2 cf al bl = Map (Uncurry cf) (Combine al bl)
∞

πHOLCONST
‹ €MapCfâ3›: ('a ≠ 'b ≠ 'c ≠ 'd) ≠ 'a LIST ≠ 'b LIST ≠ 'c LIST ≠ 'd LIST
˜¸¸¸¸¸¸
‹ µ cf al bl cl∑  MapCfâ3 cf al bl cl =
	Map (Uncurry (Uncurry cf)) (Combine (Combine al bl) cl)
∞

\subsection{Lists of Sets}

πHOLCONST
‹ €List2Set›: 'a LIST ≠ 'a SET
˜¸¸¸¸¸¸
‹ µl∑ List2Set l = {e | e çâL l}
∞
πHOLCONST
‹ €ListUnion›: 'a SET LIST ≠ 'a SET
˜¸¸¸¸¸¸
‹ µl∑ ListUnion l = ﬁ (List2Set l)
∞
πHOLCONST
‹ €ListFunUnion›: ('a SET ≠ 'a SET) LIST ≠ ('a SET ≠ 'a SET)
˜¸¸¸¸¸¸
‹ µl as∑ ListFunUnion l as = ListUnion (Map (Ãf∑ f as) l)
∞

=GFT
€ListUnion_thm› =
   Ù ListUnion [] = {} ± (µ h t∑ ListUnion (Cons h t) = h ¿ ListUnion t)
=TEX

\ignore{
=SML
set_goal([], ¨ListUnion [] = {} ± µh t∑ ListUnion (Cons h t) = h ¿ (ListUnion t)Æ);
a (rewrite_tac ((map get_spec [¨ListUnionÆ, ¨FoldÆ, ¨List2SetÆ, ¨$çâLÆ])@[sets_ext_clauses])
	THEN REPEAT strip_tac THEN_TRY (all_asm_fc_tac[]));
(* *** Goal "1" *** *)
a ( ∂_tac ¨sÆ THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a ( ∂_tac ¨hÆ THEN asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a ( ∂_tac ¨sÆ THEN asm_rewrite_tac[]);
val ListUnion_thm = save_pop_thm "ListUnion";
=TEX
}%ignore

\subsection{Lists of Natural Numbers}

A function for making a list of ascending natural numbers.

=SML
declare_infix (300, "..âL");
=TEX
πHOLCONST
‹ $€..âL›: Ó ≠ Ó ≠ Ó LIST
˜¸¸¸¸¸¸
‹ µ x y∑ x ..âL 0 = []
‹ ± x ..âL (y + 1) = if x º y then (x ..âL y) @ [y+1] else []
∞

\section{Real Numbers and Analysis}

\subsection{Products}
=GFT
Ø_prod_sign_iff_clauses 
Ù (µ x y∑ ÓØ 0 <R x *âR y		§ ÓØ 0 <âR x ± ÓØ 0 <âR y ≤ x <âR ÓØ 0 ± y <âR ÓØ 0)
± (µ x y∑ x *âR y <âR ÓØ 0		§ ÓØ 0 <âR x ± y <âR ÓØ 0 ≤ x <âR ÓØ 0 ± ÓØ 0 <âR y)
± (µ x y∑ ÓØ 0 ºâR x *âR y		§ ÓØ 0 ºâR x ± ÓØ 0 ºâR y ≤ x ºâR ÓØ 0 ± y ºâR ÓØ 0)
± (µ x y∑ x *âR y ºâR ÓØ 0		§ ÓØ 0 ºâR x ± y ºâR ÓØ 0 ≤ x ºâR ÓØ 0 ± ÓØ 0 ºâR y)
± (µ x y∑ x *âR y = ÓØ 0		§ x = ÓØ 0 ≤ y = ÓØ 0)
± (µ x y∑ ÓØ 0 = x *âR y		§ x = ÓØ 0 ≤ y = ÓØ 0)
=TEX

\ignore{
=SML
set_goal([], ¨µ x y∑
	(ÓØ 0 <âR x ± ÓØ 0 <âR y ¥ ÓØ 0 <âR x *âR y)
	± (x <âR ÓØ 0 ± y <âR ÓØ 0 ¥ ÓØ 0 <âR x *âR y)
	± (x <âR ÓØ 0 ± ÓØ 0 <âR y ¥ x *âR y <âR ÓØ 0)
	± (ÓØ 0 <âR x ± y <âR ÓØ 0 ¥ x *âR y <âR ÓØ 0)
	± (x = ÓØ 0 ≤ y = ÓØ 0 ¥ x *âR y = ÓØ 0)
Æ);
a (REPEAT strip_tac
	THEN TRY (asm_rewrite_tac[]));
(* *** Goal "1" *** *)
a (all_asm_ufc_tac [Ø_0_less_0_less_times_thm]);
(* *** Goal "2" *** *)
a (all_asm_ufc_tac [Ø_less_0_less_thm]);
a (LEMMA_T ¨ÓØ 0 <âR (~âR x) *âR (~âR y)Æ ante_tac
	THEN1 all_asm_ufc_tac [Ø_0_less_0_less_times_thm]);
a (rewrite_tac[Ø_times_minus_thm]);
(* *** Goal "3" *** *)
a (once_rewrite_tac [Ø_less_0_less_thm]);
a (rewrite_tac[]);
a (lemma_tac ¨ÓØ 0 <âR (~âR x)Æ
	THEN1 (ALL_ASM_FC_T (MAP_EVERY ante_tac) [Ø_less_0_less_thm]
		THEN rewrite_tac[]
		THEN REPEAT strip_tac));
a (all_asm_ufc_tac [Ø_0_less_0_less_times_thm]);
a (lemma_tac ¨~âR (x *âR y) = ~âR x *âR yÆ
	THEN1 (PC_T1 "Ø_lin_arith" prove_tac[]));
a (asm_rewrite_tac[]);
(* *** Goal "4" *** *)
a (once_rewrite_tac [Ø_less_0_less_thm]);
a (rewrite_tac[]);
a (lemma_tac ¨ÓØ 0 <âR (~âR y)Æ
	THEN1 (ALL_ASM_FC_T (MAP_EVERY ante_tac) [Ø_less_0_less_thm]
		THEN rewrite_tac[]
		THEN REPEAT strip_tac));
a (all_asm_ufc_tac [Ø_0_less_0_less_times_thm]);
a (lemma_tac ¨~âR (x *âR y) = x *âR ~âR yÆ
	THEN1 (PC_T1 "Ø_lin_arith" prove_tac[]));
a (asm_rewrite_tac[]);
val Ø_product_sign_lemma = pop_thm ();
=TEX
=SML
set_goal([], ¨µ x y∑
	(ÓØ 0 <âR x *âR y ¥ ÓØ 0 <âR x ± ÓØ 0 <âR y ≤ x <âR ÓØ 0 ± y <âR ÓØ 0)
	± (x *âR y <âR ÓØ 0 ¥ ÓØ 0 <âR x ± y <âR ÓØ 0 ≤ ÓØ 0 <âR y ± x <âR ÓØ 0)
	± (x *âR y = ÓØ 0 ¥ x = ÓØ 0 ≤ y = ÓØ 0)
Æ);
a contr_tac;
(* *** Goal "1" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
a (DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "2.1" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "2.1.1" *** *)
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2" *** *)
a (all_asm_ufc_tac[Ø_product_sign_lemma]);
a (all_asm_ufc_tac[Ø_less_trans_thm]);
(* *** Goal "2.2" *** *)
a (DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "3.1" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "3.1.1" *** *)
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "3.1.2" *** *)
a (all_asm_ufc_tac[Ø_product_sign_lemma]);
a (all_asm_ufc_tac[Ø_less_trans_thm]);
(* *** Goal "3.2" *** *)
a (DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "4" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
a (DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "5" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "5.1" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "5.1.1" *** *)
a (all_asm_ufc_tac[Ø_product_sign_lemma]);
a (all_asm_ufc_tac[Ø_less_trans_thm]);
(* *** Goal "5.1.2" *** *)
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "5.2" *** *)
a (DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "6" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
a (DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "7" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
a (DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "8" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "8.1" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "8.1.1" *** *)
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "8.1.2" *** *)
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "8.2" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "8.2.1" *** *)
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "8.2.2" *** *)
a (all_asm_ufc_tac[Ø_product_sign_lemma]);
a (all_asm_ufc_tac[Ø_less_trans_thm]);
(* *** Goal "9" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "9.1" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "9.1.1" *** *)
a (all_asm_ufc_tac[Ø_product_sign_lemma]);
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "9.1.2" *** *)
a (all_asm_ufc_tac[Ø_product_sign_lemma]);
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "9.2" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨ÓØ 0Æ] Ø_less_cases_thm));
(* *** Goal "9.2.1" *** *)
a (all_asm_ufc_tac[Ø_product_sign_lemma]);
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "9.2.2" *** *)
a (all_asm_ufc_tac[Ø_product_sign_lemma]);
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
val Ø_product_sign_cp_lemma = pop_thm ();
=TEX
=SML
set_goal([], ¨(µ x y∑ ÓØ 0 <âR x *âR y § ÓØ 0 <âR x ± ÓØ 0 <âR y
		≤ x <âR ÓØ 0 ± y <âR ÓØ 0)
	± (µ x y∑ x *âR y <âR ÓØ 0 § ÓØ 0 <âR x ± y <âR ÓØ 0
		≤ x <âR ÓØ 0 ± ÓØ 0 <âR y)
	± (µ x y∑ x *âR y = ÓØ 0 § x = ÓØ 0 ≤ y = ÓØ 0)
	± (µ x y∑ ÓØ 0 = x *âR y § x = ÓØ 0 ≤ y = ÓØ 0)Æ);
a (REPEAT strip_tac
	THEN TRY (asm_rewrite_tac [])
	THEN TRY (all_ufc_tac [Ø_product_sign_lemma,
	Ø_product_sign_cp_lemma]));
a (DROP_NTH_ASM_T 2 (asm_tac o (conv_rule eq_sym_conv))
	THEN ufc_tac [Ø_product_sign_cp_lemma]
	THEN asm_rewrite_tac[]);
val Ø_prod_sign_iff_lemma = pop_thm ();
=TEX
=SML
set_goal([], ¨(µ x y∑ ÓØ 0 ºâR x *âR y § ÓØ 0 ºâR x ± ÓØ 0 ºâR y
		≤ x ºâR ÓØ 0 ± y ºâR ÓØ 0)
	± (µ x y∑ x *âR y ºâR ÓØ 0 § ÓØ 0 ºâR x ± y ºâR ÓØ 0
		≤ x ºâR ÓØ 0 ± ÓØ 0 ºâR y)
	± (µ x y∑ x *âR y = ÓØ 0 § x = ÓØ 0 ≤ y = ÓØ 0)
	± (µ x y∑ ÓØ 0 = x *âR y § x = ÓØ 0 ≤ y = ÓØ 0)Æ);
a (rewrite_tac [get_spec ¨$ºâRÆ, Ø_prod_sign_iff_lemma]);
a (REPEAT_N 6 strip_tac THEN TRY (asm_rewrite_tac[])
	THEN (PC_T1 "Ø_lin_arith" prove_tac[]));
val Ø_prod_sign_iff_lemma2 = pop_thm ();
=TEX
=SML
set_goal([], ¨(µ x y∑ ÓØ 0 <âR x *âR y § ÓØ 0 <âR x ± ÓØ 0 <âR y
		≤ x <âR ÓØ 0 ± y <âR ÓØ 0)
	± (µ x y∑ x *âR y <âR ÓØ 0 § ÓØ 0 <âR x ± y <âR ÓØ 0
		≤ x <âR ÓØ 0 ± ÓØ 0 <âR y)
	± (µ x y∑ ÓØ 0 ºâR x *âR y § ÓØ 0 ºâR x ± ÓØ 0 ºâR y
		≤ x ºâR ÓØ 0 ± y ºâR ÓØ 0)
	± (µ x y∑ x *âR y ºâR ÓØ 0 § ÓØ 0 ºâR x ± y ºâR ÓØ 0
		≤ x ºâR ÓØ 0 ± ÓØ 0 ºâR y)
	± (µ x y∑ x *âR y = ÓØ 0 § x = ÓØ 0 ≤ y = ÓØ 0)
	± (µ x y∑ ÓØ 0 = x *âR y § x = ÓØ 0 ≤ y = ÓØ 0)Æ);
a (rewrite_tac [Ø_prod_sign_iff_lemma, Ø_prod_sign_iff_lemma2]
	THEN (PC_T1 "Ø_lin_arith" prove_tac[]));
val Ø_prod_sign_iff_clauses = save_pop_thm "Ø_prod_sign_iff_clauses";
=TEX
}%ignore

\ignore{

=SML
set_goal([], ¨µ x y z∑ ÓØ 0 <âR x ± y <âR z ¥ y *âR x <âR z *âR xÆ);
a (REPEAT strip_tac);
a (all_ufc_tac [Ø_times_mono_thm]);
a (PC_T1 "Ø_lin_arith" asm_prove_tac[]);
val Ø_times_mono_thm1 = save_pop_thm "Ø_times_mono_thm1";
=TEX

=SML

set_goal([], ¨µ x y z∑ ÓØ 0 ºâR x ± y ºâR z ¥ x *âR y ºâR x *âR zÆ);
a (rewrite_tac [get_spec ¨$ºâRÆ]
	THEN REPEAT strip_tac
	THEN TRY (asm_rewrite_tac[])
	THEN TRY (SYM_ASMS_T rewrite_tac)
	THEN TRY (all_ufc_tac
	[Ø_times_mono_thm, Ø_times_mono_thm1, Ø_less_trans_thm]));
val Ø_times_mono_thm2 = save_pop_thm "Ø_times_mono_thm2";

set_goal([], ¨µ x y z∑ ÓØ 0 ºâR x ± y ºâR z ¥ y *âR x ºâR z *âR xÆ);
a (rewrite_tac [get_spec ¨$ºâRÆ]
	THEN REPEAT strip_tac
	THEN TRY (asm_rewrite_tac[])
	THEN TRY (SYM_ASMS_T rewrite_tac)
	THEN TRY (all_ufc_tac
	[Ø_times_mono_thm, Ø_times_mono_thm1, Ø_less_trans_thm]));
val Ø_times_mono_thm3 = save_pop_thm "Ø_times_mono_thm3";
=TEX

=SML
set_goal([], ¨µ w x y z∑ ÓØ 0 <âR w ± ÓØ 0 <âR y ± w <âR x ± y <âR z ¥ w *âR y <âR x *âR zÆ);
a (REPEAT strip_tac);
a (lemma_tac ¨ÓØ 0 <âR z ± ÓØ 0 <âR xÆ
	THEN1 (all_asm_ufc_tac[Ø_less_trans_thm])
	THEN REPEAT strip_tac);
a (lemma_tac ¨w *âR y <âR w *âR zÆ
	THEN1 (all_asm_ufc_tac[Ø_times_mono_thm, Ø_times_mono_thm1, Ø_less_trans_thm]));
a (lemma_tac ¨w *âR z <âR x *âR zÆ
	THEN1 (strip_asm_tac (list_µ_elim [¨zÆ, ¨wÆ, ¨xÆ] Ø_times_mono_thm1)));
a (strip_asm_tac (list_µ_elim [¨w *âR yÆ, ¨w *âR zÆ, ¨x *âR zÆ] Ø_less_trans_thm));
val Ø_times_mono_thm4 = save_pop_thm "Ø_times_mono_thm4";
=TEX

=SML
set_goal([], ¨µ w x y z∑ ÓØ 0 ºâR w ± ÓØ 0 ºâR y ± w ºâR x ± y ºâR z ¥ w *âR y ºâR x *âR zÆ);
a (REPEAT strip_tac);
a (lemma_tac ¨ÓØ 0 ºâR z ± ÓØ 0 ºâR xÆ
	THEN1 (all_asm_ufc_tac[Ø_º_trans_thm])
	THEN REPEAT strip_tac);
a (lemma_tac ¨w *âR y ºâR w *âR zÆ
	THEN1 (all_asm_ufc_tac[Ø_times_mono_thm2, Ø_times_mono_thm3, Ø_º_trans_thm]));
a (lemma_tac ¨w *âR z ºâR x *âR zÆ
	THEN1 (strip_asm_tac (list_µ_elim [¨zÆ, ¨wÆ, ¨xÆ] Ø_times_mono_thm3)));
a (strip_asm_tac (list_µ_elim [¨w *âR yÆ, ¨w *âR zÆ, ¨x *âR zÆ] Ø_º_trans_thm));
val Ø_times_mono_thm5 = save_pop_thm "Ø_times_mono_thm5";
=TEX
}%ignore

\subsection{Squares}

\ignore{
=SML
set_goal([], ¨µ x y∑ ÓØ 0 <âR x ± x <âR y ¥ x *âR x <âR y *âR yÆ);
a (REPEAT strip_tac);
a (all_asm_ufc_tac [Ø_less_trans_thm]);
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨yÆ, ¨xÆ, ¨yÆ] Ø_times_mono_thm4));
val Ø_square_mono_thm = save_pop_thm "Ø_square_mono_thm";
=TEX

=SML
set_goal([], ¨µ x y∑ ÓØ 0 ºâR x ± x ºâR y ¥ x *âR x ºâR y *âR yÆ);
a (REPEAT strip_tac);
a (all_asm_ufc_tac [Ø_º_trans_thm]);
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨yÆ, ¨xÆ, ¨yÆ] Ø_times_mono_thm5));
val Ø_square_mono_thm1 = save_pop_thm "Ø_square_mono_thm1";
=TEX

=SML
set_goal([], ¨µ x y z∑ ÓØ 0 <âR x ± ÓØ 0 <âR y ± x *âR x <âR y *âR y ¥ x <âR yÆ);
a (REPEAT strip_tac);
a (strip_asm_tac (all_µ_elim Ø_less_cases_thm));
(* *** Goal "1" *** *)
a (DROP_ASM_T ¨x *âR x <âR y *âR yÆ ante_tac
	THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨xÆ] Ø_square_mono_thm));
a (all_ufc_tac [Ø_less_antisym_thm]);
val Ø_square_less_less_thm = save_pop_thm "Ø_square_less_less_thm";
=TEX

-SML
set_goal([], ¨µ x y∑ ÓØ 0 <âR x ± ÓØ 0 <âR y ¥ (x *âR x <âR y *âR y § x <âR y)Æ);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (all_ufc_tac [Ø_square_less_less_thm]);
(* *** Goal "2" *** *)
a (all_ufc_tac [Ø_square_mono_thm]);
val Ø_square_less_iff_less_thm = save_pop_thm "Ø_square_less_iff_less_thm";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ ÓØ 0 <âR x ± ÓØ 0 <âR y ± y *âR y = x *âR x ¥ x = yÆ);
a (REPEAT strip_tac);
a (strip_asm_tac (all_µ_elim Ø_less_cases_thm)
	THEN (ufc_tac [Ø_times_mono_thm]));
(* *** Goal "1" *** *)
a (lemma_tac ¨x *âR x <âR x *âR yÆ
	THEN1 asm_ufc_tac []);
a (lemma_tac ¨x *âR y <âR y *âR yÆ
	THEN1 all_ufc_tac [list_µ_elim [¨yÆ, ¨xÆ, ¨yÆ] Ø_times_mono_thm1]);
a (ALL_FC_T (MAP_EVERY ante_tac) [Ø_less_trans_thm]
	THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (lemma_tac ¨x *âR y <âR x *âR xÆ
	THEN1 asm_ufc_tac []);
a (lemma_tac ¨y *âR y <âR x *âR yÆ
	THEN1 all_ufc_tac [list_µ_elim [¨yÆ, ¨yÆ, ¨xÆ] Ø_times_mono_thm1]);
a (ALL_FC_T (MAP_EVERY ante_tac) [Ø_less_trans_thm]
	THEN asm_rewrite_tac[]);
val Ø_square_eq_thm1 = save_pop_thm "Ø_square_eq_thm1";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ ÓØ 0 ºâR x ± ÓØ 0 ºâR y ± y *âR y = x *âR x ¥ x = yÆ);
a (rewrite_tac[get_spec ¨$ºâRÆ]);
a (rewrite_tac (map eq_sym_conv [¨ÓØ 0 = xÆ, ¨ÓØ 0 = yÆ])
	THEN REPEAT strip_tac
	THEN TRY (asm_rewrite_tac[]));
(* *** Goal "1" *** *)
a (all_ufc_tac [Ø_square_eq_thm1]);
(* *** Goal "2" *** *)
a (POP_ASM_T ante_tac THEN asm_rewrite_tac[Ø_prod_sign_iff_clauses]);
(* *** Goal "3" *** *)
a (POP_ASM_T ante_tac
	THEN asm_rewrite_tac[Ø_prod_sign_iff_clauses]
	THEN STRIP_T rewrite_thm_tac);
val Ø_square_eq_thm2 = save_pop_thm "Ø_square_eq_thm2";
=TEX

=SML
set_goal([], ¨µ x y∑ ÓØ 0 <âR x ± ÓØ 0 <âR y ¥ (x *âR x = y *âR y § x = y)Æ);
a (REPEAT strip_tac
	THEN TRY (asm_rewrite_tac[]));
a (strip_asm_tac (all_µ_elim Ø_less_cases_thm)
	THEN (ALL_FC_T (MAP_EVERY ante_tac) [Ø_square_mono_thm])
	THEN TRY (asm_rewrite_tac[]));
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨xÆ] Ø_square_mono_thm)
	THEN POP_ASM_T ante_tac
	THEN TRY (asm_rewrite_tac[]));
val Ø_square_eq_eq_thm = save_pop_thm "Ø_square_eq_eq_thm";
=TEX

=SML
set_goal([], ¨µ x y∑ ÓØ 0 ºâR x ± ÓØ 0 ºâR y ¥ (x *âR x = y *âR y § x = y)Æ);
a (rewrite_tac[get_spec ¨$ºâRÆ]
	THEN REPEAT strip_tac
	THEN TRY (SYM_ASMS_T rewrite_tac));
(* *** Goal "1" *** *)
a (all_ufc_tac [Ø_square_eq_eq_thm]);
(* *** Goal "2" *** *)
a (POP_ASM_T ante_tac
	THEN SYM_ASMS_T rewrite_tac
	THEN rewrite_tac [Ø_prod_sign_iff_clauses]);
(* *** Goal "3" *** *)
a (POP_ASM_T ante_tac
	THEN SYM_ASMS_T rewrite_tac
	THEN rewrite_tac [Ø_prod_sign_iff_clauses]
	THEN strip_tac
	THEN asm_rewrite_tac[]);
val Ø_square_eq_eq_thm2 = save_pop_thm "Ø_square_eq_eq_thm2";
=TEX

=SML
set_goal([], ¨µ x y∑ ÓØ 0 ºâR x ± ÓØ 0 ºâR y ± x *âR x ºâR y *âR y ¥ x ºâR yÆ);
a (REPEAT strip_tac);
a (strip_asm_tac (all_µ_elim Ø_less_cases_thm));
(* *** Goal "1" *** *)
a (asm_rewrite_tac[get_spec ¨$ºâRÆ]);
(* *** Goal "2" *** *)
a (DROP_ASM_T ¨x *âR x ºâR y *âR yÆ ante_tac
	THEN asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a (strip_asm_tac (list_µ_elim [¨yÆ, ¨xÆ] Ø_square_mono_thm1));
(* *** Goal "3.1" *** *)
a (POP_ASM_T ante_tac THEN asm_rewrite_tac[get_spec ¨$ºâRÆ]);
(* *** Goal "3.2" *** *)
a (all_ufc_tac [pc_rule1 "Ø_lin_arith"
	prove_rule [] ¨µx y:Ø∑ x ºâR y ± y ºâR x ¥ x = yÆ]);
a (all_ufc_tac [Ø_square_eq_eq_thm2]);
a (all_var_elim_asm_tac);
val Ø_square_º_º_thm = save_pop_thm "Ø_square_º_º_thm";
=TEX

=SML
set_goal([], ¨µ x y∑ ÓØ 0 ºâR x ± ÓØ 0 ºâR y ¥ (x *âR x ºâR y *âR y § x ºâR y)Æ);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (all_ufc_tac [Ø_square_º_º_thm]);
(* *** Goal "2" *** *)
a (all_ufc_tac [Ø_square_mono_thm1]);
val Ø_square_º_iff_º_thm = save_pop_thm "Ø_square_º_iff_º_thm";
=TEX

=SML
set_goal([], ¨µ x y∑ x *âR x = y *âR y § Abs x = Abs yÆ);
a (REPEAT µ_tac
	THEN rewrite_tac [get_spec ¨AbsâRÆ]
	THEN cases_tac ¨ÓØ 0 ºâR xÆ
	THEN cases_tac ¨ÓØ 0 ºâR yÆ
	THEN TRY (asm_rewrite_tac[])
	);
(* *** Goal "1" *** *)
a (all_ufc_§_rewrite_tac [Ø_square_eq_eq_thm2]); 
(* *** Goal "2" *** *)
a (all_asm_ante_tac
	THEN lemma_tac ¨∂ z∑ y = ~âR zÆ
	THEN1 (∂_tac ¨~âR yÆ
		THEN rewrite_tac[])
	THEN asm_rewrite_tac [Ø_times_minus_thm]
	THEN REPEAT strip_tac);
(* *** Goal "2.1" *** *)
a (lemma_tac ¨ÓØ 0 ºâR zÆ
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac []));
a (all_ufc_tac [Ø_square_eq_eq_thm2]); 
(* *** Goal "2.2" *** *)
a (asm_rewrite_tac []);
(* *** Goal "3" *** *)
a (all_asm_ante_tac
	THEN lemma_tac ¨∂ z∑ x = ~âR zÆ
	THEN1 (∂_tac ¨~âR xÆ
		THEN rewrite_tac[])
	THEN asm_rewrite_tac [Ø_times_minus_thm]);
a (strip_tac THEN strip_tac);
a (lemma_tac ¨ÓØ 0 ºâR zÆ
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac []));
a (all_ufc_§_rewrite_tac [Ø_square_eq_eq_thm2]); 
(* *** Goal "4" *** *)
a (all_asm_ante_tac
	THEN lemma_tac ¨∂ z∑ x = ~âR zÆ
	THEN1 (∂_tac ¨~âR xÆ
		THEN rewrite_tac[])
	THEN lemma_tac ¨∂ v∑ y = ~âR vÆ
	THEN1 (∂_tac ¨~âR yÆ
		THEN rewrite_tac[])
	THEN asm_rewrite_tac[]
	THEN strip_tac THEN strip_tac);
a (lemma_tac ¨ÓØ 0 ºâR zÆ
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac []));
a (lemma_tac ¨ÓØ 0 ºâR vÆ
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac []));
a (rewrite_tac [Ø_times_minus_thm]);
a (all_ufc_§_rewrite_tac [Ø_square_eq_eq_thm2]);
val Ø_square_eq_iff_abs_eq_thm = save_pop_thm "Ø_square_eq_iff_abs_eq_thm";
=TEX

=SML
set_goal([], ¨µx:Ø∑ ÓØ 0 º x ^ 2Æ);
a (rewrite_tac [Ø_Ó_exp_square_thm, Ø_prod_sign_iff_clauses]);
a (PC_T1 "Ø_lin_arith" prove_tac[]);
val Ø_square_pos_thm = save_pop_thm "Ø_square_pos_thm";
=TEX
}%ignore

\subsection{Sums}

\ignore{
=SML
set_goal([], ¨µx y:Ø∑ ÓØ 0 º x ± ÓØ 0 º y ¥ ÓØ 0 º x + yÆ);
a (PC_T1 "Ø_lin_arith" prove_tac[]);
val Ø_sum_pos_thm = save_pop_thm "Ø_sum_pos_thm";
=TEX

=SML
set_goal([], ¨µ x y:Ø∑ ÓØ 0 º x ^âN 2 +âR y ^âN 2Æ);
a (REPEAT µ_tac);
a (lemma_tac ¨ÓØ 0 º x ^ 2 ± ÓØ 0 º y ^ 2Æ
	THEN1 rewrite_tac [Ø_square_pos_thm]);
a (all_ufc_tac [Ø_sum_pos_thm]);
val Ø_sum_square_pos_thm = save_pop_thm "Ø_sum_square_pos_thm";
=TEX

=SML
set_goal([], ¨µx y: Ø∑ x^2 + y^2 = ÓØ 0 § x = ÓØ 0 ± y = ÓØ 0Æ);
a (REPEAT_N 5 strip_tac THEN TRY (asm_rewrite_tac[]));
a (lemma_tac ¨ÓØ 0 º x ^ 2 ± ÓØ 0 º y ^ 2Æ
	THEN1 rewrite_tac [Ø_square_pos_thm]);
a (ALL_FC_T (MAP_EVERY (asm_tac o (rewrite_rule [Ø_Ó_exp_square_thm, Ø_prod_sign_iff_clauses])))
	[pc_rule1 "Ø_lin_arith" prove_rule []
	¨µx y: Ø∑ÓØ 0 º x ± ÓØ 0 º y ¥ x + y = ÓØ 0 ¥ x = ÓØ 0 ± y = ÓØ 0Æ]
	THEN asm_rewrite_tac[]);
val Ø_sum_square_zero_thm = save_pop_thm "Ø_sum_square_zero_thm";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ ÓØ 0 º x ± ÓØ 0 º y
	¥ (x + y = ÓØ 0 § x = ÓØ 0 ± y = ÓØ 0)Æ);
a (PC_T1 "Ø_lin_arith" prove_tac[]);
val Ø_sum_zero_thm = save_pop_thm "Ø_sum_zero_thm";
=TEX

=SML
set_goal([], ¨µ x y:Ø∑ Abs (x ^âN 2 +âR y ^âN 2) = x ^âN 2 +âR y ^âN 2Æ);
a (REPEAT µ_tac);
a (asm_rewrite_tac [get_spec ¨AbsâRÆ, Ø_sum_square_pos_thm]);
val Ø_abs_sum_square_thm = save_pop_thm "Ø_abs_sum_square_thm";
=TEX


=SML
val Ø_plus_mono_thm = save_thm ("Ø_plus_mono_thm", pc_rule1 "Ø_lin_arith" prove_rule []
	¨µu v x y∑ u ºâR v ± x ºâR y ¥ u +âR x ºâR v +âR yÆ);
=TEX
}%ignore

\subsection{Abs}

The following arithmetic results are obtained for reasoning about norms on real vector spaces, in particular to prove that $Abs$ is a norm over the reals and that the defined product operation over norms yields a norm.

=GFT
Ø_Abs_Norm_clauses 
Ù (µ v∑ ÓØ 0 ºâR AbsâR v)
± (µ v∑ (AbsâR v = ÓØ 0) § v = ÓØ 0)
± (µ x v∑ AbsâR (x *âR v) = AbsâR x *âR AbsâR v)
± (µ v w∑ AbsâR (v +âR w) ºâR AbsâR v +âR AbsâR w)
=TEX

\ignore{
=SML
set_goal([], ¨(µ v∑ ÓØ 0 ºâR AbsâR v)
             ± (µ v∑ (AbsâR v = ÓØ 0) = v = ÓØ 0)
             ± (µ x v∑ AbsâR (x *âR v) = AbsâR x *âR AbsâR v)
             ± (µ v w∑ AbsâR (v +âR w) ºâR AbsâR v +âR AbsâR w)Æ);
a (rewrite_tac [get_spec ¨AbsâRÆ, get_spec ¨$ºâRÆ, Ø_prod_sign_iff_clauses]);
a (REPEAT ±_tac THEN REPEAT µ_tac);
(* *** Goal "1" *** *)
a (CASES_T ¨ÓØ 0 < v ≤ ÓØ 0 = vÆ asm_tac
	THEN TRY (asm_rewrite_tac[]));
a (PC_T1 "Ø_lin_arith" asm_prove_tac[]);
(* *** Goal "2" *** *)
a (CASES_T ¨ÓØ 0 < v ≤ ÓØ 0 = vÆ asm_tac
	THEN TRY (asm_rewrite_tac[])
	THEN TRY (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
(* *** Goal "3" *** *)
a (strip_asm_tac (list_µ_elim [¨xÆ, ¨ÓØ 0Æ] Ø_less_cases_thm)
	THEN asm_rewrite_tac[]
	THEN (strip_asm_tac (list_µ_elim [¨vÆ, ¨ÓØ 0Æ] Ø_less_cases_thm))
	THEN asm_rewrite_tac[]);
(* *** Goal "3.1" *** *)
a (LEMMA_T ¨≥(ÓØ 0 < x ≤ ÓØ 0 = x)Æ asm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (LEMMA_T ¨≥(ÓØ 0 < v ≤ ÓØ 0 = v)Æ asm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (asm_rewrite_tac[Ø_times_minus_thm]);
(* *** Goal "3.2" *** *)
a (LEMMA_T ¨≥(ÓØ 0 < x ≤ ÓØ 0 = x)Æ asm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (LEMMA_T ¨≥(v < ÓØ 0 ≤ x = ÓØ 0 ≤ v = ÓØ 0)Æ asm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (asm_rewrite_tac[Ø_times_minus_thm]);
(* *** Goal "3.3" *** *)
a (LEMMA_T ¨≥(ÓØ 0 < v ≤ ÓØ 0 = v)Æ asm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (asm_rewrite_tac[Ø_times_minus_thm]);
a (LEMMA_T ¨≥(x < ÓØ 0 ≤ x = ÓØ 0 ≤ v = ÓØ 0)Æ asm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (asm_rewrite_tac[Ø_times_minus_thm]);
(* *** Goal "4" *** *)
a (strip_asm_tac (list_µ_elim [¨wÆ, ¨ÓØ 0Æ] Ø_less_cases_thm)
	THEN TRY (asm_rewrite_tac[])
	THEN (strip_asm_tac (list_µ_elim [¨vÆ, ¨ÓØ 0Æ] Ø_less_cases_thm))
	THEN TRY (asm_rewrite_tac[]));
(* *** Goal "4.1" *** *)
a (LEMMA_T ¨≥(ÓØ 0 <âR v ≤ ÓØ 0 = v)Æ rewrite_thm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (LEMMA_T ¨≥(ÓØ 0 <âR w ≤ ÓØ 0 = w)Æ rewrite_thm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (LEMMA_T ¨≥(ÓØ 0 <âR v +âR w ≤ ÓØ 0 = v +âR w)Æ rewrite_thm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
(* *** Goal "4.2" *** *)
a (LEMMA_T ¨≥(ÓØ 0 <âR w ≤ ÓØ 0 = w)Æ rewrite_thm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (CASES_T ¨ÓØ 0 <âR v +âR w ≤ ÓØ 0 = v +âR wÆ rewrite_thm_tac
	THEN TRY (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
(* *** Goal "4.3" *** *)
a (LEMMA_T ¨≥(ÓØ 0 <âR v ≤ ÓØ 0 = v)Æ rewrite_thm_tac
	THEN1 PC_T1 "Ø_lin_arith" asm_prove_tac[]);
a (CASES_T ¨ÓØ 0 <âR v +âR w ≤ ÓØ 0 = v +âR wÆ rewrite_thm_tac
	THEN TRY (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
(* *** Goal "4.4" *** *)
a (CASES_T ¨ÓØ 0 <âR v +âR w ≤ ÓØ 0 = v +âR wÆ rewrite_thm_tac
	THEN TRY (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
val Ø_Abs_Norm_clauses = save_pop_thm "Ø_Abs_Norm_clauses";
=TEX

=SML
set_goal([], ¨µx:Ø∑ x ºâR Abs xÆ);
a (REPEAT strip_tac
	THEN rewrite_tac [get_spec ¨AbsâRÆ]
	THEN cases_tac ¨ÓØ 0 ºâR xÆ
	THEN asm_rewrite_tac[]
	THEN PC_T1 "Ø_lin_arith" asm_prove_tac[]);
val Ø_º_abs_thm = save_pop_thm "Ø_º_abs_thm";
=TEX

=SML
set_goal([], ¨µx:Ø∑ ÓØ 0 ºâR x ¥ Abs x = xÆ);
a (REPEAT strip_tac
	THEN rewrite_tac [get_spec ¨AbsâRÆ]
	THEN asm_rewrite_tac []);
val Ø_abs_pos_id_thm = save_pop_thm "Ø_abs_pos_id_thm";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ ÓØ 0 ºâR x ± x ºâR y ¥ Abs x ºâR Abs yÆ);
a (REPEAT strip_tac
	THEN rewrite_tac [get_spec ¨AbsâRÆ]
	THEN cases_tac ¨ÓØ 0 ºâR xÆ
	THEN cases_tac ¨ÓØ 0 ºâR yÆ
	THEN asm_rewrite_tac[]
	THEN PC_T1 "Ø_lin_arith" asm_prove_tac[]);
val Ø_abs_mono_thm = save_pop_thm "Ø_abs_mono_thm";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ x ^ 2 = y ^ 2 ¥ Abs x = Abs yÆ);
a (rewrite_tac [Ø_Ó_exp_square_thm, get_spec ¨AbsâRÆ]
	THEN REPEAT strip_tac);
a (cases_tac ¨ÓØ 0 ºâR xÆ
	THEN asm_rewrite_tac[]);
(* *** Goal "1" *** *)
a (cases_tac ¨ÓØ 0 ºâR yÆ
	THEN asm_rewrite_tac[]);
(* *** Goal "1.1" *** *)
a (all_asm_ufc_tac [Ø_square_eq_thm2] THEN asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a (all_asm_ante_tac);
a (lemma_tac ¨∂z∑ y = ~âR zÆ
	THEN1 (∂_tac ¨~âR yÆ THEN rewrite_tac[])
	THEN asm_rewrite_tac[Ø_times_minus_thm]
	THEN REPEAT strip_tac);
a (lemma_tac ¨ÓØ 0 ºâR zÆ
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
a (all_ufc_tac [Ø_square_eq_thm2]
	THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (all_asm_ante_tac);
a (lemma_tac ¨∂z∑ x = ~âR zÆ
	THEN1 (∂_tac ¨~âR xÆ THEN rewrite_tac[])
	THEN asm_rewrite_tac[Ø_times_minus_thm]
	THEN REPEAT strip_tac);
a (lemma_tac ¨ÓØ 0 ºâR zÆ
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
a (cases_tac ¨ÓØ 0 ºâR yÆ
	THEN asm_rewrite_tac[]);
(* *** Goal "2.1" *** *)
a (all_asm_ufc_tac [Ø_square_eq_thm2] THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a (all_asm_ante_tac);
a (lemma_tac ¨∂v∑ y = ~âR vÆ
	THEN1 (∂_tac ¨~âR yÆ THEN rewrite_tac[])
	THEN asm_rewrite_tac[Ø_times_minus_thm]
	THEN REPEAT strip_tac);
a (lemma_tac ¨ÓØ 0 ºâR vÆ
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
a (all_asm_ufc_tac [Ø_square_eq_thm2] THEN asm_rewrite_tac[]);
val Ø_square_eq_abs_thm = pop_thm ();
=TEX

=SML
set_goal([], ¨µx y:Ø∑ Abs x = Abs y ¥ x ^ 2 = y ^ 2Æ);
a (REPEAT µ_tac
	THEN rewrite_tac [get_spec ¨AbsâRÆ]
	THEN cases_tac ¨ÓØ 0 ºâR xÆ
	THEN cases_tac ¨ÓØ 0 ºâR yÆ
	THEN asm_rewrite_tac[]
	THEN strip_tac
	THEN TRY (asm_rewrite_tac[Ø_Ó_exp_square_thm, Ø_times_minus_thm]));
(* *** Goal "1" *** *)
a (POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a (asm_rewrite_tac[Ø_times_minus_thm]);
(* *** Goal "2" *** *)
a (LEMMA_T ¨~âR (~âR x) = ~âR (~âR y)Æ (asm_tac o (rewrite_rule[]))
	THEN1 (pure_asm_rewrite_tac[]
		THEN rewrite_tac[])
	THEN asm_rewrite_tac[]);
val Ø_abs_eq_square_thm = pop_thm ();
=TEX

=SML
set_goal([], ¨µx y:Ø∑ x ^ 2 = y ^ 2 § Abs x = Abs yÆ);
a (REPEAT strip_tac
	THEN all_ufc_tac [Ø_square_eq_abs_thm, Ø_abs_eq_square_thm]
	THEN asm_rewrite_tac[]);
val Ø_square_eq_abs_thm = save_pop_thm "Ø_square_eq_abs_thm";
=TEX

=SML
set_goal([], ¨µx:Ø∑ Abs (x *âR x) = x *âR xÆ);
a (REPEAT strip_tac
	THEN rewrite_tac [get_spec ¨AbsâRÆ]);
a (LEMMA_T ¨ÓØ 0 ºâR x *âR xÆ rewrite_thm_tac
	THEN1 (rewrite_tac [Ø_prod_sign_iff_clauses]
		THEN PC_T1 "Ø_lin_arith" prove_tac[]));
val Ø_abs_square_thm1 = save_pop_thm "Ø_abs_square_thm1";
=TEX

=SML
set_goal([], ¨µ x y∑ x *âR x ºâR y *âR y ¥ Abs x ºâR Abs yÆ);
a (REPEAT strip_tac
	THEN bc_tac [Ø_square_º_º_thm]
	THEN TRY (rewrite_tac [Ø_Abs_Norm_clauses]));
a (asm_rewrite_tac [map_eq_sym_rule Ø_Abs_Norm_clauses,
	Ø_abs_square_thm1]);
val Ø_square_º_abs_º_thm = save_pop_thm "Ø_square_º_abs_º_thm";
=TEX

=SML
set_goal([], ¨µ x y∑ Abs x ºâR Abs y ¥ x *âR x ºâR y *âR yÆ);
a (REPEAT strip_tac);
a (lemma_tac ¨ÓØ 0 ºâR Abs xÆ
	THEN1 rewrite_tac [Ø_Abs_Norm_clauses]);
a (ALL_FC_T (MAP_EVERY ante_tac) [Ø_square_mono_thm1]);
a (rewrite_tac [map_eq_sym_rule Ø_Abs_Norm_clauses,
	Ø_abs_square_thm1]);
val Ø_abs_º_square_º_thm = save_pop_thm "Ø_abs_º_square_º_thm";
=TEX

=SML
set_goal([], ¨µ x y∑ x *âR x ºâR y *âR y § Abs x ºâR Abs yÆ);
a (REPEAT µ_tac THEN strip_tac
	THEN rewrite_tac [Ø_abs_º_square_º_thm, Ø_square_º_abs_º_thm]);
val Ø_square_º_iff_abs_º_thm = save_pop_thm "Ø_square_º_iff_abs_º_thm";
=TEX

=SML
set_goal([], ¨µ x y∑ x *âR x <âR y *âR y § Abs x <âR Abs yÆ);
a (REPEAT strip_tac);
(* *** Goal "1" *** *)
a (lemma_tac ¨AbsâR x ºâR AbsâR yÆ);
(* *** Goal "1.1" *** *)
a (lemma_tac ¨x *âR x ºâR y *âR yÆ
	THEN1 asm_rewrite_tac [get_spec ¨$ºâRÆ]);
a (bc_tac [Ø_square_º_iff_abs_º_thm] THEN strip_tac);
(* *** Goal "1.2" *** *)
a (POP_ASM_T ante_tac
	THEN rewrite_tac [get_spec ¨$ºâRÆ]
	THEN REPEAT strip_tac);
a (DROP_NTH_ASM_T 2 ante_tac
	THEN LEMMA_T ¨x *âR x = y *âR yÆ rewrite_thm_tac
	THEN1 asm_rewrite_tac [Ø_square_eq_iff_abs_eq_thm]);
(* *** Goal "2" *** *)
a (lemma_tac ¨x *âR x ºâR y *âR yÆ);
a (lemma_tac ¨Abs x ºâR Abs yÆ
	THEN1 asm_rewrite_tac [get_spec ¨$ºâRÆ]);
a (bc_tac [Ø_abs_º_square_º_thm] THEN strip_tac);
(* *** Goal "2.2" *** *)
a (POP_ASM_T ante_tac
	THEN rewrite_tac [get_spec ¨$ºâRÆ]
	THEN REPEAT strip_tac);
a (DROP_NTH_ASM_T 2 ante_tac
	THEN LEMMA_T ¨Abs x = Abs yÆ rewrite_thm_tac
	THEN1 asm_rewrite_tac [map_eq_sym_rule Ø_square_eq_iff_abs_eq_thm]);
val Ø_square_less_iff_abs_less_thm = save_pop_thm "Ø_square_less_iff_abs_less_thm";
=TEX

=SML
set_goal([], ¨µx:Ø∑ Abs (x ^âN 2) = x ^âN 2Æ);
a (rewrite_tac [Ø_Ó_exp_square_thm, Ø_abs_square_thm1]);
val Ø_abs_square_thm2 = save_pop_thm "Ø_abs_square_thm2";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ Abs (x *âR y) = (Abs x) *âR (Abs y)Æ);
a (REPEAT strip_tac
	THEN rewrite_tac [get_spec ¨AbsâRÆ]);
a (cases_tac ¨ÓØ 0 ºâR xÆ THEN cases_tac ¨ÓØ 0 ºâR yÆ
	THEN TRY (asm_rewrite_tac[]));
(* *** Goal "1" *** *)
a (lemma_tac ¨ÓØ 0 ºâR x *âR yÆ
	THEN1 (rewrite_tac [Ø_prod_sign_iff_clauses]
		THEN contr_tac)
	THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (cases_tac ¨x = ÓØ 0Æ THEN TRY (asm_rewrite_tac[]));
a (lemma_tac ¨≥ ÓØ 0 ºâR x *âR yÆ
	THEN1 (rewrite_tac [Ø_prod_sign_iff_clauses]
		THEN REPEAT strip_tac
		THEN TRY (PC_T1 "Ø_lin_arith" asm_prove_tac[]))
	THEN asm_rewrite_tac[Ø_times_minus_thm]);
(* *** Goal "3" *** *)
a (cases_tac ¨y = ÓØ 0Æ THEN TRY (asm_rewrite_tac[]));
a (lemma_tac ¨≥ ÓØ 0 ºâR x *âR yÆ
	THEN1 (rewrite_tac [Ø_prod_sign_iff_clauses]
		THEN REPEAT strip_tac
		THEN TRY (PC_T1 "Ø_lin_arith" asm_prove_tac[]))
	THEN asm_rewrite_tac[Ø_times_minus_thm]);
(* *** Goal "4" *** *)
a (lemma_tac ¨ÓØ 0 ºâR x *âR yÆ
	THEN1 (rewrite_tac [Ø_prod_sign_iff_clauses]
		THEN (PC_T1 "Ø_lin_arith" asm_prove_tac[]))
	THEN asm_rewrite_tac[Ø_times_minus_thm]);
val Ø_abs_prod_thm = save_pop_thm "Ø_abs_prod_thm";
=TEX

}%ignore

\subsection{Square Root}

\ignore{
=SML
push_goal ([], ¨∂SqrtA∑ µ x∑ ÓØ 0 º SqrtA x ± (SqrtA x)^2 = Abs xÆ);
a(prove_∂_tac THEN strip_tac);
a (lemma_tac ¨ÓØ 0 º Abs x'Æ
	THEN1 (rewrite_tac [Ø_0_º_abs_thm]));
a (all_ufc_tac [square_root_thm1]);
a(∂_tac ¨yÆ THEN asm_rewrite_tac[]);
val _ = save_cs_∂_thm (pop_thm());
=TEX
}%\ignore

πHOLCONST
‹ €SqrtA› :Ø ≠ Ø
˜¸¸¸¸¸¸
‹ µ x∑ ÓØ 0 º SqrtA x 
‹ ± (SqrtA x)^2 = Abs x
∞

\ignore{

=SML
set_goal([], ¨µx y:Ø∑ SqrtA x = SqrtA y ¥ Abs x = Abs yÆ);
a (REPEAT strip_tac);
a (LEMMA_T ¨(SqrtA x) ^âN 2 = (SqrtA y) ^âN 2Æ ante_tac
	THEN1 asm_rewrite_tac[]);
a (rewrite_tac [get_spec ¨SqrtAÆ]);
val Ø_sqrt_abs_thm1 = pop_thm ();
=TEX

=SML
set_goal([], ¨µx:Ø∑ SqrtA x = ÓØ 0 § x = ÓØ 0Æ);
a (REPEAT strip_tac THEN TRY (asm_rewrite_tac[]));
a (contr_tac THEN lemma_tac ¨ÓØ 0 <âR SqrtA x ^âN 2Æ
	THEN1 rewrite_tac[get_spec ¨SqrtAÆ,
	get_spec ¨AbsâRÆ,
	get_spec ¨$ºâRÆ]);
(* *** Goal "1.1" *** *)
a (cases_tac ¨ÓØ 0 <âR x ≤ ÓØ 0 = xÆ
	THEN asm_rewrite_tac[]
	THEN PC_T1 "Ø_lin_arith" asm_prove_tac[]);
(* *** Goal "1.2" *** *)
a (POP_ASM_T ante_tac
	THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (strip_asm_tac (rewrite_rule [Ø_Ó_exp_square_thm, Ø_prod_sign_iff_clauses]
	(µ_elim ¨ÓØ 0Æ (get_spec ¨SqrtAÆ))));
val sqrt_thm1 = save_pop_thm "sqrt_thm1";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ SqrtA (x ^ 2 + y ^ 2) = ÓØ 0 § x = ÓØ 0 ± y = ÓØ 0Æ);
a (REPEAT µ_tac THEN rewrite_tac [sqrt_thm1]);
a (lemma_tac ¨ÓØ 0 º x ^ 2 ± ÓØ 0 º y ^ 2Æ
	THEN1 (rewrite_tac [Ø_square_pos_thm]));
a (lemma_tac ¨ÓØ 0 º x ^ 2 + y ^ 2Æ
	THEN1 (all_ufc_tac [Ø_sum_pos_thm]));
a (LEMMA_T ¨(x ^âN 2 + y ^âN 2 = ÓØ 0)
		= (x ^âN 2 = ÓØ 0 ± y ^âN 2 = ÓØ 0)Æ
	rewrite_thm_tac
	THEN1 (ALL_FC_T1 fc_§_canon rewrite_tac [Ø_sum_zero_thm]));
a (rewrite_tac[Ø_Ó_exp_square_thm, Ø_prod_sign_iff_clauses]);
val sqrt_square_thm = save_pop_thm "sqrt_square_thm";
=TEX
}%\ignore

\ignore{

=SML
set_goal([], ¨µx:Ø∑ Abs(SqrtA x) = SqrtA x
	± Abs (Abs x) = Abs x
	± Abs (ÓØ 0) = ÓØ 0
	± Abs (~âR  x) = Abs xÆ);
a (REPEAT strip_tac
	THEN TRY (rewrite_tac [get_spec ¨AbsâRÆ, get_spec ¨SqrtAÆ]));
(* *** Goal "1" *** *)
a (cases_tac ¨ÓØ 0 ºâR xÆ
	THEN asm_rewrite_tac[]);
a (lemma_tac ¨ÓØ 0 ºâR ~âR xÆ
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
a (asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (rewrite_tac [get_spec ¨$ºâRÆ]);
a (strip_asm_tac (list_µ_elim [¨ÓØ 0Æ, ¨xÆ] Ø_less_cases_thm)
	THEN TRY (asm_rewrite_tac[]));
(* *** Goal "2.1" *** *)
a (LEMMA_T ¨≥ (ÓØ 0 <âR ~âR x ≤ ÓØ 0 = ~âR x)Æ rewrite_thm_tac
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
(* *** Goal "2.2" *** *)
a (LEMMA_T ¨x = ÓØ 0Æ rewrite_thm_tac
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
(* *** Goal "2.3" *** *)
a (LEMMA_T ¨ÓØ 0 <âR ~âR xÆ rewrite_thm_tac
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
a (LEMMA_T ¨≥ (ÓØ 0 <âR x ≤ ÓØ 0 = x)Æ rewrite_thm_tac
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
val Ø_abs_clauses1 = pop_thm ();
=TEX

=SML
set_goal([], ¨µx:Ø∑ SqrtA (~âR x) = SqrtA xÆ);
a (strip_tac);
a (lemma_tac ¨SqrtA (~âR x) ^âN 2 = AbsâR xÆ
	THEN1 (strip_asm_tac (µ_elim ¨~âR xÆ (get_spec ¨SqrtAÆ))
		THEN asm_rewrite_tac[Ø_abs_clauses1]));
a (lemma_tac ¨(SqrtA x) ^âN 2 = AbsâR xÆ
	THEN1 (strip_asm_tac (µ_elim ¨xÆ (get_spec ¨SqrtAÆ))
		THEN asm_rewrite_tac[Ø_abs_clauses1]));
a (lemma_tac ¨SqrtA (~âR x) ^âN 2 = SqrtA x ^âN 2Æ
	THEN1 asm_rewrite_tac[]);
a (ALL_FC_T (MAP_EVERY ante_tac) [Ø_square_eq_abs_thm]
	THEN rewrite_tac [Ø_abs_clauses1]
	THEN strip_tac);
val Ø_sqrt_minus_thm = save_pop_thm "Ø_sqrt_minus_thm";
=TEX

=SML
set_goal([], ¨µx:Ø∑ SqrtA(Abs x) = SqrtA xÆ);
a (REPEAT strip_tac
	THEN TRY (rewrite_tac [get_spec ¨AbsâRÆ, get_spec ¨SqrtAÆ]));
a (cases_tac ¨ÓØ 0 ºâR xÆ
	THEN asm_rewrite_tac[Ø_sqrt_minus_thm]);
val Ø_sqrt_abs_thm = pop_thm ();
=TEX

=SML
set_goal([], ¨µx:Ø∑ SqrtA(Abs x) = SqrtA x
	± Abs(SqrtA x) = SqrtA x
	± Abs (Abs x) = Abs x
	± Abs (ÓØ 0) = ÓØ 0
	± Abs (~âR  x) = Abs xÆ);
a (rewrite_tac[Ø_abs_clauses1, Ø_sqrt_abs_thm]);
val Ø_abs_clauses = save_pop_thm "Ø_abs_clauses";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ Abs x = Abs y ¥ SqrtA x = SqrtA yÆ);
a (REPEAT µ_tac THEN rewrite_tac [get_spec ¨AbsâRÆ]);
a (cases_tac ¨ÓØ 0 ºâR xÆ
	THEN asm_rewrite_tac[]);
(* *** Goal "1" *** *)
a (cases_tac ¨ÓØ 0 ºâR yÆ
	THEN REPEAT strip_tac
	THEN asm_rewrite_tac[Ø_sqrt_minus_thm]);
(* *** Goal "2" *** *)
a (cases_tac ¨ÓØ 0 ºâR yÆ
	THEN (asm_rewrite_tac[])
	THEN REPEAT strip_tac
	THEN TRY (asm_rewrite_tac[Ø_sqrt_minus_thm]));
(* *** Goal "2.1" *** *)
a (LEMMA_T ¨y = ~âR xÆ rewrite_thm_tac
	THEN1 asm_rewrite_tac[]);
a (rewrite_tac[Ø_sqrt_minus_thm]);
(* *** Goal "2.2" *** *)
a (LEMMA_T ¨x = yÆ rewrite_thm_tac
	THEN1 (PC_T1 "Ø_lin_arith" asm_prove_tac[]));
val Ø_sqrt_abs_thm2 = pop_thm ();
=TEX

=SML
set_goal([], ¨µx y:Ø∑ SqrtA x = SqrtA y § Abs x = Abs yÆ);
a (REPEAT strip_tac THEN all_ufc_tac [Ø_sqrt_abs_thm1, Ø_sqrt_abs_thm2]);
val Ø_sqrt_abs_thm = save_pop_thm "Ø_sqrt_abs_thm";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ ÓØ 0 ºâR x ± x ºâR y ¥ SqrtA x ºâR SqrtA yÆ);
a (REPEAT strip_tac
	THEN bc_tac [Ø_square_º_º_thm]
	THEN TRY (rewrite_tac [rewrite_rule [Ø_Ó_exp_square_thm] (get_spec ¨SqrtAÆ)])
	THEN all_ufc_tac [Ø_abs_mono_thm]);
val Ø_sqrt_mono_thm = save_pop_thm "Ø_sqrt_mono_thm";
=TEX

=SML
set_goal([], ¨µx:Ø∑ SqrtA (x * x) = Abs xÆ);
a (strip_tac
	THEN lemma_tac ¨SqrtA (x *âR x) ^âN 2 = (AbsâR x) ^âN 2Æ
	THEN1 (rewrite_tac [rewrite_conv [Ø_Ó_exp_square_thm] ¨(AbsâR x) ^âN 2Æ,
		get_spec ¨SqrtAÆ, get_spec ¨AbsâRÆ, Ø_abs_square_thm1]
		THEN cases_tac ¨ÓØ 0 ºâR xÆ
		THEN asm_rewrite_tac[Ø_times_minus_thm]));
a (ALL_ASM_FC_T
	(MAP_EVERY (strip_asm_tac o (rewrite_rule [Ø_abs_clauses1])))
	[Ø_square_eq_abs_thm]);
val Ø_sqrt_square_thm1 = save_pop_thm "Ø_sqrt_square_thm1";
=TEX

=SML
set_goal([], ¨µx:Ø∑ SqrtA (x ^ 2) = Abs xÆ);
a (REPEAT strip_tac
	THEN rewrite_tac [Ø_sqrt_square_thm1, Ø_Ó_exp_square_thm]);
val Ø_sqrt_square_thm2 = save_pop_thm "Ø_sqrt_square_thm2";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ SqrtA (x * y) = SqrtA x * SqrtA yÆ);
a (REPEAT strip_tac
	THEN lemma_tac ¨(SqrtA x *âR SqrtA y) *âR (SqrtA x *âR SqrtA y)
	 = (SqrtA x *âR SqrtA x) *âR (SqrtA y *âR SqrtA y)Æ
	THEN1 rewrite_tac [µ_elim ¨SqrtA xÆ Ø_times_order_thm]);
a (lemma_tac ¨SqrtA x *âR SqrtA x = AbsâR xÆ
	THEN1 (rewrite_tac [rewrite_rule [Ø_Ó_exp_square_thm]
			(µ_elim ¨xÆ (get_spec ¨SqrtAÆ))]));
a (lemma_tac ¨SqrtA y *âR SqrtA y = AbsâR yÆ
	THEN1 (rewrite_tac [rewrite_rule [Ø_Ó_exp_square_thm]
			(µ_elim ¨yÆ (get_spec ¨SqrtAÆ))]));
a (DROP_NTH_ASM_T 3 ante_tac);
a (once_asm_rewrite_tac[]);
a (rewrite_tac[eq_sym_rule(rewrite_rule [Ø_Abs_Norm_clauses, Ø_Ó_exp_square_thm]
	((±_right_elim o (µ_elim ¨x *âR yÆ)) (get_spec ¨SqrtAÆ))),
	rewrite_rule [Ø_Ó_exp_square_thm] Ø_square_eq_abs_thm,
	Ø_abs_clauses]);
a (once_rewrite_tac [eq_sym_conv ¨AbsâR (SqrtA x *âR SqrtA y) = SqrtA (x *âR y)Æ]
	THEN STRIP_T rewrite_thm_tac);
a (rewrite_tac [Ø_abs_clauses, Ø_Abs_Norm_clauses]);
val Ø_sqrt_prod_thm = save_pop_thm "Ø_sqrt_prod_thm";
=TEX

=SML
set_goal([], ¨µx y:Ø∑ SqrtA(x + y) º (SqrtA x) +âR (SqrtA y)Æ);
a (REPEAT strip_tac);
a (LEMMA_T ¨SqrtA(x + y) = Abs (SqrtA(x + y))
	± (SqrtA x) +âR (SqrtA y) = Abs((SqrtA x) +âR (SqrtA y))Æ
	once_rewrite_thm_tac);
(* *** Goal "1" *** *)
a (lemma_tac ¨ÓØ 0 ºâR SqrtA (x +âR y) ± ÓØ 0 ºâR SqrtA x +âR SqrtA yÆ
	THEN1 (rewrite_tac [get_spec ¨SqrtAÆ]
		THEN bc_tac [Ø_sum_pos_thm]
		THEN rewrite_tac [get_spec ¨SqrtAÆ])
	THEN ALL_FC_T rewrite_tac [Ø_abs_pos_id_thm]);
(* *** Goal "2" *** *)
a (bc_tac [Ø_square_º_abs_º_thm]);
a (rewrite_tac[rewrite_rule [Ø_Ó_exp_square_thm] (get_spec ¨SqrtAÆ),
	Ø_times_plus_distrib_thm]);
a (Ø_top_anf_tac);
a (lemma_tac ¨AbsâR (x +âR y) ºâR (AbsâR x) +âR (AbsâR y)Æ
	THEN1 rewrite_tac [Ø_Abs_Norm_clauses]);
a (LEMMA_T ¨(AbsâR x) +âR (AbsâR y) ºâR AbsâR x +âR AbsâR y +âR ÓØ 2 *âR SqrtA x *âR SqrtA yÆ
	asm_tac
	THEN1 rewrite_tac [Ø_prod_sign_iff_clauses, get_spec ¨SqrtAÆ]);
a (all_ufc_tac [Ø_º_trans_thm]);
val sqrt_plus_thm = save_pop_thm "sqrt_plus_thm"; 
=TEX

}%ignore

\subsection{Sums of Countable Collections of Reals}

In evaluating the cosmological consequences of Newton's Laws it is desirable to formulate them as cosmological theories in ways which do not prejudge such questions as whether the cardinality of the universe is finite.
To do this it is necessary to be able, where possible, to form the sum of an infinite set of reals, possibly even an uncountably infinite set of real numbers.

For the most general formulations it seems possible that the use of non-standard reals might be needed.
We are concerned here with what can be done with standard reals, i.e. with formalising the notion that some collection of real numbers has a finite sum.

The following definition gives the sum of a possibly finite or countable collection of real numbers.

=SML
declare_infix (300, "è>");
=TEX
πHOLCONST
‹ $€è>› : ('a ≠ Ø + ONE) ≠ Ø ≠ BOOL
˜¸¸¸¸¸¸
‹ µc r∑ c è> r §
‹	∂s∑ (µ a n m∑ IsL (c a) ¥ s n = s m ¥ n = m)
‹	¥ (Series (Ãn∑ if IsR (c (s n)) then 0âR else OutL (c (s n)))) -> r
∞

\section{Group Theory}

=SML
new_parent "group_egs";
=TEX

\subsection{Group Products}

πHOLCONST
‹ €GroupProduct› : 'a GROUP ≠ 'b GROUP ≠ ('a ∏ 'b) GROUP
˜¸¸¸¸¸¸
‹ µ G H∑ GroupProduct G H =
‹	let car = (Car G ∏ Car H)
‹	and prod	(la, lb) (ra, rb) = ((la.ra) G, (lb.rb) H)
‹	and unit = (Unit G, Unit H)
‹	and inv (a, b) = ((a õ~) G, (b õ~) H)
‹	in MkGROUP car prod unit inv
∞
=SML
declare_alias ("*", ¨GroupProductÆ);
=TEX
\ignore{
=SML
val €group_def› = get_spec¨GroupÆ;
val €group_unit_def› = get_spec¨UnitÆ;
val €gp_def› = get_spec¨GroupProductÆ;
=TEX
=SML
set_goal([], ¨µg:'a GROUP; h:'b GROUP∑
	g ç Group ± h ç Group ¥ g * h ç GroupÆ);
a(rewrite_tac [get_spec ¨GroupÆ,
	gp_def,
	group_unit_def,
	get_spec ¨$∏Æ,
	let_def]
	THEN REPEAT strip_tac
	THEN TRY (all_asm_fc_tac[])); (* ufc takes twice as long *)
val €group_product_thm› = save_pop_thm "group_product_thm";
=TEX
}%ignore

=GFT
group_product_thm = Ù µg:'a GROUP; h:'b GROUP∑
	g ç Group ± h ç Group ¥ g * h ç Group
=TEX

\subsection{Abelian Groups}

πHOLCONST
‹ €AbelianGroup› : 'a GROUP SET
˜¸¸¸¸¸¸
‹ µ G∑ G ç AbelianGroup § G ç Group
‹	± µ u v:'a∑ u ç Car G ± v ç Car G
‹	         ¥ (u.v) G = (v.u) G
∞

\ignore{
=SML
val €abelian_group_def› = get_spec¨AbelianGroupÆ;
set_goal([], ¨µg:'a GROUP; h:'b GROUP∑
	g ç AbelianGroup ± h ç AbelianGroup ±
	Car g = Universe ± Car h = Universe
	¥ Car (g * h) = UniverseÆ);
a(rewrite_tac [abelian_group_def,
	group_def,
	gp_def,
	group_unit_def,
	get_spec ¨$∏Æ,
	let_def]
	THEN REPEAT strip_tac
	THEN TRY (asm_rewrite_tac[sets_ext_clauses]));
val €abelian_group_product_lemma› = save_pop_thm "abelian_group_product_lemma";
=TEX

=SML
set_goal([], ¨µg:'a GROUP; h:'b GROUP∑
	g ç AbelianGroup ± h ç AbelianGroup 
	¥ (g * h) ç AbelianGroupÆ);
a (rewrite_tac [abelian_group_def]);
a (REPEAT strip_tac);
a (all_asm_ufc_tac[group_product_thm]);
a (REPEAT_N 2 (POP_ASM_T ante_tac));
a (asm_rewrite_tac [
	gp_def,
	let_def,
	group_unit_def,
	get_spec ¨$∏Æ]);
a (REPEAT strip_tac
	THEN all_asm_ufc_tac[]);
val €abelian_group_product_thm› = save_pop_thm "abelian_group_product_thm";
=TEX

=SML
set_goal([], ¨µG:'g GROUP; H:'h GROUP; x y:'g; v w:'h∑
	((x,v) . (y, w)) (G * H)
	= ((x . y)G, (v . w)H)Æ);
a (REPEAT strip_tac
	THEN rewrite_tac [gp_def, let_def, group_unit_def]
	THEN REPEAT strip_tac);
val group_prod_prod_thm = save_pop_thm "group_prod_prod_thm";
=TEX
=SML
set_goal([], ¨µG:'g GROUP; H:'h GROUP; x y:'g ∏ 'h∑
	(x . y) (G * H)
	= ((Fst x . Fst y)G, (Snd x . Snd y)H)Æ);
a (REPEAT strip_tac
	THEN rewrite_tac [gp_def, let_def, group_unit_def]
	THEN REPEAT strip_tac);
val group_prod_prod_thm1 = save_pop_thm "group_prod_prod_thm1";
=TEX

}%ignore

=GFT
abelian_group_product_thm = Ù µg:'a GROUP; h:'b GROUP∑
	g ç AbelianGroup ± h ç AbelianGroup ¥ (g * h) ç AbelianGroup
=TEX

\ignore{
=SML
set_goal([], ¨Ø_plus ç AbelianGroupÆ);
a (rewrite_tac [
	get_spec ¨AbelianGroupÆ,
	Ø_plus_ops_thm,
	Ø_plus_group_thm
	]);
val Ø_plus_abelian_thm = save_pop_thm "Ø_plus_abelian_thm";
=TEX
} %ignore

=GFT
Ø_plus_abelian_thm = Ù Ø_plus ç AbelianGroup
=TEX

\section{Topology}

=SML
new_parent "topology";
=TEX

\subsection{Bases etc.}

The following definitions belong properly in the theory ``topology''.

First we define the relationship between a $base$ and the topology of which it is a base.

=SML
declare_infix (300, "BaseOf");
=TEX

πHOLCONST
‹ $€BaseOf› :  'a SET SET ≠ 'a SET SET ≠ BOOL
˜¸¸¸¸¸¸
‹ µ base topology∑ base BaseOf topology §
‹	µs∑ s ç topology ¥ ∂ ss∑ ss Ä base ± s = ﬁ ss
∞

However, what we really need here is the construction of a topology from an arbitrary set of sets, which is done as follows:

πHOLCONST
‹ $€TopologyFrom› :  'a SET SET ≠ 'a SET SET
˜¸¸¸¸¸¸
‹ µ sets∑ TopologyFrom sets =
‹	• {topology | topology ç Topology ± sets Ä topology}
∞

\ignore{

Prove that $TopologyFrom$ yields a topology.

}%ignore

\section{Disjoint Unions (Sum)}

Two ways of constructing functions over disjoint unions.

πHOLCONST
‹ €Funâ+›: ('a ≠ 't) ≠ ('b≠ 'u) ≠ ('a + 'b ≠ 't + 'u)
˜¸¸¸¸¸¸
‹ µf:'a ≠ 't; g:'b ≠ 'u; ab:'a + 'b∑
‹	Funâ+ f g ab = if IsL ab then InL (f (OutL ab)) else InR (g (OutR ab))
∞

πHOLCONST
‹ €FunSum›: ('a ≠ 't) ≠ ('b≠ 't) ≠ ('a + 'b ≠ 't)
˜¸¸¸¸¸¸
‹ µf:'a ≠ 't; g:'b ≠ 't; ab:'a + 'b∑
‹	FunSum f g ab = if IsL ab then f (OutL ab) else g (OutR ab)
∞

=GFT
€IsL_IsR_lemma› =
	Ù µ x∑ ≥ (IsL x § IsR x) ± ≥ (IsR x § IsL x)
=TEX

\ignore{
=SML
set_merge_pcs ["hol1", "'rbjmisc"];

set_goal([], ¨µx∑ IsR x § ≥ IsL xÆ);
a (µ_tac);
a (strip_asm_tac (µ_elim ¨xÆ sum_cases_thm) THEN asm_rewrite_tac[]);
val IsL_IsR_lemma = save_pop_thm "IsL_IsR_lemma";
=TEX
}%ignore


\section{Type OPT}

=SML
set_merge_pcs ["hol1", "'rbjmisc"];

new_type_defn (["OPT"], "OPT", ["'a"],
	tac_proof (([], ¨∂x:'a+ONE∑ (Ãy∑T) xÆ), ∂_tac ¨InR OneÆ THEN rewrite_tac []) );
=TEX

To make use of the type abbreviation `OPT' more readable the following constants are introduced:

\ignore{
=SML
set_goal([], ¨∂(Value:'a ≠ 'a OPT) Undefined∑
	OneOne Value
	± (µx∑ ≥ Value x = Undefined)
	± (µy∑ y = Undefined ≤ (∂z∑ y = Value z))Æ);
a (strip_asm_tac (get_defn "-" "OPT"));
a (fc_tac [type_lemmas_thm2]);
a (DROP_NTH_ASM_T 2 (asm_tac o (rewrite_rule[])));
a (fc_tac [get_spec ¨OneOneÆ] THEN POP_ASM_T (asm_tac o rewrite_rule[]));
a (∂_tac ¨Ãx∑ abs (InL x)Æ THEN ∂_tac ¨abs (InR One)Æ THEN rewrite_tac [] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a (rewrite_tac[ get_spec ¨OneOneÆ] THEN REPEAT strip_tac);
a (lemma_tac ¨rep(abs(InL x1)) = rep(abs(InL x2))Æ THEN1 rewrite_tac[asm_rule ¨abs (InL x1) = abs (InL x2)Æ]);
a (POP_ASM_T (asm_tac o (rewrite_rule [asm_rule ¨µ r∑ rep (abs r) = rÆ])));
a strip_tac;
(* *** Goal "2" *** *)
a (contr_tac);
a (LEMMA_T ¨rep(abs(InL x)) = rep(abs(InR One))Æ (strip_asm_tac o (rewrite_rule [asm_rule ¨µ r∑ rep (abs r) = rÆ]))
	THEN1 rewrite_tac[asm_rule ¨abs (InL x) = abs (InR One)Æ]);
(* *** Goal "3" *** *)
a (strip_asm_tac (µ_elim ¨rep yÆ sum_cases_thm));
(* *** Goal "3.1" *** *)
a (∂_tac ¨y'Æ THEN rewrite_tac [map_eq_sym_rule (asm_rule ¨rep y = InL y'Æ), asm_rule ¨µ a∑ abs (rep a) = aÆ]);
(* *** Goal "3.2" *** *)
a (LEMMA_T ¨z = OneÆ asm_tac THEN1 rewrite_tac[]);
a (var_elim_asm_tac ¨z = OneÆ);
a (lemma_tac ¨abs(rep(y)) = abs(InR One)Æ THEN1 rewrite_tac[asm_rule ¨rep y = InR OneÆ]);
a (POP_ASM_T ante_tac THEN asm_rewrite_tac[]);
save_cs_∂_thm (pop_thm());
=TEX
}%ignore

πHOLCONST
‹ €Value› : 'a ≠ 'a OPT;
‹ €Undefined› : 'a OPT
˜¸¸¸¸¸¸¸¸¸¸¸
‹ OneOne Value
‹	± (µx∑ ≥ Value x = Undefined)
‹	± (µy∑ y = Undefined ≤ (∂z∑ y = Value z))
∞

=GFT
€opt_cases_thm› =
   Ù µ x∑ x = Undefined ≤ (∂ y∑ x = Value y)

€value_not_undefined_lemma› =
   Ù µ x∑ ≥ Value x = Undefined ± ≥ Undefined = Value x
=TEX

\ignore{
=SML
set_goal([], ¨µx∑ x = Undefined ≤ (∂y∑ x = Value y)Æ);
a strip_tac;
a (strip_asm_tac (get_spec ¨ValueÆ));
a (spec_nth_asm_tac 1 ¨xÆ THEN_TRY asm_rewrite_tac[]);
val opt_cases_thm = save_pop_thm "opt_cases_thm";

set_goal([], ¨µx∑ ≥ Value x = Undefined ± ≥ Undefined = Value xÆ);
a (strip_tac);
a (strip_asm_tac (get_spec ¨ValueÆ)
	THEN asm_rewrite_tac[]
	THEN SYM_ASMS_T rewrite_tac);
val value_not_undefined_lemma = save_pop_thm "value_not_undefined_lemma";

set_goal([], ¨µx y∑ Value x = Value y § x = yÆ);
a (REPEAT strip_tac THEN_TRY asm_rewrite_tac[]);
a (strip_asm_tac (rewrite_rule [get_spec ¨OneOneÆ] (get_spec ¨ValueÆ))
	THEN asm_fc_tac[]);
val value_oneone_lemma = save_pop_thm "value_oneone_lemma";

set_goal([], ¨∂ValueOf: 'a OPT ≠ 'a∑ µv∑ ValueOf (Value v) = vÆ);
a (∂_tac ¨Ãx∑ ≈ y∑ Value y = xÆ THEN rewrite_tac[get_spec ¨ValueÆ]
	THEN strip_tac);
a (≈_tac ¨≈ y∑ Value y = Value vÆ);
a (∂_tac ¨vÆ THEN rewrite_tac[]);
a (strip_asm_tac (get_spec ¨ValueÆ));
a (fc_tac [get_spec ¨OneOneÆ]);
a (POP_ASM_T ante_tac THEN rewrite_tac[] THEN strip_tac);
a (all_asm_fc_tac []);
save_cs_∂_thm (pop_thm());
=TEX
}%ignore

πHOLCONST
‹ €ValueOf› : 'a OPT ≠ 'a
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µv∑ ValueOf (Value v) = v
∞

πHOLCONST
‹ €IsDefined› : 'a OPT ≠ BOOL
˜¸¸¸¸¸¸¸¸¸¸¸
‹ µv∑ IsDefined v § ≥ v = Undefined
∞

\subsection{Proof Contexts}

=SML
add_pc_thms1 "'rbjmisc" [NeSet_ne_thm];
add_pc_thms "'rbjmisc" [NeSet_PeSet_thm, IsL_IsR_lemma, MemOf_memof_thm, PeSet_Insert_thm, MemOf_NeSet_unit_thm];
commit_pc "'rbjmisc";

force_new_pc "€rbjmisc›";
merge_pcs ["hol", "'rbjmisc"] "rbjmisc";
commit_pc "rbjmisc";

force_new_pc "€rbjmisc1›";
merge_pcs ["'rbjmisc", "hol1"] "rbjmisc1";
commit_pc "rbjmisc1";
=TEX

{\let\Section\section
\def\section#1{\Section{#1}\label{TheoryListing}}
\include{rbjmisc.th}
}  %\let

\twocolumn[\section{INDEX}\label{INDEX}]
{\small\printindex}

\end{document}
=SML
set_flag ("pp_use_alias", true);
output_theory{out_file="rbjmisc.th.doc", theory="rbjmisc"};
=TEX