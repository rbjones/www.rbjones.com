=TEX
\def\rbjidtADJdoc{$$Id: t044.doc,v 1.1 2010/12/06 13:30:43 rbj Exp $$}

\section{Directions and Motivations}

This discussion will be largely by comparison with my own previous efforts and Rob Arthan's work in wrk080 and wrk081.

My own previous is more about abstraction than algebra.
Rob's is definitely algebraic.
Many of the problems we address and the ways in which they are addressed derive from the peculiarities of working formally or of working in a polymorphic type theory rather than (say) in a first order set theory.

Here is a preliminary list of what I have in mind.

\begin{itemize}
\item Two layers, one like model theory, the second closer to algebra.

\item

\end{itemize}


\section{Preliminaries}

=SML
open_theory "equiv";
force_new_theory "unalgII";
new_parent "GSU";
force_new_pc Û"'unalgII"Ý;
merge_pcs ["'prove_¶_´_conv", "'savedthm_cs_¶_proof"] "'unalgII";
set_merge_pcs ["rbjmisc", "'unalgII"];
=TEX

I explore the possibility of doing something like universal algebra using a polymorphic higher order set theory with urelements.
A generalisation of universal algebra is sought in which minimal constraints are imposed to allow the construction of a universal object as a product.
Because of the generality sought the term algebra will not be used, and the flavour will initially be more model theoretic than algebraic (I imagine, though I have limited knowledge of either of these).

So, rather than algebras we talk of structures, and rather than equational varieties we have theories.
One of the aims is to see whether it is convenient to work with universal structures as a way of developing theories.
The supposed benefit is that results need not be conditional (of the form `if A is a group then ....').

The benefit of working in a higher order set theory relative to working in a polymorphic higher order logic without the set theory is expected to be a much more liberal notion of theory to which the work is applicable.

We work with structures, and use values of type $”'a GSU®$ for them.
These may best be thought of in the first instance as dependent pairs, though possibly the approach will work with other kinds of structure.
The first thought for a signature might then be a dependent product `type', represented by a function from values on the left of the pairs to types for the right hand side.
We might then allow that the left hand side be an assignment of sets to type variables (an indexed set of carriers for the operators of the theory), and the right hand side be an indexed set of operators the type of which is given by applying the function determining the dependent type to the value on the left.
However to obtain the universal structures we need to be able to form products of structures which are themselves structures.
This is easier to work out in the context of a more specific idea about what structures and signatures are, so I will do this for higher-order relational structures, and then possibly relax the requirements.

So a higher-order relational structure will be an indexed set of type parameters, and an indexed set of higher-order relations.
A higher order relation is a relation whose domain is some type constructed using the type parameters.
The relation will then be a subset of that type.

A signature will consist of the following:
\begin{enumerate}
\item A set of type variable names.
\item A set of relation names.
\item A function from assignments of sets to type variables to assignments of domains to relation names.
\end{enumerate}

Think of this as a kind of syntactic object to which a value is assigned as follows:


\ignore{
=SML
commit_pc "'unalgII";

force_new_pc "ÛunalgIIÝ";
merge_pcs ["rbjmisc", "'unalgII"] "unalgII";
commit_pc "unalgII";

force_new_pc "ÛunalgII1Ý";
merge_pcs ["rbjmisc1", "'unalgII"] "unalgII1";
commit_pc "unalgII1";
=TEX
}%ignore


\section{Conclusions}
