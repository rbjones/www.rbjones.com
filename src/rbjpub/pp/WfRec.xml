<?xml version="1.0"?>
<!DOCTYPE ProofPower SYSTEM "pp-symbol.ent">
<xldoc xmlns="http://www.x-logic.org/xmlns/draft/xld"
       xmlns:xhtml="http://www.w3.org/TR/xhtml1/strict"
       id="$Id: WfRec.xml,v 1.4 2008/04/15 18:21:36 rbj01 Exp $"
       name="WfRec"
       title="Well-Founded Recursion"
       description="A theory of well-founded recursive definition in ProofPower HOL"
       keywords="x-logic xml logic proofpower hol well-founded recusive definition"
       class="con"
       root="../../"
       path="rbjpub/pp/"
       up="index.html"
       rbjhome="../rbj.htm"
       maintitle="mnt">

<section title="Overview">
<abstract>
This is a proof of the recursion theorem for well-founded recursive definitions.
It is modelled on Tobias Nipkow's proof for Isabelle HOL and uses relations modelled with ProofPower HOL's SET type constructor.
</abstract>
<secbody>
<sbcol>
<secref title="Introduction"/>
<secref title="Well-Founded Recursion"/>
<secref title="Recursive Definition"/>
</sbcol>
<sbcol>
<secref title="Proof Context"/>
<subsec title="Listing of Theory wf_rec" href="wf_rec.html" />
</sbcol>
</secbody>
</section>

<ft lang="xl-ign" rest="">
set_flag("pp_show_HOL_types", true);

</ft>

<section title="Introduction">
<abstract>
A new "wf_rec" theory is created as a child of "wf_rel".
Probably 
</abstract>
<secbody>
<sbcol>
<subsec title="The Theory wf_rec">
The new theory is first created, together with a proof context which we will build up as we develop the theory.
<ft lang="xl-sml" rest="">
open_theory "wf_rel";
force_new_theory "wf_rec";
force_new_pc "wf_rec";
merge_pcs ["xl_cs_&exist;_conv"] "wf_rec";
set_merge_pcs ["hol", "'bin_rel", "wf_rec"];
</ft>
</subsec>
</sbcol>
</secbody>
</section>

<section title="Well-Founded Recursion" tag="wfr">
<abstract>
In this section is proved the theorem which justifies well-founded recursive definitions.
</abstract>
<secbody>
<sbcol>
<subsec title="Introduction">
<p>
The idea here is that a recursive equation is represented by a functional, which is obtained by abstracting the right hand side of the equation on the name of the function.
We need to demonstrate that definitions using such a functional have unique solutions.
</p>
</subsec>
<subsec title="Is RecFun">
<i>is_recfun</i> is the set of 4-tuples &lt;r,a,H,f&gt; such that f solves the recursion equations represented by H for values which are in the left image of a under R.
(following Tobias Nipkow)
<holconst><holsig>
is_recfun: (('a &cross; 'a)SET &cross; 'a &cross; (('a &cross; ('a &cross; 'a)SET) &rarr; 'a) &cross; ('a &cross; 'a)SET)SET
</holsig>
<holpred>
&forall; r a H f &bull;
 (r,a,H,f) &isin; is_recfun &equiv; f = {(x,y)|
	(x,a) &isin; r &and; 
	y = H(x, {(v,w)| (v,w) &isin; f &and; (v,x) &isin; r})
	}
</holpred>
</holconst>
</subsec>
<subsec title="Restriction Intersection">
The following lemma states that two restriced recursive functions agree over their intersection.
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&forall;r H a f b g&bull; r &isin; twf
	&and; (r,a,H,f) &isin; is_recfun
	&and; (r,b,H,g) &isin; is_recfun
	&rArr; &forall;x&bull; (x,a)&isin;r &and; (x,b)&isin;r &rArr; &forall;y&bull;(x,y)&isin;f &equiv; (x,y)&isin;g&qqter;);
a (rewrite_tac(map get_spec [&qqtel;twf&qqter;, &qqtel;wf&qqter;, &qqtel;is_recfun&qqter;]));
a (REPEAT_N 7 strip_tac);
a (spec_nth_asm_tac 4 &qqtel;{x | (x, a) &isin; r &and; (x, b) &isin; r &rArr; &forall;y&bull;(x,y)&isin;f &equiv; (x,y)&isin;g}&qqter;);
(* *** Goal "1" *** *)
a (SWAP_NTH_ASM_CONCL_T 1 discard_tac);
a (all_asm_ante_tac THEN REPEAT_N 5 strip_tac);
a (once_asm_rewrite_tac[]);
a (rewrite_tac[] THEN REPEAT strip_tac);
a (DROP_NTH_ASM_T 1 rewrite_thm_tac);
a (LEMMA_T &qqtel;{(v, w)|(v, w) &isin; f &and; (v, x) &isin; r}
             = {(v, w)|(v, w) &isin; g &and; (v, x) &isin; r}&qqter;
	rewrite_thm_tac);
a (rewrite_tac[bin_rel_ext_clauses]);
a (REPEAT strip_tac);
a (spec_nth_asm_tac 5 &qqtel;x'&qqter;
  THEN all_asm_fc_tac[]);
a (spec_nth_asm_tac 5 &qqtel;x'&qqter;
  THEN all_asm_fc_tac[]);
a (spec_nth_asm_tac 3 &qqtel;y&qqter;);
(* *** Goal "2" *** *)
a (SWAP_NTH_ASM_CONCL_T 1 discard_tac);
a (all_asm_ante_tac THEN REPEAT_N 5 strip_tac);
a (once_asm_rewrite_tac[]);
a (rewrite_tac[] THEN REPEAT strip_tac);
a (DROP_NTH_ASM_T 1 rewrite_thm_tac);
a (LEMMA_T &qqtel;{(v, w)|(v, w) &isin; g &and; (v, x) &isin; r}
             = {(v, w)|(v, w) &isin; f &and; (v, x) &isin; r}&qqter;
	rewrite_thm_tac);
a (rewrite_tac[bin_rel_ext_clauses]);
a (REPEAT strip_tac);
a (spec_nth_asm_tac 5 &qqtel;x'&qqter;
  THEN all_asm_fc_tac[]);
a (spec_nth_asm_tac 3 &qqtel;y&qqter;);
a (spec_nth_asm_tac 5 &qqtel;x'&qqter;
  THEN all_asm_fc_tac[]);
(* *** Goal "3" *** *)
a (strip_tac THEN strip_tac);
a (spec_nth_asm_tac 3 &qqtel;x&qqter;);
val ri_lemma = save_pop_thm "ri_lemma";
</ft>
</subsec>
<subsec title="Restrict Unique">
An immediate corrolory is that there is only one restricted recursive function at any point.
First, however we prove a lemma about the domain of a restricted recursive function.
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&forall;r a H f&bull; (r,a,H,f) &isin; is_recfun
	&rArr; Dom f = {x | (x,a) &isin; r}&qqter;);
a (REPEAT strip_tac);
a (strip_asm_tac (list_&forall;_elim [&qqtel;r&qqter;,&qqtel;a&qqter;,&qqtel;H&qqter;,&qqtel;f&qqter;] (get_spec &qqtel;is_recfun&qqter;)));
a (once_asm_rewrite_tac[] THEN rewrite_tac[sets_ext_clauses, &isin;_in_clauses]);
a (once_asm_rewrite_tac[]);
a (prove_tac[sets_ext_clauses, &isin;_in_clauses]);
val recfun_Dom_thm = save_pop_thm "recfun_Dom_thm";
</ft>
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&forall;r H a f g&bull; r &isin; twf
	&and; (r,a,H,f) &isin; is_recfun
	&and; (r,a,H,g) &isin; is_recfun
	&rArr; f = g&qqter;);
a (REPEAT strip_tac);
a (strip_asm_tac (list_&forall;_elim [&qqtel;r&qqter;,&qqtel;H&qqter;,&qqtel;a&qqter;,&qqtel;f&qqter;,&qqtel;a&qqter;,&qqtel;g&qqter;] ri_lemma));
a (pure_rewrite_tac [rel_ext_Dom_thm]);
a (FC_T rewrite_tac [recfun_Dom_thm]);
a (asm_prove_tac[]);
val recfun_unique_thm = save_pop_thm "recfun_unique_thm";
</ft>
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&forall;r H a f b g&bull; r &isin; twf
	&and; (r,a,H,f) &isin; is_recfun
	&and; (r,b,H,g) &isin; is_recfun
	&and; (a,b) &isin; r
	&rArr; f = (Dom f) &dr; g&qqter;);
a (REPEAT strip_tac);
a (strip_asm_tac (list_&forall;_elim [&qqtel;r&qqter;,&qqtel;H&qqter;,&qqtel;a&qqter;,&qqtel;f&qqter;,&qqtel;b&qqter;,&qqtel;g&qqter;] ri_lemma));
a (fc_tac [recfun_Dom_thm, get_spec &qqtel;twf&qqter;]);
a (pure_asm_rewrite_tac [rel_ext_Dom_thm, Dom_rest_thm]);
a (rewrite_tac [rel_ext_Dom_thm, sets_ext_clauses, &isin;_in_clauses]);
a (REPEAT strip_tac THEN_TRY all_asm_fc_tac[]);
a (spec_asm_tac
	&qqtel;&forall; x&bull; (x, a) &isin; r &and; (x, b) &isin; r &rArr; (&forall; y&bull; (x, y) &isin; f &equiv; (x, y) &isin; g)&qqter;
	&qqtel;x&qqter;);
a (asm_rewrite_tac[]);
val recfun_restr_lemma = save_pop_thm "recfun_restr_lemma";
</ft>
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&forall;r H a f b&bull; r &isin; twf
	&and; (r,a,H,f) &isin; is_recfun
	&and; (b,a) &isin; r
	&rArr; (r,b,H,{(v,w) | (v,w) &isin; f &and; (v,b) &isin; r}) &isin; is_recfun&qqter;);
a (REPEAT strip_tac);
a (rewrite_tac [get_spec&qqtel;is_recfun&qqter;, bin_rel_ext_clauses, &isin;_in_clauses]);
a (fc_tac [get_spec&qqtel;is_recfun&qqter;]);
a (REPEAT_N 4 strip_tac);
(* *** Goal "1" *** *)
a (GET_NTH_ASM_T 1 (fn asm=&gt;STRIP_T (fn x =&gt; strip_asm_tac(once_rewrite_rule[asm]x))));
a (REPEAT strip_tac);
a (lemma_tac &qqtel;{(v, w)|((v, w) &isin; f &and; (v, b) &isin; r) &and; (v, x) &isin; r} = {(v, w)|(v, w) &isin; f &and; (v, x) &isin; r}&qqter;
	THEN1 (rewrite_tac [bin_rel_ext_clauses,&isin;_in_clauses]));
(* *** Goal "1.1" *** *)
a (REPEAT strip_tac);
a (fc_tac [get_spec&qqtel;twf&qqter;,get_spec&qqtel;Transitive&qqter;]);
a (all_asm_fc_tac[]);
(* *** Goal "1.2" *** *)
a (pure_once_asm_rewrite_tac[]);
a (rewrite_tac[]);
(* *** Goal "2" *** *)
a (REPEAT strip_tac);
a (once_asm_rewrite_tac[]);
a (rewrite_tac[]);
a (REPEAT strip_tac);
(* *** Goal "2.1" *** *)
a (fc_tac [get_spec&qqtel;twf&qqter;,get_spec&qqtel;Transitive&qqter;]);
a (all_asm_fc_tac[]);
(* *** Goal "2.2" *** *)
a (lemma_tac &qqtel;{(v, w)|((v, w) &isin; f &and; (v, b) &isin; r) &and; (v, x) &isin; r} = {(v, w)|(v, w) &isin; f &and; (v, x) &isin; r}&qqter;
	THEN1 (rewrite_tac [bin_rel_ext_clauses,&isin;_in_clauses]));
(* *** Goal "2.2.1" *** *)
a (REPEAT strip_tac);
a (fc_tac [get_spec&qqtel;twf&qqter;,get_spec&qqtel;Transitive&qqter;]);
a (all_asm_fc_tac[]);
(* *** Goal "2.2.2" *** *)
a (GET_NTH_ASM_T 1 (fn x=&gt; pure_once_rewrite_tac[x]));
a (rewrite_tac[]);
val restr_is_recfun_lemma = save_pop_thm "restr_is_recfun_lemma";
</ft>
Now the big one:
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&forall;H R a&bull; R &isin; twf &rArr; &exist;f&bull; (R, a, H, f) &isin; is_recfun&qqter;);
a (REPEAT strip_tac);
a (fc_tac[get_spec&qqtel;twf&qqter;]);
a (strip_asm_tac (&forall;_elim &qqtel;R&qqter; (get_spec&qqtel;wf&qqter;))
	THEN1 REPEAT (all_asm_fc_tac[]));
a (spec_nth_asm_tac 1 &qqtel;{z|&exist; f&bull; (R, z, H, f) &isin; is_recfun}&qqter;);
(* *** Goal "1" *** *)
a (SWAP_NTH_ASM_CONCL_T 1 discard_tac THEN strip_tac);
a (lemma_tac &qqtel;&exist;g&bull; g = { (v,w) | (v,x) &isin; R &and;
	&exist;h&bull; (R,v,H,h) &isin; is_recfun &and; w = H(v,h)}&qqter;
	THEN1 prove_&exist;_tac);
a (&exist;_tac &qqtel;g&qqter;);
a (rewrite_tac[get_spec &qqtel;is_recfun&qqter;, bin_rel_ext_clauses, &isin;_in_clauses]);
a (REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a (asm_ante_tac &qqtel;(x', y) &isin; g&qqter;);
a (asm_rewrite_tac[] THEN REPEAT strip_tac);
(* *** Goal "1.2" *** *)
a (swap_asm_concl_tac &qqtel;(x', y) &isin; g&qqter;);
a (asm_rewrite_tac[] THEN swap_nth_asm_concl_tac 1);
a (spec_nth_asm_tac 5 &qqtel;x'&qqter;);
a (lemma_tac &qqtel;h={(v, w)|(v, w) &isin; g &and; (v, x') &isin; R}&qqter;);
(* *** Goal "1.2.1" *** *)
a (asm_rewrite_tac[bin_rel_ext_clauses, &isin;_in_clauses]);
a (strip_tac THEN strip_tac THEN asm_rewrite_tac[]);
a (FC_T once_rewrite_tac [get_spec&qqtel;is_recfun&qqter;]);
a (rewrite_tac[]);
a (REPEAT strip_tac);
(* *** Goal "1.2.1.1" *** *)
a (all_asm_fc_tac[]);
(* *** Goal "1.2.1.2" *** *)
a (&exist;_tac &qqtel;{(v, w)|(v, w) &isin; h &and; (v, x'') &isin; R}&qqter;
	THEN asm_rewrite_tac[]);
a (strip_asm_tac (list_&forall;_elim [&qqtel;R&qqter;,&qqtel;H&qqter;,&qqtel;x'&qqter;,&qqtel;h&qqter;,&qqtel;x''&qqter;] restr_is_recfun_lemma));
(* *** Goal "1.2.1.3" *** *)
a (lemma_tac &qqtel;(R,x'',H,{(v, w)|(v, w) &isin; h &and; (v, x'') &isin; R}) &isin; is_recfun&qqter;
	THEN1 (strip_asm_tac (list_&forall;_elim [&qqtel;R&qqter;,&qqtel;H&qqter;,&qqtel;x'&qqter;,&qqtel;h&qqter;,&qqtel;x''&qqter;] restr_is_recfun_lemma)));
a (strip_asm_tac (list_&forall;_elim
	[&qqtel;R&qqter;,&qqtel;H&qqter;,&qqtel;x''&qqter;,&qqtel;{(v, w)|(v, w) &isin; h &and; (v, x'') &isin; R}&qqter;,&qqtel;h'&qqter;]
	recfun_unique_thm));
a (asm_rewrite_tac[]);
(* *** Goal "1.2.2" *** *)
a (asm_ante_tac &qqtel;y = H (x', h)&qqter;);
a (GET_ASM_T &qqtel;h = {(v, w)|(v, w) &isin; g &and; (v, x') &isin; R}&qqter;
	rewrite_thm_tac);
(* *** Goal "1.3" *** *)
a (asm_rewrite_tac[]);
a (spec_asm_tac &qqtel;&forall; y&bull; (y, x) &isin; R &rArr; y &isin; {z|&exist; f&bull; (R, z, H, f) &isin; is_recfun}&qqter;
	&qqtel;x'&qqter;);
a (&exist;_tac &qqtel;f&qqter; THEN asm_rewrite_tac[]);
a (lemma_tac &qqtel;{(v, w)
                     |((v, x) &isin; R
                           &and; (&exist; h&bull; (R, v, H, h) &isin; is_recfun &and; w = H (v, h)))
                         &and; (v, x') &isin; R} = f&qqter;);
(* *** Goal "1.3.1" *** *)
a (rewrite_tac[bin_rel_ext_clauses]);
a (REPEAT strip_tac);
(* *** Goal "1.3.1.1" *** *)
a (all_fc_tac [recfun_restr_lemma]);
a (all_fc_tac [recfun_Dom_thm]);
a (all_fc_tac [get_spec &qqtel;is_recfun&qqter;]);
a (once_asm_rewrite_tac[]);
a (rewrite_tac[&isin;_in_clauses]);
(*a (once_asm_rewrite_tac[]);*)
a (lemma_tac &qqtel;{(v, w)|(v, w) &isin; f &and; (v, x'') &isin; R} = h&qqter;);
a ((POP_ASM_T discard_tac) THEN (POP_ASM_T discard_tac)
	THEN once_asm_rewrite_tac[]);
a (GET_ASM_T &qqtel;Dom h = {x|(x, x'') &isin; R}&qqter; pure_rewrite_thm_tac);
a (prove_tac[bin_rel_ext_clauses]);
a (POP_ASM_T rewrite_thm_tac THEN strip_tac);
(* *** Goal "1.3.1.2" *** *)
a (POP_ASM_T ante_tac);
a (ALL_FC_T (MAP_EVERY ante_tac) [recfun_Dom_thm]);
a (rewrite_tac[sets_ext_clauses]);
a (REPEAT strip_tac);
a (spec_asm_tac &qqtel;&forall; x&bull; (&exist; y&bull; (x, y) &isin; f) &equiv; (x, x') &isin; R&qqter;
	&qqtel;x''&qqter;);
(* *** Goal "1.3.1.2.1" *** *)
a (REPEAT (asm_fc_tac[]));
a (REPEAT (asm_fc_tac[]));
a (REPEAT (asm_fc_tac[]));
(* *** Goal "1.3.1.3" *** *)
a (&exist;_tac &qqtel;{(x,y)| (x,y) &isin; f &and; (x,x'') &isin; R}&qqter; THEN REPEAT strip_tac);
(* *** Goal "1.3.1.3.1" *** *)
a (ALL_FC_T
	(MAP_EVERY(asm_tac o (rewrite_rule[sets_ext_clauses])))
	[recfun_Dom_thm]);
a (spec_asm_tac &qqtel;&forall; x&bull; (&exist; y&bull; (x, y) &isin; f) &equiv; (x, x') &isin; R&qqter; &qqtel;x''&qqter;);
a (asm_fc_tac[]);
a (asm_fc_tac[]);
a (all_fc_tac [restr_is_recfun_lemma]);
(* *** Goal "1.3.1.3.2" *** *)
a (ALL_FC_T (MAP_EVERY ante_tac) [get_spec &qqtel;is_recfun&qqter;]);
a (POP_ASM_T (fn a=&gt; STRIP_T (fn h=&gt; ante_tac (once_rewrite_rule[h]a))));
a (rewrite_tac [&isin;_in_clauses]);
a (strip_tac);
(* *** Goal "1.3.1.4" *** *)
a (ALL_FC_T
	(MAP_EVERY(asm_tac o (rewrite_rule[sets_ext_clauses])))
	[recfun_Dom_thm]);
a (spec_asm_tac &qqtel;&forall; x&bull; (&exist; y&bull; (x, y) &isin; f) &equiv; (x, x') &isin; R&qqter; &qqtel;x''&qqter;);
a (asm_fc_tac[]);
a (asm_fc_tac[]);
(* *** Goal "1.3.2" *** *)
a (asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (spec_asm_tac &qqtel;&forall; x&bull; x &isin; {z|&exist; f&bull; (R, z, H, f) &isin; is_recfun}&qqter; &qqtel;a&qqter;);
a (&exist;_tac &qqtel;f&qqter; THEN strip_tac);
val exists_recfun_thm = save_pop_thm "exists_recfun_thm";
</ft>
<ft lang="xl-sml" rest="">
set_goal([],&qqtel;&exist; the_recfun
      &bull; &forall; r a H&bull; r &isin; twf &rArr; (r, a, H, the_recfun (r, a, H)) &isin; is_recfun&qqter;);
a (PC_T "hol" prove_&exist;_tac THEN strip_tac);
a (&exist;_tac &qqtel;&epsilon;recfun&bull; Fst x &isin; twf
               &rArr; (Fst x, Fst (Snd x), Snd (Snd x), recfun) &isin; is_recfun&qqter;);
a strip_tac;
a (fc_tac[list_&forall;_elim [&qqtel;Snd(Snd x)&qqter;,&qqtel;Fst x&qqter;,&qqtel;Fst (Snd x)&qqter;] exists_recfun_thm]);
a (all_&epsilon;_tac);
a (&exist;_tac &qqtel;f&qqter; THEN asm_rewrite_tac[]);
val recfun_consistent = top_thm();
xl_set_cs_&exist;_thm (pop_thm());
</ft>
<holconst><holsig>
the_recfun: (('a &cross; 'a)SET &cross; 'a &cross; (('a &cross; ('a &cross; 'a)SET) &rarr; 'a)) &rarr; ('a &cross; 'a)SET
</holsig>
<holpred>
&forall; r a H&bull; r &isin; twf &rArr; (r,a,H,the_recfun(r,a,H)) &isin; is_recfun 
</holpred>
</holconst>
We now define the function <i>wftrec</i> which delivers a solution to a recursion functional.
<holconst><holsig>
wftrecfun: (('a &cross; 'a)SET &cross; (('a &cross; ('a &cross; 'a)SET) &rarr; 'a)) &rarr; ('a &cross; 'a)SET
</holsig>
<holpred>
&forall; r H&bull; wftrecfun (r,H) = {(a,v) | v = H(a,the_recfun(r,a,H))}
</holpred>
</holconst>
The following theorem shows that this is indeed a fixed-point.
<ft lang="xl-ign" rest="">
set_goal([],&qqtel;&forall; r&bull; r &isin; twf &rArr;
	&forall;H f&bull; f = wftrecfun (r,H) &rArr;
		f = {(a,v) | v = H(a, {x | (x,a) &isin; r} &dr; f)}&qqter;);
a (rewrite_tac [get_spec &qqtel;wftrecfun&qqter;]);
a (REPEAT strip_tac);
a (asm_rewrite_tac[bin_rel_ext_clauses, &isin;_in_clauses]);
a (strip_tac THEN strip_tac);
a (lemma_tac &qqtel;{(x', y)|(x', x) &isin; r &and; y = H (x', the_recfun (r, x', H))}
	= the_recfun (r, x, H)&qqter;);
(* here I am *)
a (lemma_tac &qqtel;&forall;x y v w&bull; y = w &rArr; (x = y &equiv; v = w)&qqter;);
a (REPEAT strip_tac THEN asm_rewrite_tac[]);
a (ALL_FC_T (MAP_EVERY ante_tac)
	 [list_&forall;_elim [&qqtel;r&qqter;,&qqtel;x&qqter;,&qqtel;H&qqter;] (get_spec &qqtel;the_recfun&qqter;)]);
a (rewrite_tac [get_spec &qqtel;is_recfun&qqter;]);
a (STRIP_T (fn x=&gt; once_rewrite_tac[all_&forall;_elim x]));
a (lemma_tac &qqtel;{(x', y) |
	(x', x) &isin; r &and;
	y = H(x',{(v, w) | (v, w) &isin; the_recfun (r, x, H) &and; (v, x') &isin; r})}
	={(a, v)|v = H (a, the_recfun (r, a, H))}&qqter;);
a (rewrite_tac [bin_rel_ext_clauses, &isin;_in_clauses]);
a (REPEAT strip_tac);
(* false subgoals *)
</ft>
<holconst><holsig>
wftrec: (('a &cross; 'a)SET &cross; 'a &cross; (('a &cross; ('a &cross; 'a)SET) &rarr; 'a)) &rarr; 'a
</holsig>
<holpred>
&forall; r a H&bull; wftrec (r,a,H) = H(a,the_recfun(r,a,H))
</holpred>
</holconst>

</subsec>
</sbcol>
</secbody>
</section>

<section title="Recursion Theorem" tag="rt">
<abstract>

</abstract>
<secbody>
<sbcol>
<subsec/>
</sbcol>
</secbody>
</section>

<section title="Proof Context" tag="pc">
<abstract>
In this section I will create a decent proof context for recursive definitions, eventually.
</abstract>
<secbody>
<sbcol>
<subsec/>
</sbcol>
<sbcol>
<subsec title="Proof Context">
<ft lang="xl-sml" rest="">
(* commit_pc "wf_rec"; *)
</ft>
</subsec>
</sbcol>
</secbody>
</section>

</xldoc>






