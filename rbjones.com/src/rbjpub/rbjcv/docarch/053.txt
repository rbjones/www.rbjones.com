.nr PS 11
.nr VS 14
.so roff.defs
.LP
.TL
A Combinatory Theory of Partial Functions
.AU
Roger Bishop Jones
.AI
ICL Defence Systems
.AB no
.AE
.ds LH DTC/RBJ/053   Issue 0.1
.ds CH \s-2A Combinatory Theory of Partial Functions\s+2
.ds RH 1987-03-18
.ds LF DTC/RBJ/053   Issue 0.1
.ds CF \s-2A Combinatory Theory of Partial Functions\s+2
.ds RF Page \\n(PN
.LP
.ta 0.8i 1.6i 2.4i 3.2i 4.0i 4.8i
.TA 0.8i 1.6i 2.4i 3.2i 4.0i 4.8i
.KS
.NH
INTRODUCTION
.LP
This document specifies semi-formally and formally a version of illiative combinatory logic.
.LP
The system is at bottom a theory of "restricted generality".
In this formalisation we attempt to explore the idea that the terms of
the language represent computable functions over the terms of the
language, (or perhaps over a quotient of a primitive sublanguage)
and that a true proposition is an expression which evaluates to the
boolean value "true".
.LP
In this spirit the combinator \(*C is interpreted as yielding 
a computable function from the terms of the language which only sometimes
yields a boolean, i.e. a partial function into {true,false}.
The rules for substitution into expressions involving \(*C therefore
depend upon an understanding of what substitutions are reasonable in
the argument to a partial function.
.LP
For this reason I develop the definition of a partial function in
the combinatory logic prior to supplying the rules for substitution.
.LP
I have also taken the view, contrary to my previous work, that
reduction of the number of primitives is not desirable, since it
results in a less abstract system and may increase the risk of inconsistency.
Reductions, where they are possible, will appear in the semantics.
.LP
The resulting theory has in some respects a flavour of constructive type
theories.
This is entirely superficial and largely accidental.
.LP
The semi-formal notation is marked by a vertical bar in the
left margin.
The formal notation is in the language Miranda and occurs 
between marks | |< and | |> in the text.
To make the Miranda more readable special symbols have been used where
less readable alphanumeric constructors are necessary.
Special translation facilities are used to enable the text to be
processed by the Miranda compiler.
.KE
.KS
.NH
SYNTAX
.LP
The abtract syntax of terms is that of the lambda calculus.
A concrete syntax provides more readable forms for important
constructs.
The formal definition is provided in terms of the abstract
syntax, the informal in terms of the concrete syntax.
There is therefore not a very close match between the formal
and informal accounts.
.KE
.KS
.LP
.NH 2
Formal Abstract Syntax
.LP
A term is a constant, a variable, an application or an abstraction.
.DS L
||<
term ::=	V [char]		|	|| variable
		C [char]		|	|| constant
		term _ term		|	|| application
		\(*l [char] term		|| abstraction
||>
.DE
.KE
.KS
.LP
The formal system describes how to prove "sequents".
.LP
A sequent is a list of terms followed by "\*o" followed by a list of terms
and should be read "if each term on the left is true then so is each 
term on the right".
.KE
.DS L
||<
seq ::= [term] \*o [term]
||>
.KS
.NH 2
Concrete Syntax
.LP
The concrete syntax for the core language is described here.
Extensions will be described informally as new constants are
introduced.
.sv
term ::= constant | variable | term term | \(*lvariable.term

sequent ::= [term] \*o [term]
.sw
.KE
.KS
.NH 2
Proofs
.LP
The syntax of proofs is also given in an abstract and a concrete
form.
.KE
.LP
The abstract form consists of a Miranda abstract data type which
enables the computation of a subset of the sequents known as
theorems.
.LP
The concrete form consists of axiom schemata, showing a set
of sequents which may be accepted as theorems without proof,
and a collection of rules indicating how a sequent may be proven
to be a theorem given suitable premises which are themselves
(shown to be) theorems.
.KS
.LP
The axiom and rule schemata employ free syntactic variables to make
clear which sequents are proper instances of the schemas.
These variables each range over specific syntactic categories as
follows:
.LP
x, x2, y, z range over variables.
.LP
u, u', v, v', w are metavariables ranging over terms.
.LP
\(*F, \(*G, \(*H, \(*D are metavariables ranging over lists of terms.
.LP
\(*F \(ib \(*G should be read "every term in \(*F is also in \(*G".
.KE
.LP
Informal further restrictions on the permitted instantiation of these
metavariables may be specified against the schema.
Ambuguities should be resolved by reference to the formal abstract
specification.
.KS
.LP
The primitive constants are:
.RS
.IP =
equality (infix)
.IP \*d
logical OR (infix)
.IP \(*C
restricted quantification
.IP \(*i
choice function
.RE
.KE
.KS
.NH
THE BASIC SYSTEM
.LP
.KE
.KS
.NH
DOMAINS
.LP
.KE
.KS
.NH
TYPES
.LP
.KE
.DE
